<div id="dashboard-bg" class="background-container"></div>

<div class="dashboard-page">
  <div class="container">
    <header class="dashboard-header">
      <h1 class="page-title gradient-text">Server Health Dashboard</h1>
      <p class="subtitle">Real-time monitoring of SWOOSH Bot system resources</p>
      
      <div class="last-updated">
        <i class="fas fa-sync-alt"></i> Live updates every 2 seconds
      </div>
    </header>
    
    <div class="dashboard-grid">
      <!-- Main metrics -->
      <div class="dashboard-card metric-card">
        <div class="metric-header">
          <h3><i class="fas fa-microchip"></i> CPU Usage</h3>
        </div>
        <div class="metric-value">
          <div class="gauge-container" id="cpu-gauge">
            <canvas id="cpu-canvas" width="200" height="200"></canvas>
            <div class="gauge-value" id="cpu-value">0%</div>
          </div>
        </div>
        <div class="metric-details">
          <div class="detail-item">
            <span class="detail-label">Cores:</span>
            <span class="detail-value"><%= cpuCount %></span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Load Avg:</span>
            <span class="detail-value" id="load-avg"><%= loadAverage.map(load => load.toFixed(2)).join(', ') %></span>
          </div>
        </div>
      </div>
      
      <div class="dashboard-card metric-card">
        <div class="metric-header">
          <h3><i class="fas fa-memory"></i> Memory Usage</h3>
        </div>
        <div class="metric-value">
          <div class="gauge-container" id="memory-gauge">
            <canvas id="memory-canvas" width="200" height="200"></canvas>
            <div class="gauge-value" id="memory-value">0%</div>
          </div>
        </div>
        <div class="metric-details">
          <div class="detail-item">
            <span class="detail-label">Total:</span>
            <span class="detail-value"><%= (totalMemory / (1024 * 1024 * 1024)).toFixed(2) %> GB</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Used:</span>
            <span class="detail-value" id="used-memory"><%= (usedMemory / (1024 * 1024 * 1024)).toFixed(2) %> GB</span>
          </div>
        </div>
      </div>
      
      <div class="dashboard-card metric-card">
        <div class="metric-header">
          <h3><i class="fas fa-clock"></i> Uptime</h3>
        </div>
        <div class="metric-value">
          <div class="uptime-display" id="uptime-display">
            <div class="uptime-value" id="uptime-days"><%= uptime.days %></div>
            <div class="uptime-label">Days</div>
          </div>
          <div class="uptime-time" id="uptime-time">
            <%= uptime.hours.toString().padStart(2, '0') %>:<%= uptime.minutes.toString().padStart(2, '0') %>:<%= uptime.seconds.toString().padStart(2, '0') %>
          </div>
        </div>
        <div class="metric-details">
          <div class="detail-item">
            <span class="detail-label">Started:</span>
            <span class="detail-value" id="start-time"><%= new Date(Date.now() - uptime.totalSeconds * 1000).toLocaleString() %></span>
          </div>
        </div>
      </div>
      
      <!-- Discord metrics -->
      <div class="dashboard-card discord-card">
        <div class="card-header">
          <h3><i class="fab fa-discord"></i> Discord Status</h3>
        </div>
        <div class="discord-metrics">
          <div class="discord-metric">
            <div class="metric-circle">
              <i class="fas fa-server"></i>
            </div>
            <div class="metric-info">
              <div class="metric-value" id="server-count"><%= client.guilds.cache.size %></div>
              <div class="metric-label">Servers</div>
            </div>
          </div>
          
          <div class="discord-metric">
            <div class="metric-circle">
              <i class="fas fa-users"></i>
            </div>
            <div class="metric-info">
              <div class="metric-value" id="user-count"><%= client.users.cache.size %></div>
              <div class="metric-label">Users</div>
            </div>
          </div>
          
          <div class="discord-metric">
            <div class="metric-circle">
              <i class="fas fa-comment-alt"></i>
            </div>
            <div class="metric-info">
              <div class="metric-value" id="channel-count"><%= client.channels.cache.size %></div>
              <div class="metric-label">Channels</div>
            </div>
          </div>
          
          <div class="discord-metric">
            <div class="metric-circle">
              <i class="fas fa-bolt"></i>
            </div>
            <div class="metric-info">
              <div class="metric-value" id="ping-value"><%= Math.round(client.ws.ping) %> ms</div>
              <div class="metric-label">Ping</div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- System info -->
      <div class="dashboard-card system-card">
        <div class="card-header">
          <h3><i class="fas fa-info-circle"></i> System Information</h3>
        </div>
        <div class="system-info">
          <div class="info-item">
            <span class="info-label">Platform:</span>
            <span class="info-value"><%= platform %> (<%= arch %>)</span>
          </div>
          <div class="info-item">
            <span class="info-label">Hostname:</span>
            <span class="info-value"><%= hostname %></span>
          </div>
          <div class="info-item">
            <span class="info-label">Node.js:</span>
            <span class="info-value" id="node-version"></span>
          </div>
          <div class="info-item">
            <span class="info-label">Discord.js:</span>
            <span class="info-value" id="discord-version"></span>
          </div>
        </div>
      </div>
      
      <!-- Command usage -->
      <div class="dashboard-card commands-card">
        <div class="card-header">
          <h3><i class="fas fa-terminal"></i> Command Usage</h3>
        </div>
        <div class="commands-chart-container">
          <canvas id="commands-chart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Three.js for background animation -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
<script src="/js/three-dashboard.js"></script>

<!-- Chart.js for data visualization -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Set up WebSocket connection for real-time updates
  const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
  const wsUrl = `${protocol}//${window.location.host}/ws`;
  let socket;
  
  // Connection status indicator
  let connectionLost = false;
  
  // Initialize gauges and charts
  initGauges();
  initCommandChart();
  
  // Connect to WebSocket
  connectWebSocket();
  
  function connectWebSocket() {
    socket = new WebSocket(wsUrl);
    
    // Handle WebSocket opening
    socket.onopen = () => {
      console.log('WebSocket connection established');
      if (connectionLost) {
        // Reconnection successful, update UI
        document.querySelector('.last-updated').classList.remove('disconnected');
        document.querySelector('.last-updated').innerHTML = '<i class="fas fa-sync-alt"></i> Live updates every 2 seconds';
        connectionLost = false;
      }
    };
    
    // Handle incoming messages
    socket.onmessage = (event) => {
      const data = JSON.parse(event.data);
      updateDashboard(data);
    };
    
    // Handle WebSocket closing
    socket.onclose = () => {
      console.log('WebSocket connection closed');
      if (!connectionLost) {
        // Show disconnected status
        document.querySelector('.last-updated').classList.add('disconnected');
        document.querySelector('.last-updated').innerHTML = '<i class="fas fa-exclamation-triangle"></i> Connection lost. Attempting to reconnect...';
        connectionLost = true;
      }
      
      // Try to reconnect after 5 seconds
      setTimeout(connectWebSocket, 5000);
    };
    
    // Handle WebSocket errors
    socket.onerror = (error) => {
      console.error('WebSocket error:', error);
    };
  }
  
  // Initialize gauge charts
  function initGauges() {
    // CPU gauge
    const cpuCanvas = document.getElementById('cpu-canvas');
    const cpuCtx = cpuCanvas.getContext('2d');
    drawGauge(cpuCtx, 0, '#9c4dff');
    
    // Memory gauge
    const memoryCanvas = document.getElementById('memory-canvas');
    const memoryCtx = memoryCanvas.getContext('2d');
    drawGauge(memoryCtx, 0, '#9c4dff');
  }
  
  // Draw gauge with given percentage
  function drawGauge(ctx, percentage, color) {
    const width = ctx.canvas.width;
    const height = ctx.canvas.height;
    const centerX = width / 2;
    const centerY = height / 2;
    const radius = Math.min(width, height) / 2 - 10;
    
    // Clear canvas
    ctx.clearRect(0, 0, width, height);
    
    // Draw background circle
    ctx.beginPath();
    ctx.arc(centerX, centerY, radius, Math.PI * 0.75, Math.PI * 2.25, false);
    ctx.lineWidth = 15;
    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
    ctx.stroke();
    
    // Calculate end angle based on percentage
    const endAngle = (percentage / 100) * Math.PI * 1.5 + Math.PI * 0.75;
    
    // Draw percentage arc
    ctx.beginPath();
    ctx.arc(centerX, centerY, radius, Math.PI * 0.75, endAngle, false);
    ctx.lineWidth = 15;
    
    // Create gradient
    const gradient = ctx.createLinearGradient(0, 0, width, 0);
    gradient.addColorStop(0, color);
    gradient.addColorStop(1, '#7c3acd');
    ctx.strokeStyle = gradient;
    ctx.lineCap = 'round';
    ctx.stroke();
    
    // Draw scale marks
    for (let i = 0; i <= 10; i++) {
      const angle = (i / 10) * Math.PI * 1.5 + Math.PI * 0.75;
      const startX = centerX + (radius - 20) * Math.cos(angle);
      const startY = centerY + (radius - 20) * Math.sin(angle);
      const endX = centerX + (radius + 5) * Math.cos(angle);
      const endY = centerY + (radius + 5) * Math.sin(angle);
      
      ctx.beginPath();
      ctx.moveTo(startX, startY);
      ctx.lineTo(endX, endY);
      ctx.lineWidth = i % 5 === 0 ? 3 : 1;
      ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
      ctx.stroke();
      
      // Add scale numbers for 0, 50, 100
      if (i % 5 === 0) {
        const textX = centerX + (radius - 35) * Math.cos(angle);
        const textY = centerY + (radius - 35) * Math.sin(angle);
        
        ctx.font = '12px Inter, sans-serif';
        ctx.fillStyle = 'rgba(255, 255, 255, 0.5)';
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(i * 10, textX, textY);
      }
    }
  }
  
  // Initialize command usage chart
  function initCommandChart() {
    const ctx = document.getElementById('commands-chart').getContext('2d');
    
    window.commandChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: [], // Will be populated with command names
        datasets: [{
          label: 'Command Usage',
          data: [], // Will be populated with command counts
          backgroundColor: [
            'rgba(156, 77, 255, 0.7)',
            'rgba(124, 58, 205, 0.7)',
            'rgba(183, 110, 255, 0.7)',
            'rgba(94, 44, 165, 0.7)',
            'rgba(209, 156, 255, 0.7)',
            'rgba(66, 31, 114, 0.7)'
          ],
          borderColor: [
            'rgba(156, 77, 255, 1)',
            'rgba(124, 58, 205, 1)',
            'rgba(183, 110, 255, 1)',
            'rgba(94, 44, 165, 1)',
            'rgba(209, 156, 255, 1)',
            'rgba(66, 31, 114, 1)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          },
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        }
      }
    });
  }
  
  // Update dashboard with new data
  function updateDashboard(data) {
    // Update CPU gauge and value
    const cpuCanvas = document.getElementById('cpu-canvas');
    const cpuCtx = cpuCanvas.getContext('2d');
    drawGauge(cpuCtx, data.cpu, '#9c4dff');
    document.getElementById('cpu-value').textContent = `${data.cpu}%`;
    
    // Update memory gauge and value
    const memoryCanvas = document.getElementById('memory-canvas');
    const memoryCtx = memoryCanvas.getContext('2d');
    drawGauge(memoryCtx, data.memory, '#9c4dff');
    document.getElementById('memory-value').textContent = `${data.memory}%`;
    
    // Update load average
    document.getElementById('load-avg').textContent = data.loadAverage ? 
      data.loadAverage.map(load => load.toFixed(2)).join(', ') : '0.00, 0.00, 0.00';
    
    // Update used memory
    const usedMemoryGB = (data.usedMemory / (1024 * 1024 * 1024)).toFixed(2);
    document.getElementById('used-memory').textContent = `${usedMemoryGB} GB`;
    
    // Update uptime
    const days = Math.floor(data.uptime / 86400);
    const hours = Math.floor((data.uptime % 86400) / 3600);
    const minutes = Math.floor((data.uptime % 3600) / 60);
    const seconds = Math.floor(data.uptime % 60);
    
    document.getElementById('uptime-days').textContent = days;
    document.getElementById('uptime-time').textContent = 
      `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    
    // Update Discord stats
    document.getElementById('server-count').textContent = data.servers;
    document.getElementById('user-count').textContent = data.users;
    document.getElementById('channel-count').textContent = data.channels || 0;
    document.getElementById('ping-value').textContent = `${data.ping} ms`;
    
    // Update system info
    document.getElementById('node-version').textContent = data.nodeVersion || 'N/A';
    document.getElementById('discord-version').textContent = data.discordVersion || 'N/A';
    
    // Update command usage chart
    if (data.commandUsage && window.commandChart) {
      const commands = Object.keys(data.commandUsage);
      const counts = Object.values(data.commandUsage);
      
      window.commandChart.data.labels = commands;
      window.commandChart.data.datasets[0].data = counts;
      window.commandChart.update();
    }
  }
});
</script>

<style>
/* Dashboard specific styles */
.dashboard-page {
  min-height: 100vh;
  padding: 2rem 0 4rem;
}

.dashboard-header {
  text-align: center;
  margin-bottom: 2rem;
}

.last-updated {
  color: var(--text-secondary);
  font-size: 0.9rem;
  margin-top: 0.5rem;
}

.last-updated.disconnected {
  color: #f04747;
}

.dashboard-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
  margin-top: 2rem;
  padding: 0 0.5rem;
}

.dashboard-card {
  background: rgba(30, 15, 50, 0.7);
  border-radius: var(--border-radius);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(156, 77, 255, 0.2);
  padding: 1.5rem 1.5rem 2rem;
  box-shadow: var(--card-shadow);
  display: flex;
  flex-direction: column;
}

.metric-card {
  grid-column: span 1;
  min-height: 330px;
}

.discord-card {
  grid-column: span 3;
}

.system-card {
  grid-column: span 2;
  grid-row: span 1;
}

.commands-card {
  grid-column: span 1;
  grid-row: span 1;
}

.metric-header h3,
.card-header h3 {
  font-size: 1.1rem;
  margin: 0;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--primary);
}

.metric-value {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 1.5rem 0 0.5rem;
  flex-grow: 1;
}

.gauge-container {
  position: relative;
  width: 200px;
  height: 200px;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: 10px;
}

.gauge-value {
  position: absolute;
  font-size: 2.2rem;
  font-weight: 700;
  text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

.uptime-display {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin-bottom: 0.5rem;
}

.uptime-value {
  font-size: 3rem;
  font-weight: 700;
  line-height: 1;
}

.uptime-label {
  font-size: 0.9rem;
  color: var(--text-secondary);
}

.uptime-time {
  font-size: 1.5rem;
  font-weight: 300;
  font-family: monospace;
  color: var(--primary);
}

.metric-details,
.system-info {
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  padding-top: 1rem;
  font-size: 0.9rem;
  margin-top: 10px;
  clear: both;
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
}

.detail-item,
.info-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 0.5rem;
  width: calc(50% - 0.5rem);
}

.detail-label,
.info-label {
  color: var(--text-secondary);
  font-weight: 500;
}

.detail-value,
.info-value {
  font-weight: 600;
  color: var(--text-primary);
}

.discord-metrics {
  display: flex;
  justify-content: space-around;
  padding: 1.5rem 0;
  flex-wrap: wrap;
  gap: 1.5rem;
}

.discord-metric {
  display: flex;
  align-items: center;
  gap: 1rem;
}

.metric-circle {
  width: 50px;
  height: 50px;
  border-radius: 50%;
  background: rgba(156, 77, 255, 0.2);
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.25rem;
  color: var(--primary);
}

.metric-info {
  display: flex;
  flex-direction: column;
}

.metric-info .metric-value {
  font-size: 1.5rem;
  font-weight: 700;
  padding: 0;
}

.metric-info .metric-label {
  font-size: 0.8rem;
  color: var(--text-secondary);
}

.commands-chart-container {
  height: 200px;
  width: 100%;
  margin-top: 1rem;
}

@media (max-width: 992px) {
  .dashboard-grid {
    grid-template-columns: 1fr 1fr;
  }
  
  .discord-card {
    grid-column: span 2;
  }
  
  .system-card {
    grid-column: span 2;
  }
  
  .commands-card {
    grid-column: span 2;
  }
}

@media (max-width: 768px) {
  .dashboard-grid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  .metric-card,
  .discord-card,
  .system-card,
  .commands-card {
    grid-column: span 1;
  }
  
  .discord-metrics {
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-between;
    gap: 1.5rem;
  }
  
  .discord-metric {
    width: calc(50% - 1rem);
    justify-content: flex-start;
  }
  
  .container {
    padding-left: 1rem;
    padding-right: 1rem;
  }
}

@media (max-width: 500px) {
  .dashboard-grid {
    gap: 1rem;
    padding: 0;
  }
  
  .dashboard-card {
    padding: 1rem 1rem 1.5rem;
  }
  
  .discord-metrics {
    flex-direction: column;
    align-items: flex-start;
  }
  
  .discord-metric {
    width: 100%;
  }
  
  .metric-card {
    min-height: 300px;
  }
  
  .gauge-container canvas {
    width: 180px;
    height: 180px;
  }
  
  .system-info {
    flex-direction: column;
  }
  
  .info-item {
    width: 100%;
  }
  
  .metric-circle {
    width: 45px;
    height: 45px;
    font-size: 1.1rem;
  }
}
</style>
