<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  
  <!-- Favicon -->
  <link rel="icon" href="/img/favicon.png" type="image/png">
  
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  
  <!-- Google Fonts -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
  
  <!-- Custom CSS -->
  <link rel="stylesheet" href="/css/styles.css">
  <link rel="stylesheet" href="/css/purple-theme.css">
  <link rel="stylesheet" href="/css/cursor.css">
</head>
<body class="demo-page">
  <!-- Custom Cursor -->
  <div class="cursor-dot"></div>
  <div class="cursor-outline"></div>
  
  <div id="demo-bg" class="background-container"></div>

  <div class="demo-content">
    <div class="demo-header">
      <h1>SWOOSH<span class="gradient-text">Bot</span></h1>
    </div>
    
    <div class="demo-main">
      <h2>Speed. Style. <span class="gradient-text">Vibe.</span></h2>
      <p>Welcome to Swoosh â€” your new world of Discord moderation, community engagement, and server management. Dive into our purple flow and feel the energy.</p>
      <div class="demo-actions">
        <a href="/" class="demo-btn primary-btn">
          <i class="fas fa-home"></i> Home
        </a>
        <a href="/team" class="demo-btn secondary-btn">
          <i class="fas fa-users"></i> Meet Our Team
        </a>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
  <script>
  document.addEventListener('DOMContentLoaded', function() {
    // Basic Three.js scene
    const container = document.getElementById('demo-bg');
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setClearColor(0x000000, 0); // Transparent background
    container.appendChild(renderer.domElement);

    // Create an array of particles
    const particleCount = 300;
    const particleGeometry = new THREE.BufferGeometry();
    const particleVertices = [];
    const particleSpeeds = [];
    
    for (let i = 0; i < particleCount; i++) {
      // Random position within a sphere
      const x = (Math.random() - 0.5) * 20;
      const y = (Math.random() - 0.5) * 20;
      const z = (Math.random() - 0.5) * 20 - 5; // Offset to place particles in front of camera
      
      particleVertices.push(x, y, z);
      particleSpeeds.push(Math.random() * 0.02 + 0.005); // Random speed for each particle
    }
    
    particleGeometry.setAttribute('position', new THREE.Float32BufferAttribute(particleVertices, 3));
    
    // Create purple gradient for particles
    const purpleColors = [0x9c4dff, 0xb168ff, 0xc58fff];
    const particleMaterials = purpleColors.map(color => 
      new THREE.PointsMaterial({ 
        color: color, 
        size: Math.random() * 0.1 + 0.05,
        transparent: true,
        opacity: 0.8,
        depthTest: false
      })
    );
    
    // Create multiple particle systems with different colors
    const particleSystems = [];
    for (let i = 0; i < 3; i++) {
      const particles = new THREE.Points(particleGeometry.clone(), particleMaterials[i]);
      scene.add(particles);
      particleSystems.push(particles);
    }

    camera.position.z = 5;

    // Animation loop
    const animate = function () {
      requestAnimationFrame(animate);
      
      // Update particle positions
      for (let s = 0; s < particleSystems.length; s++) {
        const positions = particleSystems[s].geometry.attributes.position.array;
        
        for (let i = 0; i < positions.length; i += 3) {
          // Move particles in a slight wave pattern
          positions[i+1] += Math.sin(Date.now() * 0.001 + positions[i]) * 0.01; // Y-axis wave
          positions[i] += Math.cos(Date.now() * 0.001 + positions[i+1]) * 0.01; // X-axis wave
          positions[i+2] += particleSpeeds[i/3]; // Move along Z-axis
          
          // Reset particle position if it goes too far
          if (positions[i+2] > 10) {
            positions[i+2] = -10;
          }
        }
        
        particleSystems[s].geometry.attributes.position.needsUpdate = true;
      }
      
      // Rotate the entire scene slightly for a dynamic effect
      scene.rotation.y = Math.sin(Date.now() * 0.0005) * 0.1;
      scene.rotation.x = Math.cos(Date.now() * 0.0005) * 0.1;
      
      renderer.render(scene, camera);
    };

    animate();

    // Responsive
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });
  });
  </script>

  <!-- Custom cursor JS -->
  <script src="/js/cursor.js"></script>
  
  <style>
  body.demo-page {
    overflow: hidden;
    margin: 0;
    padding: 0;
    height: 100vh;
    color: white;
    font-family: 'Inter', sans-serif;
    background: linear-gradient(135deg, #1a0b2e 0%, #12071f 100%);
  }
  
  .demo-header {
    position: absolute;
    top: 30px;
    left: 40px;
    z-index: 2;
  }
  
  .demo-header h1 {
    font-size: 2.5rem;
    color: white;
    letter-spacing: 2px;
    margin: 0;
    font-weight: 800;
  }
  
  .demo-main {
    position: absolute;
    bottom: 100px;
    left: 40px;
    z-index: 2;
    max-width: 500px;
  }
  
  .demo-main h2 {
    font-size: 3rem;
    margin-bottom: 15px;
    color: white;
    font-weight: 700;
  }
  
  .demo-main p {
    font-size: 1.1rem;
    line-height: 1.6;
    color: rgba(255,255,255,0.85);
    margin-bottom: 30px;
  }
  
  .demo-actions {
    display: flex;
    gap: 15px;
  }
  
  .demo-btn {
    display: inline-block;
    padding: 12px 25px;
    border-radius: 8px;
    color: white;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
  }
  
  .primary-btn {
    background: linear-gradient(135deg, #9c4dff 0%, #b168ff 100%);
    box-shadow: 0 0 15px rgba(156, 77, 255, 0.5);
  }
  
  .primary-btn:hover {
    box-shadow: 0 0 25px rgba(156, 77, 255, 0.7);
    transform: translateY(-2px);
  }
  
  .secondary-btn {
    background: rgba(255, 255, 255, 0.1);
    border: 1px solid rgba(156, 77, 255, 0.5);
  }
  
  .secondary-btn:hover {
    background: rgba(156, 77, 255, 0.2);
  }
  
  .gradient-text {
    background: linear-gradient(135deg, #9c4dff 0%, #d3a4ff 100%);
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  @media (max-width: 768px) {
    .demo-main {
      bottom: 60px;
      left: 20px;
      right: 20px;
      max-width: calc(100% - 40px);
    }
    
    .demo-main h2 {
      font-size: 2.2rem;
    }
    
    .demo-header {
      top: 20px;
      left: 20px;
    }
  }
  </style>
</body>
</html>