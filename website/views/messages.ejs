<div class="messages-container">
  <div class="container">
    <div class="page-header">
      <h1><i class="fas fa-envelope-open-text"></i> Message Manager</h1>
      <p>Create and send beautiful embed messages to your Discord servers</p>
    </div>

    <div class="row">
      <!-- Message Form -->
      <div class="col-md-7">
        <div class="card">
          <div class="card-header">
            <h3>Create Message</h3>
          </div>
          <div class="card-body">
            <form id="embed-form">
              <!-- Server and Channel Selection -->
              <div class="form-group">
                <label for="server-select">Server</label>
                <select class="form-control" id="server-select" required>
                  <option value="" selected disabled>Select a server</option>
                  <% if (locals.guilds && guilds.length > 0) { %>
                    <% guilds.forEach(guild => { %>
                      <option value="<%= guild.id %>"><%= guild.name %></option>
                    <% }); %>
                  <% } else { %>
                    <option value="" disabled>No servers available</option>
                  <% } %>
                </select>
              </div>

              <div class="form-group">
                <label for="channel-select">Channel</label>
                <select class="form-control" id="channel-select" required disabled>
                  <option value="" selected disabled>Select a server first</option>
                </select>
              </div>

              <!-- Title -->
              <div class="form-group">
                <label for="embed-title">Title</label>
                <input type="text" class="form-control" id="embed-title" placeholder="Message title">
              </div>

              <!-- Description -->
              <div class="form-group">
                <label for="embed-description">Description</label>
                <textarea class="form-control" id="embed-description" rows="4" placeholder="Message content (supports Discord markdown)"></textarea>
                <div class="markdown-hints">
                  <span class="markdown-hint">**bold**</span>
                  <span class="markdown-hint">*italic*</span>
                  <span class="markdown-hint">[link](url)</span>
                  <span class="markdown-hint"># heading</span>
                  <span class="markdown-hint">- list</span>
                </div>
              </div>

              <!-- Color Selection -->
              <div class="form-group">
                <label for="embed-color">Color</label>
                <div class="color-picker">
                  <input type="color" id="embed-color" value="#7289DA" class="form-control">
                  <div class="color-presets">
                    <div class="color-preset" data-color="#7289DA" style="background-color: #7289DA;"></div>
                    <div class="color-preset" data-color="#43B581" style="background-color: #43B581;"></div>
                    <div class="color-preset" data-color="#FAA61A" style="background-color: #FAA61A;"></div>
                    <div class="color-preset" data-color="#F04747" style="background-color: #F04747;"></div>
                    <div class="color-preset" data-color="#2F3136" style="background-color: #2F3136;"></div>
                  </div>
                </div>
              </div>

              <!-- Footer -->
              <div class="form-group">
                <label for="embed-footer">Footer Text</label>
                <input type="text" class="form-control" id="embed-footer" placeholder="Optional footer text">
              </div>

              <!-- Buttons -->
              <div class="form-buttons">
                <button type="button" id="preview-button" class="btn btn-secondary">
                  <i class="fas fa-eye"></i> Preview
                </button>
                <button type="submit" id="send-button" class="btn btn-primary">
                  <i class="fas fa-paper-plane"></i> Send
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>

      <!-- Preview Panel -->
      <div class="col-md-5">
        <div class="card">
          <div class="card-header">
            <h3>Preview</h3>
          </div>
          <div class="card-body">
            <div class="preview-wrapper">
              <div class="discord-message">
                <div class="discord-author">
                  <img src="/images/bot-icon.png" alt="Bot Avatar" class="discord-avatar">
                  <span class="discord-username">SWOOSH Bot</span>
                  <span class="discord-bot-tag">BOT</span>
                </div>
                
                <div class="discord-embed empty" id="embed-preview">
                  <div class="embed-color-pill" id="embed-color-pill"></div>
                  <div class="embed-content">
                    <div class="embed-title" id="preview-title">Your title will appear here</div>
                    <div class="embed-description" id="preview-description">Your description will appear here</div>
                    <div class="embed-footer" id="preview-footer">
                      <img src="/images/bot-icon.png" class="embed-footer-icon">
                      <span id="footer-text">SWOOSH Bot</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Toast notifications -->
<div class="toast-container">
  <!-- Toasts will be dynamically added here -->
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // DOM Elements
  const serverSelect = document.getElementById('server-select');
  const channelSelect = document.getElementById('channel-select');
  const embedForm = document.getElementById('embed-form');
  const embedTitle = document.getElementById('embed-title');
  const embedDescription = document.getElementById('embed-description');
  const embedColor = document.getElementById('embed-color');
  const embedFooter = document.getElementById('embed-footer');
  const previewButton = document.getElementById('preview-button');
  const sendButton = document.getElementById('send-button');
  
  // Preview Elements
  const embedPreview = document.getElementById('embed-preview');
  const previewTitle = document.getElementById('preview-title');
  const previewDescription = document.getElementById('preview-description');
  const previewFooter = document.getElementById('footer-text');
  const embedColorPill = document.getElementById('embed-color-pill');
  
  // Color Presets
  const colorPresets = document.querySelectorAll('.color-preset');
  
  // Load channels when server is selected
  serverSelect.addEventListener('change', function() {
    const serverId = this.value;
    if (serverId) {
      // Clear current options
      channelSelect.innerHTML = '<option value="" selected disabled>Loading channels...</option>';
      channelSelect.disabled = true;
      
      // Fetch channels for the selected server
      fetch(`/api/channels?serverId=${serverId}`)
        .then(response => response.json())
        .then(data => {
          channelSelect.innerHTML = '';
          
          if (data.channels && data.channels.length > 0) {
            data.channels.forEach(channel => {
              const option = document.createElement('option');
              option.value = channel.id;
              option.textContent = `#${channel.name}`;
              channelSelect.appendChild(option);
            });
            channelSelect.disabled = false;
          } else {
            channelSelect.innerHTML = '<option value="" selected disabled>No text channels available</option>';
          }
        })
        .catch(error => {
          console.error('Error fetching channels:', error);
          channelSelect.innerHTML = '<option value="" selected disabled>Error loading channels</option>';
          showToast('Error loading channels. Please try again.', 'error');
        });
    }
  });
  
  // Preview button functionality
  previewButton.addEventListener('click', updatePreview);
  
  // Live preview as user types
  embedTitle.addEventListener('input', updatePreview);
  embedDescription.addEventListener('input', updatePreview);
  embedColor.addEventListener('input', updatePreview);
  embedFooter.addEventListener('input', updatePreview);
  
  // Color preset selection
  colorPresets.forEach(preset => {
    preset.addEventListener('click', function() {
      const color = this.getAttribute('data-color');
      embedColor.value = color;
      updatePreview();
      
      // Show active state
      colorPresets.forEach(p => p.style.boxShadow = 'none');
      this.style.boxShadow = '0 0 0 2px white';
    });
  });
  
  // Form submission
  embedForm.addEventListener('submit', function(e) {
    e.preventDefault();
    
    if (!serverSelect.value || !channelSelect.value) {
      showToast('Please select a server and channel', 'warning');
      return;
    }
    
    // Prepare data for sending
    const embedData = {
      serverId: serverSelect.value,
      channelId: channelSelect.value,
      embed: {
        title: embedTitle.value,
        description: embedDescription.value,
        color: embedColor.value,
        footer: embedFooter.value
      }
    };
    
    // Disable submit button
    sendButton.disabled = true;
    sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Sending...';
    
    // Send embed to API
    fetch('/api/send-embed', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(embedData)
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        showToast('Message sent successfully!', 'success');
      } else {
        showToast(data.error || 'Failed to send message', 'error');
      }
    })
    .catch(error => {
      console.error('Error sending embed:', error);
      showToast('Error sending message. Please try again.', 'error');
    })
    .finally(() => {
      // Re-enable submit button
      sendButton.disabled = false;
      sendButton.innerHTML = '<i class="fas fa-paper-plane"></i> Send';
    });
  });
  
  // Update preview function
  function updatePreview() {
    const title = embedTitle.value;
    const description = embedDescription.value;
    const color = embedColor.value;
    const footer = embedFooter.value;
    
    // Update preview elements
    previewTitle.textContent = title || 'Your title will appear here';
    previewDescription.innerHTML = formatDiscordMarkdown(description) || 'Your description will appear here';
    embedColorPill.style.backgroundColor = color;
    previewFooter.textContent = footer || 'SWOOSH Bot';
    
    // Toggle empty class for styling
    if (title || description) {
      embedPreview.classList.remove('empty');
    } else {
      embedPreview.classList.add('empty');
    }
  }
  
  // Simple Discord markdown formatter
  function formatDiscordMarkdown(text) {
    if (!text) return '';
    
    // Bold
    text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
    
    // Italic
    text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
    
    // Code blocks
    text = text.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
    
    // Inline code
    text = text.replace(/`(.*?)`/g, '<code>$1</code>');
    
    // Links
    text = text.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');
    
    // Lists
    text = text.replace(/^\- (.*?)$/gm, '<li>$1</li>');
    text = text.replace(/<li>(.*?)<\/li>/g, '<ul><li>$1</li></ul>');
    
    // New lines
    text = text.replace(/\n/g, '<br>');
    
    return text;
  }
  
  // Toast notification function
  function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.className = `toast toast-${type}`;
    
    let icon = '';
    switch(type) {
      case 'success':
        icon = '<i class="fas fa-check-circle"></i>';
        break;
      case 'error':
        icon = '<i class="fas fa-exclamation-circle"></i>';
        break;
      case 'warning':
        icon = '<i class="fas fa-exclamation-triangle"></i>';
        break;
      default:
        icon = '<i class="fas fa-info-circle"></i>';
    }
    
    toast.innerHTML = `
      ${icon}
      <div class="toast-content">${message}</div>
      <button class="toast-close"><i class="fas fa-times"></i></button>
    `;
    
    const toastContainer = document.querySelector('.toast-container');
    toastContainer.appendChild(toast);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      toast.classList.add('toast-fade-out');
      setTimeout(() => {
        toast.remove();
      }, 300);
    }, 5000);
    
    // Close button functionality
    toast.querySelector('.toast-close').addEventListener('click', () => {
      toast.classList.add('toast-fade-out');
      setTimeout(() => {
        toast.remove();
      }, 300);
    });
  }
  
  // Initialize preview
  updatePreview();
});
</script>
