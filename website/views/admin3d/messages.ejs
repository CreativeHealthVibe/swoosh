<%# 
  SWOOSH Bot 3D Admin Dashboard
  Premium Edition
  
  Messages management page with news and embed sending
%>

<div class="admin3d-messages">
  <div class="dashboard-header">
    <h1 class="section-title">Message Management</h1>
  </div>
  
  <p class="section-description">
    Send news updates, announcements, and embed messages to your Discord servers.
  </p>
  
  <!-- Tabs Container -->
  <div class="tabs-container" id="message-tabs">
    <div class="admin3d-tabs">
      <button class="tab-btn" data-tab="send-news">
        <i class="fas fa-newspaper"></i> Send News
      </button>
      <button class="tab-btn" data-tab="send-embed">
        <i class="fas fa-comment-alt"></i> Send Embed
      </button>
      <button class="tab-btn" data-tab="send-dm">
        <i class="fas fa-envelope"></i> Send DM
      </button>
    </div>
    
    <!-- Fix for form interaction issues -->
    <style>
      /* Fix input interaction issues */
      .admin3d-form-input,
      .admin3d-form-textarea,
      .admin3d-form-select,
      .admin3d-btn {
        position: relative;
        z-index: 100 !important;
        pointer-events: auto !important;
      }
      
      /* Make sure forms are above the THREE.js canvas */
      #message-tabs .tab-content {
        position: relative;
        z-index: 50;
      }
      
      /* Ensure inputs can be interacted with */
      .admin3d-form-group {
        position: relative;
        z-index: 100;
      }
      
      /* Ensure THREE.js doesn't block */
      #three-container {
        pointer-events: none !important;
        z-index: -1 !important;
      }
    </style>
    
    <!-- Tab Content -->
    <div class="tab-content-container">
      <!-- Send News Tab -->
      <div id="send-news" class="tab-content">
        <div class="admin3d-card" data-premium="true">
          <div class="admin3d-card-header">
            <div>
              <div class="admin3d-card-icon">
                <i class="fas fa-newspaper"></i>
              </div>
            </div>
            <h3 class="admin3d-card-title">Send News Update</h3>
          </div>
          <div class="admin3d-card-content">
            <p class="admin3d-card-description">
              Send a news update to your server's configured news channel. Use <code>/setnews</code> command in Discord to set a news channel first.
            </p>
            
            <form action="/admin3d/messages/send-news" method="POST" id="newsSendForm" data-ajax="true" data-reset="true">
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="newsTitle">Title</label>
                <input class="admin3d-form-input" type="text" id="newsTitle" name="newsTitle" placeholder="Enter news title" required>
              </div>
              
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="newsContent">Content</label>
                <textarea class="admin3d-form-textarea" id="newsContent" name="newsContent" placeholder="Enter news content" required rows="5"></textarea>
                <span class="admin3d-form-hint">Markdown formatting supported</span>
              </div>
              
              <div class="admin3d-form-row">
                <div class="admin3d-form-group">
                  <label class="admin3d-form-label" for="newsColor">Color</label>
                  <input class="admin3d-form-input" type="color" id="newsColor" name="newsColor" value="#8936ff">
                </div>
                
                <div class="admin3d-form-group">
                  <label class="admin3d-form-label" for="newsImage">Image URL (Optional)</label>
                  <input class="admin3d-form-input" type="url" id="newsImage" name="newsImage" placeholder="https://example.com/image.png">
                  <span class="admin3d-form-hint">Direct link to an image</span>
                </div>
              </div>
              
              <div class="admin3d-form-actions">
                <button type="submit" class="admin3d-btn admin3d-btn-primary" id="sendNewsBtn">
                  <i class="fas fa-paper-plane"></i> Send News
                </button>
              </div>
            </form>
            
            <!-- Manual trigger button for form (in case form submit button doesn't work) -->
            <button onclick="document.getElementById('newsSendForm').dispatchEvent(new Event('submit'))" class="admin3d-btn admin3d-btn-secondary" style="margin-top: 10px; width: 100%;">
              Alternate Submit (Try this if Send News doesn't work)
            </button>
          </div>
        </div>
      </div>
      
      <!-- Send Embed Tab -->
      <div id="send-embed" class="tab-content">
        <div class="admin3d-card">
          <div class="admin3d-card-header">
            <div>
              <div class="admin3d-card-icon">
                <i class="fas fa-comment-alt"></i>
              </div>
            </div>
            <h3 class="admin3d-card-title">Send Embed Message</h3>
          </div>
          <div class="admin3d-card-content">
            <p class="admin3d-card-description">
              Send a rich embed message to any text channel in your servers.
            </p>
            
            <form action="/admin3d/messages/send-embed" method="POST" id="sendEmbedForm" data-ajax="true" data-reset="true">
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="channel">Channel</label>
                <select class="admin3d-form-select" id="channel" name="channel" required>
                  <option value="">Select a channel</option>
                  <% if (channels && channels.length > 0) { %>
                    <% 
                      // Group channels by guild
                      const channelsByGuild = {};
                      channels.forEach(channel => {
                        if (!channelsByGuild[channel.guild]) {
                          channelsByGuild[channel.guild] = [];
                        }
                        channelsByGuild[channel.guild].push(channel);
                      });
                    %>
                    <% Object.keys(channelsByGuild).sort().forEach(guild => { %>
                      <optgroup label="<%= guild %>">
                        <% channelsByGuild[guild].forEach(channel => { %>
                          <option value="<%= channel.id %>">#<%= channel.name %></option>
                        <% }); %>
                      </optgroup>
                    <% }); %>
                  <% } else { %>
                    <option disabled>No channels available</option>
                  <% } %>
                </select>
              </div>
              
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="title">Title</label>
                <input class="admin3d-form-input" type="text" id="title" name="title" placeholder="Enter embed title" required>
              </div>
              
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="description">Description</label>
                <textarea class="admin3d-form-textarea" id="description" name="description" placeholder="Enter embed description" required rows="5"></textarea>
                <span class="admin3d-form-hint">Markdown formatting supported</span>
              </div>
              
              <div class="admin3d-form-row">
                <div class="admin3d-form-group">
                  <label class="admin3d-form-label" for="color">Color</label>
                  <input class="admin3d-form-input" type="color" id="color" name="color" value="#8936ff">
                </div>
                
                <div class="admin3d-form-group">
                  <label class="admin3d-form-label" for="footer">Footer (Optional)</label>
                  <input class="admin3d-form-input" type="text" id="footer" name="footer" placeholder="Enter footer text">
                </div>
              </div>
              
              <div class="admin3d-form-actions">
                <button type="submit" class="admin3d-btn admin3d-btn-primary" id="sendEmbedBtn">
                  <i class="fas fa-paper-plane"></i> Send Embed
                </button>
              </div>
            </form>
            
            <!-- Manual trigger button for form (in case form submit button doesn't work) -->
            <button onclick="document.getElementById('sendEmbedForm').dispatchEvent(new Event('submit'))" class="admin3d-btn admin3d-btn-secondary" style="margin-top: 10px; width: 100%;">
              Alternate Submit (Try this if Send Embed doesn't work)
            </button>
          </div>
        </div>
        
        <!-- Live Preview -->
        <div class="admin3d-card" style="margin-top: 2rem;">
          <div class="admin3d-card-header">
            <h3 class="admin3d-card-title">Live Preview</h3>
          </div>
          <div class="admin3d-card-content">
            <div class="embed-preview">
              <div class="embed-preview-container">
                <div class="embed-preview-title" id="preview-title">Embed Title</div>
                <div class="embed-preview-description" id="preview-description">Your embed description will appear here.</div>
                <div class="embed-preview-footer" id="preview-footer">
                  <span id="preview-footer-text">Footer text</span>
                  <span class="embed-preview-timestamp">Today at <%= new Date().toLocaleTimeString() %></span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Send DM Tab -->
      <div id="send-dm" class="tab-content">
        <div class="admin3d-card">
          <div class="admin3d-card-header">
            <div>
              <div class="admin3d-card-icon">
                <i class="fas fa-envelope"></i>
              </div>
            </div>
            <h3 class="admin3d-card-title">Send Direct Message</h3>
          </div>
          <div class="admin3d-card-content">
            <p class="admin3d-card-description">
              Send a direct message to a user via the bot.
            </p>
            
            <form action="/admin3d/messages/send-dm" method="POST" id="sendDmForm" data-ajax="true" data-reset="true">
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="userId">User ID</label>
                <input class="admin3d-form-input" type="text" id="userId" name="userId" placeholder="Enter user ID" required>
                <span class="admin3d-form-hint">The Discord user ID of the recipient</span>
              </div>
              
              <div class="admin3d-form-group">
                <label class="admin3d-form-label" for="messageContent">Message</label>
                <textarea class="admin3d-form-textarea" id="messageContent" name="messageContent" placeholder="Enter message" required rows="5"></textarea>
                <span class="admin3d-form-hint">This message will be sent as a direct message from the bot</span>
              </div>
              
              <div class="admin3d-form-actions">
                <button type="submit" class="admin3d-btn admin3d-btn-primary" id="sendDmBtn">
                  <i class="fas fa-paper-plane"></i> Send DM
                </button>
              </div>
            </form>
            
            <!-- Manual trigger button for form (in case form submit button doesn't work) -->
            <button onclick="document.getElementById('sendDmForm').dispatchEvent(new Event('submit'))" class="admin3d-btn admin3d-btn-secondary" style="margin-top: 10px; width: 100%;">
              Alternate Submit (Try this if Send DM doesn't work)
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Recent Messages -->
  <h2 class="section-subtitle" style="margin-top: 3rem;">Recent Messages</h2>
  <div class="admin3d-card">
    <div class="admin3d-card-header">
      <h3 class="admin3d-card-title">Message History</h3>
    </div>
    <div class="admin3d-card-content">
      <div class="message-history">
        <div class="message-history-item">
          <div class="message-history-icon">
            <i class="fas fa-newspaper"></i>
          </div>
          <div class="message-history-content">
            <div class="message-history-title">News Update: Important Announcement</div>
            <div class="message-history-meta">
              <span class="message-history-channel">#announcements</span>
              <span class="message-history-time">Today at <%= new Date().toLocaleTimeString() %></span>
            </div>
          </div>
          <div class="message-history-actions">
            <button class="admin3d-btn admin3d-btn-secondary">
              <i class="fas fa-copy"></i>
            </button>
          </div>
        </div>
        
        <div class="message-history-item">
          <div class="message-history-icon">
            <i class="fas fa-comment-alt"></i>
          </div>
          <div class="message-history-content">
            <div class="message-history-title">Embed: Server Rules</div>
            <div class="message-history-meta">
              <span class="message-history-channel">#rules</span>
              <span class="message-history-time">Yesterday at 3:45 PM</span>
            </div>
          </div>
          <div class="message-history-actions">
            <button class="admin3d-btn admin3d-btn-secondary">
              <i class="fas fa-copy"></i>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Messages Page Styles */
  .admin3d-form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }
  
  .admin3d-form-actions {
    margin-top: 1.5rem;
    display: flex;
    justify-content: flex-end;
  }
  
  .admin3d-tabs {
    display: flex;
    overflow-x: auto;
    gap: 1rem;
    border-bottom: 1px solid rgba(49, 41, 95, 0.3);
    padding-bottom: 1rem;
    margin-bottom: 2rem;
  }
  
  .tab-btn {
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 1rem;
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 12px;
    cursor: pointer;
    transition: all var(--transition-fast);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    position: relative;
  }
  
  .tab-btn:hover {
    color: var(--text);
    background-color: var(--background-lighter);
  }
  
  .tab-btn.active {
    color: var(--text);
    background-color: var(--background-lighter);
  }
  
  .tab-btn.active::after {
    content: "";
    position: absolute;
    bottom: -1rem;
    left: 50%;
    transform: translateX(-50%);
    width: 30%;
    height: 3px;
    background: linear-gradient(90deg, var(--primary) 0%, transparent 100%);
    border-radius: 3px;
  }
  
  .tab-content-container {
    margin-top: 2rem;
  }
  
  .tab-content {
    display: none;
  }
  
  .tab-content.active {
    display: block;
    animation: fadeIn 0.5s ease;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Embed Preview */
  .embed-preview {
    background-color: #2f3136;
    border-radius: 12px;
    overflow: hidden;
    margin-top: 1rem;
  }
  
  .embed-preview-container {
    border-left: 4px solid var(--primary);
    padding: 0.5rem 1rem 1rem 0.75rem;
    margin: 0.5rem;
  }
  
  .embed-preview-title {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: white;
  }
  
  .embed-preview-description {
    font-size: 0.9375rem;
    margin-bottom: 0.75rem;
    color: #dcddde;
    white-space: pre-wrap;
  }
  
  .embed-preview-footer {
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 0.75rem;
    color: #72767d;
  }
  
  .embed-preview-timestamp {
    font-size: 0.75rem;
  }
  
  /* Message History */
  .message-history {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .message-history-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    border-radius: 12px;
    background-color: var(--background-lighter);
    border: 1px solid rgba(49, 41, 95, 0.3);
    transition: all var(--transition-fast);
  }
  
  .message-history-item:hover {
    border-color: var(--primary);
    box-shadow: 0 0 15px rgba(137, 54, 255, 0.1);
  }
  
  .message-history-icon {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    background-color: rgba(137, 54, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    color: var(--primary);
  }
  
  .message-history-content {
    flex: 1;
  }
  
  .message-history-title {
    font-size: 1rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }
  
  .message-history-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    font-size: 0.8125rem;
    color: var(--text-muted);
  }
  
  .message-history-channel {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .message-history-channel::before {
    content: "#";
    opacity: 0.7;
  }
  
  .message-history-actions {
    display: flex;
    gap: 0.5rem;
  }
  
  /* Responsive Styles */
  /* Loading Spinner */
  .loading-overlay {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(16, 16, 46, 0.8);
    z-index: 100;
    border-radius: 12px;
    backdrop-filter: blur(8px);
  }
  
  .spinner {
    font-size: 2rem;
    color: var(--primary);
    margin-bottom: 1rem;
    animation: spin 1.5s infinite linear;
  }
  
  .loading-text {
    font-size: 1rem;
    color: white;
    font-weight: 500;
  }
  
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }
  
  /* Premium Notification Styling */
  .admin3d-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    min-width: 300px;
    max-width: 400px;
    padding: 15px;
    border-radius: 8px;
    display: flex;
    align-items: center;
    gap: 15px;
    backdrop-filter: blur(10px);
    box-shadow: 0 10px 25px rgba(0,0,0,0.2);
    border: 1px solid rgba(255,255,255,0.1);
    z-index: 9999;
  }
  
  .admin3d-notification.success {
    background: rgba(0, 230, 118, 0.15);
    border-color: rgba(0, 230, 118, 0.3);
  }
  
  .admin3d-notification.error {
    background: rgba(255, 61, 113, 0.15);
    border-color: rgba(255, 61, 113, 0.3);
  }
  
  .admin3d-notification.warning {
    background: rgba(255, 179, 0, 0.15);
    border-color: rgba(255, 179, 0, 0.3);
  }
  
  .admin3d-notification.info {
    background: rgba(77, 159, 255, 0.15);
    border-color: rgba(77, 159, 255, 0.3);
  }
  
  .notification-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    flex-shrink: 0;
  }
  
  .admin3d-notification.success .notification-icon {
    color: #00e676;
    background: rgba(0, 230, 118, 0.15);
  }
  
  .admin3d-notification.error .notification-icon {
    color: #ff3d71;
    background: rgba(255, 61, 113, 0.15);
  }
  
  .admin3d-notification.warning .notification-icon {
    color: #ffb300;
    background: rgba(255, 179, 0, 0.15);
  }
  
  .admin3d-notification.info .notification-icon {
    color: #4d9fff;
    background: rgba(77, 159, 255, 0.15);
  }
  
  .notification-content {
    flex: 1;
  }
  
  .notification-content h4 {
    margin: 0 0 0.25rem 0;
    font-size: 1rem;
    font-weight: 600;
  }
  
  .notification-content p {
    margin: 0;
    font-size: 0.9rem;
    color: rgba(255, 255, 255, 0.7);
  }
  
  .notification-close {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.1);
    border: none;
    color: rgba(255, 255, 255, 0.7);
    font-size: 0.75rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .notification-close:hover {
    background: rgba(255, 255, 255, 0.2);
    color: white;
  }
  
  /* Media Queries */
  @media (max-width: 768px) {
    .admin3d-form-row {
      grid-template-columns: 1fr;
    }
    
    .admin3d-tabs {
      flex-wrap: wrap;
    }
    
    .tab-btn {
      flex: 1;
      min-width: 120px;
      justify-content: center;
      padding: 0.75rem 1rem;
    }
    
    .message-history-item {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .message-history-actions {
      align-self: flex-end;
      margin-top: 1rem;
    }
    
    .admin3d-notification {
      width: 90%;
      max-width: 90%;
      left: 5%;
      right: 5%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded - initializing tabs');
    
    // Check DOM structure
    console.log('DOM Structure check:');
    const tabButtons = document.querySelectorAll('.tab-btn');
    const tabContents = document.querySelectorAll('.tab-content');
    
    console.log('Found', tabButtons.length, 'tab buttons and', tabContents.length, 'tab contents');
    
    // Debug which tabs exist
    tabButtons.forEach(btn => {
      console.log('Tab button:', btn.getAttribute('data-tab'));
    });
    
    tabContents.forEach(content => {
      console.log('Tab content ID:', content.id);
    });
    
    // Initialize tabs - hide all content first
    tabContents.forEach(content => {
      content.style.display = 'none';
    });
    
    // Set default active tab
    if (tabButtons.length > 0) {
      // Remove any existing active classes (in case of browser caching)
      tabButtons.forEach(btn => btn.classList.remove('active'));
      tabContents.forEach(content => content.classList.remove('active'));
      
      // Activate the first tab
      tabButtons[0].classList.add('active');
      const activeTabId = tabButtons[0].getAttribute('data-tab');
      const activeTab = document.getElementById(activeTabId);
      
      if (activeTab) {
        activeTab.classList.add('active');
        activeTab.style.display = 'block';
        console.log('Activated tab:', activeTabId);
      } else {
        console.error('Could not find tab with id:', activeTabId);
      }
    }
    
    // Tab click event
    tabButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        
        console.log('Tab clicked:', this.getAttribute('data-tab'));
        
        // Remove active class from all tabs
        tabButtons.forEach(btn => btn.classList.remove('active'));
        tabContents.forEach(content => {
          content.classList.remove('active');
          content.style.display = 'none';
        });
        
        // Add active class to clicked tab
        this.classList.add('active');
        const tabId = this.getAttribute('data-tab');
        const targetTab = document.getElementById(tabId);
        
        if (targetTab) {
          targetTab.classList.add('active');
          targetTab.style.display = 'block';
        } else {
          console.error('Could not find tab with id:', tabId);
        }
      });
    });
    
    // Live embed preview
    const titleInput = document.getElementById('title');
    const descriptionInput = document.getElementById('description');
    const colorInput = document.getElementById('color');
    const footerInput = document.getElementById('footer');
    
    const previewTitle = document.getElementById('preview-title');
    const previewDescription = document.getElementById('preview-description');
    const previewFooter = document.getElementById('preview-footer-text');
    const previewContainer = document.querySelector('.embed-preview-container');
    
    // Update preview on input changes
    if (titleInput) {
      titleInput.addEventListener('input', function() {
        previewTitle.textContent = this.value || 'Embed Title';
      });
    }
    
    if (descriptionInput) {
      descriptionInput.addEventListener('input', function() {
        previewDescription.textContent = this.value || 'Your embed description will appear here.';
      });
    }
    
    if (colorInput) {
      colorInput.addEventListener('input', function() {
        previewContainer.style.borderLeftColor = this.value;
      });
    }
    
    if (footerInput) {
      footerInput.addEventListener('input', function() {
        previewFooter.textContent = this.value || 'Footer text';
      });
    }
    
    // AJAX form submission
    const ajaxForms = document.querySelectorAll('form[data-ajax="true"]');
    console.log('Found AJAX forms:', ajaxForms.length);
    
    // Debug which forms were found
    ajaxForms.forEach((form, index) => {
      console.log(`Form ${index + 1} ID:`, form.id || 'No ID', 'Action:', form.action);
    });
    
    // Attach submit handlers to each form
    ajaxForms.forEach(form => {
      console.log('Attaching submit handler to form:', form.action);
      
      form.addEventListener('submit', function(event) {
        console.log('Form submitted:', this.action);
        event.preventDefault();
        
        // Create loading overlay
        const loadingOverlay = document.createElement('div');
        loadingOverlay.className = 'loading-overlay';
        loadingOverlay.innerHTML = `
          <div class="spinner">
            <i class="fas fa-circle-notch fa-spin"></i>
          </div>
          <div class="loading-text">Processing...</div>
        `;
        
        // Style the overlay
        loadingOverlay.style.position = 'absolute';
        loadingOverlay.style.top = '0';
        loadingOverlay.style.left = '0';
        loadingOverlay.style.width = '100%';
        loadingOverlay.style.height = '100%';
        loadingOverlay.style.backgroundColor = 'rgba(16, 16, 46, 0.8)';
        loadingOverlay.style.display = 'flex';
        loadingOverlay.style.flexDirection = 'column';
        loadingOverlay.style.alignItems = 'center';
        loadingOverlay.style.justifyContent = 'center';
        loadingOverlay.style.zIndex = '100';
        loadingOverlay.style.borderRadius = '12px';
        loadingOverlay.style.backdropFilter = 'blur(8px)';
        
        // Position the parent relatively if not already
        if (getComputedStyle(this.parentElement).position !== 'relative') {
          this.parentElement.style.position = 'relative';
        }
        
        this.parentElement.appendChild(loadingOverlay);
        
        // Get form data
        const formData = new FormData(this);
        const data = {};
        formData.forEach((value, key) => {
          data[key] = value;
        });
        
        // Debug log
        console.log('Sending data to endpoint:', this.action);
        console.log('Form data:', data);
        
        // AJAX request
        fetch(this.action, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify(data),
          credentials: 'same-origin'
        })
        .then(response => response.json())
        .then(data => {
          // Remove loading overlay
          this.parentElement.removeChild(loadingOverlay);
          
          // Show notification
          showPremiumNotification(
            data.success ? 'success' : 'error',
            data.success ? 'Success!' : 'Error!',
            data.message,
            true
          );
          
          // Reset form if specified
          if (data.success && this.hasAttribute('data-reset')) {
            this.reset();
          }
          
          // Update embed preview if needed
          if (data.success && this.action.includes('send-embed') && titleInput) {
            titleInput.value = '';
            descriptionInput.value = '';
            footerInput.value = '';
            previewTitle.textContent = 'Embed Title';
            previewDescription.textContent = 'Your embed description will appear here.';
            previewFooter.textContent = 'Footer text';
          }
        })
        .catch(error => {
          // Remove loading overlay
          this.parentElement.removeChild(loadingOverlay);
          
          // Show error notification
          showPremiumNotification(
            'error',
            'Error!',
            'Failed to process your request: ' + error.message,
            true
          );
          console.error('AJAX Error:', error);
        });
      });
    });
    
    // Function to create a premium notification
    window.showPremiumNotification = function(type, title, message, autoHide = false) {
      // Create the notification container
      const notifDiv = document.createElement('div');
      notifDiv.className = `admin3d-notification ${type}`;
      
      // Set icon based on type
      let icon = 'info-circle';
      if (type === 'error') icon = 'exclamation-triangle';
      if (type === 'success') icon = 'check-circle';
      if (type === 'warning') icon = 'exclamation-circle';
      
      // Create the notification content
      notifDiv.innerHTML = `
        <div class="notification-icon">
          <i class="fas fa-${icon}"></i>
        </div>
        <div class="notification-content">
          <h4>${title}</h4>
          <p>${message}</p>
        </div>
        <button class="notification-close">
          <i class="fas fa-times"></i>
        </button>
      `;
      
      // Style the notification
      Object.assign(notifDiv.style, {
        position: 'fixed',
        top: '20px',
        right: '20px',
        zIndex: '9999',
        minWidth: '300px',
        maxWidth: '400px',
        padding: '15px',
        borderRadius: '8px',
        display: 'flex',
        alignItems: 'center',
        gap: '15px',
        backdropFilter: 'blur(10px)',
        boxShadow: '0 10px 25px rgba(0,0,0,0.2)',
        border: '1px solid rgba(255,255,255,0.1)',
        transform: 'translateY(-20px)',
        opacity: '0',
        transition: 'all 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55)'
      });
      
      // Set background based on type
      if (type === 'error') {
        notifDiv.style.background = 'rgba(255, 61, 113, 0.15)';
        notifDiv.style.borderColor = 'rgba(255, 61, 113, 0.3)';
      } else if (type === 'success') {
        notifDiv.style.background = 'rgba(0, 230, 118, 0.15)';
        notifDiv.style.borderColor = 'rgba(0, 230, 118, 0.3)';
      } else if (type === 'warning') {
        notifDiv.style.background = 'rgba(255, 179, 0, 0.15)';
        notifDiv.style.borderColor = 'rgba(255, 179, 0, 0.3)';
      } else {
        notifDiv.style.background = 'rgba(77, 159, 255, 0.15)';
        notifDiv.style.borderColor = 'rgba(77, 159, 255, 0.3)';
      }
      
      // Add to DOM
      document.body.appendChild(notifDiv);
      
      // Handle close button
      const closeBtn = notifDiv.querySelector('.notification-close');
      closeBtn.addEventListener('click', () => {
        notifDiv.style.opacity = '0';
        notifDiv.style.transform = 'translateY(-20px)';
        setTimeout(() => {
          document.body.removeChild(notifDiv);
        }, 300);
      });
      
      // Animate in
      setTimeout(() => {
        notifDiv.style.opacity = '1';
        notifDiv.style.transform = 'translateY(0)';
      }, 10);
      
      // Auto-hide if set
      if (autoHide) {
        setTimeout(() => {
          if (document.body.contains(notifDiv)) {
            notifDiv.style.opacity = '0';
            notifDiv.style.transform = 'translateY(-20px)';
            setTimeout(() => {
              if (document.body.contains(notifDiv)) {
                document.body.removeChild(notifDiv);
              }
            }, 300);
          }
        }, 5000);
      }
      
      return notifDiv;
    };
  });
</script>

<!-- Special Form Fix Script -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Fixing form input focus issues on Messages page...');
    
    // Completely disable THREE.js if present
    if (window.disposeThreeScene) {
      window.disposeThreeScene();
      console.log('THREE.js scene disposed for form compatibility');
    }
    
    // Apply special form fix styles
    const styleEl = document.createElement('style');
    styleEl.innerHTML = `
      #three-container {
        display: none !important;
        z-index: -9999 !important;
        pointer-events: none !important;
      }
      
      /* Ensure form elements work properly */
      input, textarea, select, button, .admin3d-form-group, .admin3d-form-input, 
      .admin3d-form-textarea, .admin3d-form-select, .admin3d-btn {
        position: relative !important;
        z-index: 9999 !important;
        pointer-events: auto !important; 
      }
      
      /* Make the form containers have proper stacking context */
      .admin3d-card-content, form, .tab-content {
        position: relative !important;
        z-index: 9998 !important;
      }
    `;
    document.head.appendChild(styleEl);
    
    // Fix any potential event capturing issues
    const fixInputs = function() {
      const inputs = document.querySelectorAll('input, textarea, select');
      inputs.forEach(input => {
        // Ensure events reach the form elements
        input.style.pointerEvents = 'auto';
        input.style.position = 'relative';
        input.style.zIndex = '9999';
        
        // Add direct event handlers
        input.addEventListener('click', function(e) {
          e.stopPropagation();
          this.focus();
        });
      });
      
      console.log('Form input fixes applied to', inputs.length, 'elements');
    };
    
    // Run immediately and after a delay to ensure everything is loaded
    fixInputs();
    setTimeout(fixInputs, 500);
  });
</script>