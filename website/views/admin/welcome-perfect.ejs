<!-- SWOOSH Bot Admin Dashboard - Perfect Welcome Page -->
<div class="admin-welcome-container">
  <!-- Welcome Header -->
  <div class="welcome-header">
    <div class="welcome-title">
      <h1><span class="greeting"><%= greeting %></span>, <span class="username"><%= user.username %></span>!</h1>
      <p class="subtitle">Welcome to the SWOOSH Bot dashboard</p>
    </div>
    <div class="date-time">
      <div class="date" id="current-date">
        <i class="fas fa-calendar-alt"></i>
        <span id="date-value">April 8, 2025</span>
      </div>
      <div class="time" id="current-time">
        <i class="fas fa-clock"></i>
        <span id="time-value">12:00:00</span>
      </div>
    </div>
  </div>

  <!-- Stats Cards -->
  <div class="stats-cards">
    <div class="stat-card servers">
      <div class="stat-icon">
        <i class="fas fa-server"></i>
      </div>
      <div class="stat-details">
        <h3>Servers</h3>
        <div class="stat-value" id="servers-count">0</div>
        <div class="stat-trend positive">
          <i class="fas fa-arrow-up"></i>
          <span>5.2% last 24h</span>
        </div>
      </div>
    </div>
    
    <div class="stat-card users">
      <div class="stat-icon">
        <i class="fas fa-users"></i>
      </div>
      <div class="stat-details">
        <h3>Users</h3>
        <div class="stat-value" id="users-count">0</div>
        <div class="stat-trend positive">
          <i class="fas fa-arrow-up"></i>
          <span>3.7% last 24h</span>
        </div>
      </div>
    </div>
    
    <div class="stat-card cpu">
      <div class="stat-icon">
        <i class="fas fa-microchip"></i>
      </div>
      <div class="stat-details">
        <h3>CPU Usage</h3>
        <div class="stat-value" id="cpu-usage">0%</div>
        <div class="progress-container">
          <div class="progress-bar" id="cpu-progress"></div>
        </div>
      </div>
    </div>
    
    <div class="stat-card memory">
      <div class="stat-icon">
        <i class="fas fa-memory"></i>
      </div>
      <div class="stat-details">
        <h3>Memory</h3>
        <div class="stat-value" id="memory-usage">0%</div>
        <div class="progress-container">
          <div class="progress-bar" id="memory-progress"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Dashboard Grid -->
  <div class="dashboard-grid">
    <!-- System Info Panel -->
    <div class="dashboard-panel system-info">
      <div class="panel-header">
        <h2><i class="fas fa-info-circle"></i> System Information</h2>
      </div>
      <div class="panel-content">
        <div class="info-item">
          <div class="info-label">Uptime</div>
          <div class="info-value" id="uptime-value">0h 0m 0s</div>
        </div>
        <div class="info-item">
          <div class="info-label">Node.js Version</div>
          <div class="info-value" id="node-version">-</div>
        </div>
        <div class="info-item">
          <div class="info-label">Discord.js Version</div>
          <div class="info-value" id="discord-version">-</div>
        </div>
        <div class="info-item">
          <div class="info-label">Operating System</div>
          <div class="info-value" id="os-value">-</div>
        </div>
        <div class="info-item">
          <div class="info-label">Channels</div>
          <div class="info-value" id="channels-count">0</div>
        </div>
        <div class="info-item">
          <div class="info-label">Commands</div>
          <div class="info-value" id="commands-count">0</div>
        </div>
      </div>
    </div>

    <!-- Command Usage Panel -->
    <div class="dashboard-panel command-usage">
      <div class="panel-header">
        <h2><i class="fas fa-terminal"></i> Command Usage</h2>
      </div>
      <div class="panel-content">
        <canvas id="command-chart"></canvas>
      </div>
    </div>

    <!-- Recent Activity Panel -->
    <div class="dashboard-panel recent-activity">
      <div class="panel-header">
        <h2><i class="fas fa-history"></i> Recent Activity</h2>
      </div>
      <div class="panel-content" id="activity-feed">
        <div class="activity-item info">
          <div class="activity-icon">
            <i class="fas fa-info-circle"></i>
          </div>
          <div class="activity-details">
            <div class="activity-message">Loading recent activity...</div>
            <div class="activity-time">just now</div>
          </div>
        </div>
      </div>
    </div>

    <!-- Quick Actions Panel -->
    <div class="dashboard-panel quick-actions">
      <div class="panel-header">
        <h2><i class="fas fa-bolt"></i> Quick Actions</h2>
      </div>
      <div class="panel-content">
        <div class="quick-action-grid">
          <a href="/admin/users" class="quick-action">
            <div class="action-icon">
              <i class="fas fa-user-cog"></i>
            </div>
            <div class="action-label">User Management</div>
          </a>
          <a href="/admin/logs" class="quick-action">
            <div class="action-icon">
              <i class="fas fa-list"></i>
            </div>
            <div class="action-label">Logs</div>
          </a>
          <a href="/admin/bounties" class="quick-action">
            <div class="action-icon">
              <i class="fas fa-coins"></i>
            </div>
            <div class="action-label">Bounties</div>
          </a>
          <a href="/admin/customization" class="quick-action">
            <div class="action-icon">
              <i class="fas fa-paint-brush"></i>
            </div>
            <div class="action-label">Customization</div>
          </a>
          <a href="/admin/settings" class="quick-action">
            <div class="action-icon">
              <i class="fas fa-cog"></i>
            </div>
            <div class="action-label">Settings</div>
          </a>
          <a href="/docs" class="quick-action">
            <div class="action-icon">
              <i class="fas fa-book"></i>
            </div>
            <div class="action-label">Documentation</div>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- WebSocket and Dashboard Scripts -->
<script>
  // Update date and time
  function updateDateTime() {
    const now = new Date();
    
    // Format date - April 8, 2025
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    document.getElementById('date-value').textContent = now.toLocaleDateString('en-US', options);
    
    // Format time - 12:34:56
    document.getElementById('time-value').textContent = now.toLocaleTimeString('en-US');
  }
  
  // Update uptime display
  function formatUptime(seconds) {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    return `${hours}h ${minutes}m ${secs}s`;
  }
  
  // Format large numbers with commas
  function formatNumber(num) {
    return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
  }
  
  // Create command usage chart
  let commandChart = null;
  
  function createCommandChart(data) {
    const ctx = document.getElementById('command-chart').getContext('2d');
    
    // Get the top 5 commands
    const commands = Object.keys(data).sort((a, b) => data[b] - data[a]).slice(0, 7);
    const counts = commands.map(cmd => data[cmd]);
    
    // Define gradients for bars
    const gradient = ctx.createLinearGradient(0, 0, 0, 400);
    gradient.addColorStop(0, 'rgba(156, 77, 255, 0.8)');
    gradient.addColorStop(1, 'rgba(65, 225, 255, 0.4)');
    
    // Create or update chart
    if (commandChart) {
      commandChart.data.labels = commands;
      commandChart.data.datasets[0].data = counts;
      commandChart.update();
    } else {
      commandChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: commands,
          datasets: [{
            label: 'Usage Count',
            data: counts,
            backgroundColor: gradient,
            borderColor: 'rgba(156, 77, 255, 1)',
            borderWidth: 1,
            borderRadius: 4,
            maxBarThickness: 40
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              backgroundColor: 'rgba(20, 20, 31, 0.95)',
              titleColor: '#fff',
              bodyColor: '#ccc',
              borderColor: 'rgba(156, 77, 255, 0.5)',
              borderWidth: 1,
              padding: 12,
              displayColors: false,
              callbacks: {
                title: function(tooltipItems) {
                  return tooltipItems[0].label + ' Command';
                },
                label: function(context) {
                  return 'Used ' + formatNumber(context.raw) + ' times';
                }
              }
            }
          },
          scales: {
            y: {
              beginAtZero: true,
              grid: {
                color: 'rgba(255, 255, 255, 0.05)'
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            },
            x: {
              grid: {
                display: false
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            }
          },
          animation: {
            duration: 1000
          }
        }
      });
    }
  }
  
  // Update activity feed
  function updateActivityFeed(activities) {
    const activityFeed = document.getElementById('activity-feed');
    activityFeed.innerHTML = '';
    
    activities.forEach(activity => {
      const activityItem = document.createElement('div');
      activityItem.className = `activity-item ${activity.type}`;
      
      activityItem.innerHTML = `
        <div class="activity-icon">
          <i class="fas fa-${activity.icon}"></i>
        </div>
        <div class="activity-details">
          <div class="activity-message">${activity.message}</div>
          <div class="activity-time">${activity.time}</div>
        </div>
      `;
      
      activityFeed.appendChild(activityItem);
    });
  }
  
  // Initialize WebSocket connection
  let socket = null;
  let pingInterval = null;
  
  function connect() {
    // Close existing connection if any
    if (socket) {
      socket.close();
      clearInterval(pingInterval);
    }
    
    // Determine WebSocket URL based on current location
    const protocol = window.location.protocol === 'https:' ? 'wss://' : 'ws://';
    const wsUrl = `${protocol}${window.location.host}`;
    
    // Create WebSocket connection
    socket = new WebSocket(wsUrl);
    
    // Connection opened
    socket.addEventListener('open', (event) => {
      console.log('Connected to WebSocket server');
      
      // Send ping every 30 seconds to keep connection alive
      pingInterval = setInterval(() => {
        socket.send(JSON.stringify({
          type: 'ping',
          timestamp: new Date().toISOString()
        }));
      }, 30000);
    });
    
    // Listen for messages
    socket.addEventListener('message', (event) => {
      console.log('WebSocket data received:', JSON.parse(event.data));
      const data = JSON.parse(event.data);
      
      if (data.type === 'welcome') {
        console.log(data.message);
      } else if (data.type === 'pong') {
        // Calculate latency
        const sentTime = new Date(data.timestamp).getTime();
        const receivedTime = new Date().getTime();
        console.log('Received pong from server, latency:', sentTime - receivedTime);
      } else if (data.type === 'stats') {
        updateDashboardStats(data);
      }
    });
    
    // Connection closed
    socket.addEventListener('close', (event) => {
      console.log('WebSocket connection closed');
      clearInterval(pingInterval);
      
      // Try to reconnect after 5 seconds
      setTimeout(connect, 5000);
    });
    
    // Connection error
    socket.addEventListener('error', (event) => {
      console.error('WebSocket error:', event);
      socket.close();
    });
  }
  
  // Update dashboard with received stats
  function updateDashboardStats(data) {
    // Update servers count with animation
    animateValue('servers-count', parseInt(document.getElementById('servers-count').textContent.replace(/,/g, '')), data.servers, 1000);
    
    // Update users count with animation
    animateValue('users-count', parseInt(document.getElementById('users-count').textContent.replace(/,/g, '')), data.users, 1000);
    
    // Update CPU usage
    document.getElementById('cpu-usage').textContent = `${data.cpu}%`;
    document.getElementById('cpu-progress').style.width = `${data.cpu}%`;
    
    // Update memory usage
    document.getElementById('memory-usage').textContent = `${data.memory}%`;
    document.getElementById('memory-progress').style.width = `${data.memory}%`;
    
    // Update system info
    document.getElementById('uptime-value').textContent = formatUptime(data.uptime);
    document.getElementById('node-version').textContent = data.nodeVersion;
    document.getElementById('discord-version').textContent = data.discordVersion;
    document.getElementById('os-value').textContent = data.os;
    document.getElementById('channels-count').textContent = formatNumber(data.channels);
    document.getElementById('commands-count').textContent = data.commands;
    
    // Update command usage chart
    if (data.commandUsage) {
      createCommandChart(data.commandUsage);
    }
    
    // Update activity feed
    if (data.recentActivity) {
      updateActivityFeed(data.recentActivity);
    }
    
    // Set progress bar colors based on value
    setProgressColors();
  }
  
  // Set progress bar colors based on value
  function setProgressColors() {
    const cpuValue = parseInt(document.getElementById('cpu-usage').textContent);
    const memoryValue = parseInt(document.getElementById('memory-usage').textContent);
    
    // CPU progress bar color
    const cpuBar = document.getElementById('cpu-progress');
    if (cpuValue < 50) {
      cpuBar.style.backgroundColor = 'var(--color-positive)';
    } else if (cpuValue < 80) {
      cpuBar.style.backgroundColor = 'var(--color-warning)';
    } else {
      cpuBar.style.backgroundColor = 'var(--color-negative)';
    }
    
    // Memory progress bar color
    const memoryBar = document.getElementById('memory-progress');
    if (memoryValue < 50) {
      memoryBar.style.backgroundColor = 'var(--color-positive)';
    } else if (memoryValue < 80) {
      memoryBar.style.backgroundColor = 'var(--color-warning)';
    } else {
      memoryBar.style.backgroundColor = 'var(--color-negative)';
    }
  }
  
  // Animate value counting up
  function animateValue(id, start, end, duration) {
    // No animation needed if values are the same
    if (start === end) return;
    
    const element = document.getElementById(id);
    const range = end - start;
    const increment = end > start ? 1 : -1;
    const stepTime = Math.abs(Math.floor(duration / range));
    
    let current = start;
    const timer = setInterval(() => {
      current += increment;
      element.textContent = formatNumber(current);
      
      if (current === end) {
        clearInterval(timer);
      }
    }, stepTime);
  }
  
  // Load scripts dynamically
  function loadScript(url) {
    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.src = url;
      script.onload = resolve;
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }
  
  // Initialize the dashboard
  async function initDashboard() {
    try {
      // Load Chart.js
      await loadScript('https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js');
      
      // Initialize dashboard
      updateDateTime();
      setInterval(updateDateTime, 1000);
      
      // Connect to WebSocket
      connect();
      
      // Initialize stats with 0
      document.getElementById('servers-count').textContent = "0";
      document.getElementById('users-count').textContent = "0";
      document.getElementById('cpu-usage').textContent = "0%";
      document.getElementById('memory-usage').textContent = "0%";
    } catch (error) {
      console.error('Failed to initialize dashboard:', error);
    }
  }
  
  // Start initialization when DOM is ready
  document.addEventListener('DOMContentLoaded', initDashboard);
</script>

<style>
  /* Welcome Page Specific Styles */
  .admin-welcome-container {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  /* Welcome Header */
  .welcome-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 0.5rem;
  }
  
  .welcome-title h1 {
    font-size: 2.2rem;
    font-weight: 700;
    margin: 0;
    color: var(--text-primary);
    line-height: 1.2;
    background: var(--gradient-primary);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .welcome-title .subtitle {
    font-size: 1.1rem;
    color: var(--text-secondary);
    margin: 0.25rem 0 0;
  }
  
  .date-time {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    font-size: 0.95rem;
    color: var(--text-secondary);
  }
  
  .date, .time {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: var(--background-light);
    padding: 0.5rem 1rem;
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-light);
  }
  
  .date i, .time i {
    color: var(--primary-color);
  }
  
  /* Stats Cards */
  .stats-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }
  
  .stat-card {
    display: flex;
    background: var(--background-light);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-medium);
    border: 1px solid rgba(255, 255, 255, 0.05);
    padding: 1.25rem;
    transition: all 0.3s ease;
    overflow: hidden;
    position: relative;
  }
  
  .stat-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-large);
  }
  
  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(156, 77, 255, 0.05) 0%, rgba(65, 225, 255, 0.05) 100%);
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .stat-card:hover::before {
    opacity: 1;
  }
  
  .stat-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 48px;
    height: 48px;
    background: var(--primary-color);
    border-radius: 50%;
    margin-right: 1rem;
    font-size: 1.4rem;
    color: var(--text-on-primary);
    transition: all 0.3s ease;
    box-shadow: 0 0 15px rgba(156, 77, 255, 0.5);
  }
  
  .stat-card:hover .stat-icon {
    transform: rotate(15deg);
    box-shadow: 0 0 25px rgba(156, 77, 255, 0.8);
  }
  
  .stat-details {
    flex: 1;
  }
  
  .stat-details h3 {
    font-size: 1rem;
    color: var(--text-secondary);
    margin: 0 0 0.5rem;
  }
  
  .stat-value {
    font-size: 2rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    line-height: 1;
  }
  
  .stat-trend {
    font-size: 0.8rem;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }
  
  .stat-trend.positive {
    color: var(--color-positive);
  }
  
  .stat-trend.negative {
    color: var(--color-negative);
  }
  
  .progress-container {
    width: 100%;
    height: 4px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
    overflow: hidden;
    margin-top: 0.5rem;
  }
  
  .progress-bar {
    height: 100%;
    background: var(--primary-color);
    transition: width 0.5s ease, background-color 0.5s ease;
    border-radius: 2px;
  }
  
  /* Dashboard Grid */
  .dashboard-grid {
    display: grid;
    grid-template-columns: repeat(12, 1fr);
    gap: 1.25rem;
  }
  
  .dashboard-panel {
    background: var(--background-light);
    border-radius: var(--border-radius);
    box-shadow: var(--shadow-medium);
    border: 1px solid rgba(255, 255, 255, 0.05);
    display: flex;
    flex-direction: column;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .dashboard-panel:hover {
    box-shadow: var(--shadow-large);
    border-color: rgba(156, 77, 255, 0.2);
  }
  
  .system-info {
    grid-column: span 4;
  }
  
  .command-usage {
    grid-column: span 8;
  }
  
  .recent-activity {
    grid-column: span 6;
  }
  
  .quick-actions {
    grid-column: span 6;
  }
  
  .panel-header {
    padding: 1rem 1.25rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    background: rgba(255, 255, 255, 0.02);
  }
  
  .panel-header h2 {
    font-size: 1.25rem;
    margin: 0;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .panel-header h2 i {
    color: var(--primary-color);
  }
  
  .panel-content {
    padding: 1.25rem;
    flex: 1;
    overflow: auto;
    min-height: 350px;
    max-height: 350px;
  }
  
  /* System Info Panel */
  .info-item {
    display: flex;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
  }
  
  .info-item:last-child {
    border-bottom: none;
  }
  
  .info-label {
    flex: 1;
    color: var(--text-secondary);
    font-size: 0.95rem;
  }
  
  .info-value {
    font-weight: 600;
    color: var(--text-primary);
  }
  
  /* Command Chart Panel */
  #command-chart {
    width: 100%;
    height: 300px;
  }
  
  /* Activity Feed Panel */
  .activity-item {
    display: flex;
    align-items: flex-start;
    padding: 0.75rem 0;
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    animation: fadeIn 0.5s ease;
  }
  
  .activity-item:last-child {
    border-bottom: none;
  }
  
  .activity-icon {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    margin-right: 1rem;
    font-size: 0.9rem;
  }
  
  .activity-item.info .activity-icon {
    background: rgba(65, 225, 255, 0.1);
    color: var(--color-info);
  }
  
  .activity-item.green .activity-icon {
    background: rgba(46, 213, 115, 0.1);
    color: var(--color-positive);
  }
  
  .activity-item.amber .activity-icon {
    background: rgba(255, 192, 0, 0.1);
    color: var(--color-warning);
  }
  
  .activity-item.red .activity-icon {
    background: rgba(255, 77, 77, 0.1);
    color: var(--color-negative);
  }
  
  .activity-details {
    flex: 1;
  }
  
  .activity-message {
    color: var(--text-primary);
    margin-bottom: 0.25rem;
    font-size: 0.95rem;
  }
  
  .activity-time {
    color: var(--text-secondary);
    font-size: 0.8rem;
  }
  
  /* Quick Actions Panel */
  .quick-action-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
    gap: 1rem;
  }
  
  .quick-action {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    padding: 1.25rem 1rem;
    background: rgba(255, 255, 255, 0.02);
    border-radius: var(--border-radius);
    transition: all 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.05);
    text-decoration: none;
  }
  
  .quick-action:hover {
    background: rgba(156, 77, 255, 0.1);
    transform: translateY(-3px);
    border-color: rgba(156, 77, 255, 0.3);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }
  
  .action-icon {
    font-size: 1.5rem;
    margin-bottom: 0.75rem;
    color: var(--primary-color);
    transition: all 0.3s ease;
  }
  
  .quick-action:hover .action-icon {
    transform: scale(1.2);
    color: var(--accent-color);
  }
  
  .action-label {
    color: var(--text-primary);
    font-size: 0.9rem;
  }
  
  /* Responsive adjustments */
  @media (max-width: 1200px) {
    .dashboard-grid {
      grid-template-columns: repeat(6, 1fr);
    }
    
    .system-info, 
    .command-usage, 
    .recent-activity, 
    .quick-actions {
      grid-column: span 6;
    }
  }
  
  @media (max-width: 768px) {
    .welcome-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .date-time {
      width: 100%;
      flex-direction: row;
      margin-top: 0.5rem;
    }
    
    .stats-cards {
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    }
    
    .system-info, 
    .command-usage, 
    .recent-activity, 
    .quick-actions {
      grid-column: span 6;
    }
    
    .panel-content {
      min-height: 250px;
      max-height: 250px;
    }
  }
  
  @media (max-width: 576px) {
    .stats-cards {
      grid-template-columns: 1fr;
    }
    
    .dashboard-grid {
      grid-template-columns: 1fr;
    }
    
    .system-info, 
    .command-usage, 
    .recent-activity, 
    .quick-actions {
      grid-column: span 1;
    }
    
    .welcome-title h1 {
      font-size: 1.8rem;
    }
    
    .welcome-title .subtitle {
      font-size: 1rem;
    }
    
    .quick-action-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  /* Animations */
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
</style>