<!-- Log Viewer Page -->
<div class="container-fluid py-4">
  <div class="row mb-4">
    <div class="col-12">
      <div class="card shadow-sm border-0">
        <div class="card-body p-4">
          <div class="d-flex align-items-center">
            <div>
              <h2 class="mb-0"><i class="fas fa-file-alt me-2"></i> Viewing Log: <%= filename %></h2>
              <p class="text-muted mb-0">Log file contents</p>
            </div>
            <div class="ms-auto">
              <a href="/admin/logs" class="btn btn-outline-primary me-2">
                <i class="fas fa-arrow-left me-2"></i> Back to Logs
              </a>
              <a href="/api/logs/download/<%= filename %>" class="btn btn-success">
                <i class="fas fa-download me-2"></i> Download Log
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Log Content -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card shadow-sm border-0">
        <div class="card-header bg-light">
          <div class="d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Log Content</h5>
            <div class="form-check form-switch">
              <input class="form-check-input" type="checkbox" id="autoScroll" checked>
              <label class="form-check-label" for="autoScroll">Auto-scroll to bottom</label>
            </div>
          </div>
        </div>
        <div class="card-body p-3">
          <div class="mb-3">
            <input type="text" id="searchLog" class="form-control" placeholder="Search in log content...">
          </div>
          <div id="logContentWrapper" style="max-height: 600px; overflow-y: auto; background-color: #f8f9fa; border-radius: 5px;">
            <pre id="logContent" class="p-3 mb-0" style="white-space: pre-wrap; font-family: monospace; font-size: 0.85rem;"><%= logContent %></pre>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Log Analysis Tools -->
  <div class="row">
    <div class="col-md-6 mb-4">
      <div class="card shadow-sm border-0 h-100">
        <div class="card-header bg-light">
          <h5 class="mb-0">Filter Options</h5>
        </div>
        <div class="card-body">
          <div class="mb-3">
            <label class="form-label">Log Level</label>
            <div class="d-flex flex-wrap gap-2">
              <button class="btn btn-sm btn-outline-danger filter-button" data-filter="error">Errors</button>
              <button class="btn btn-sm btn-outline-warning filter-button" data-filter="warn">Warnings</button>
              <button class="btn btn-sm btn-outline-info filter-button" data-filter="info">Info</button>
              <button class="btn btn-sm btn-outline-success filter-button" data-filter="command">Commands</button>
              <button class="btn btn-sm btn-outline-secondary filter-button" data-filter="all">Show All</button>
            </div>
          </div>
          
          <div class="mb-3">
            <label class="form-label">Date Range</label>
            <div class="row">
              <div class="col-md-6 mb-2">
                <input type="date" id="startDate" class="form-control form-control-sm">
              </div>
              <div class="col-md-6 mb-2">
                <input type="date" id="endDate" class="form-control form-control-sm">
              </div>
            </div>
          </div>
          
          <button id="applyFilters" class="btn btn-primary">Apply Filters</button>
          <button id="resetFilters" class="btn btn-outline-secondary ms-2">Reset</button>
        </div>
      </div>
    </div>
    
    <div class="col-md-6 mb-4">
      <div class="card shadow-sm border-0 h-100">
        <div class="card-header bg-light">
          <h5 class="mb-0">Log Statistics</h5>
        </div>
        <div class="card-body">
          <ul class="list-group list-group-flush" id="logStats">
            <li class="list-group-item d-flex justify-content-between align-items-center px-0">
              <div><i class="fas fa-file-alt me-2 text-primary"></i> Total Lines</div>
              <span class="badge bg-primary rounded-pill" id="totalLines">0</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center px-0">
              <div><i class="fas fa-exclamation-circle me-2 text-danger"></i> Errors</div>
              <span class="badge bg-danger rounded-pill" id="errorCount">0</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center px-0">
              <div><i class="fas fa-exclamation-triangle me-2 text-warning"></i> Warnings</div>
              <span class="badge bg-warning rounded-pill" id="warningCount">0</span>
            </li>
            <li class="list-group-item d-flex justify-content-between align-items-center px-0">
              <div><i class="fas fa-terminal me-2 text-success"></i> Commands</div>
              <span class="badge bg-success rounded-pill" id="commandCount">0</span>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const logContentWrapper = document.getElementById('logContentWrapper');
    const logContent = document.getElementById('logContent');
    const autoScrollCheckbox = document.getElementById('autoScroll');
    const searchLogInput = document.getElementById('searchLog');
    const filterButtons = document.querySelectorAll('.filter-button');
    const applyFiltersButton = document.getElementById('applyFilters');
    const resetFiltersButton = document.getElementById('resetFilters');
    
    // Original log content
    const originalLogContent = logContent.textContent;
    
    // Calculate statistics
    updateLogStatistics(originalLogContent);
    
    // Auto-scroll to bottom
    if (autoScrollCheckbox.checked) {
      logContentWrapper.scrollTop = logContentWrapper.scrollHeight;
    }
    
    autoScrollCheckbox.addEventListener('change', function() {
      if (this.checked) {
        logContentWrapper.scrollTop = logContentWrapper.scrollHeight;
      }
    });
    
    // Search functionality
    searchLogInput.addEventListener('input', function() {
      const searchTerm = this.value.trim().toLowerCase();
      
      if (!searchTerm) {
        // Reset to original content if search is cleared
        logContent.innerHTML = originalLogContent;
        updateLogStatistics(originalLogContent);
        return;
      }
      
      // Split log content by lines
      const lines = originalLogContent.split('\n');
      let filteredContent = '';
      let highlightedLine = '';
      
      lines.forEach(line => {
        if (line.toLowerCase().includes(searchTerm)) {
          // Highlight the search term
          highlightedLine = line.replace(
            new RegExp(searchTerm, 'gi'),
            match => `<span class="bg-warning">${match}</span>`
          );
          filteredContent += highlightedLine + '\n';
        }
      });
      
      logContent.innerHTML = filteredContent || 'No matches found';
      updateLogStatistics(filteredContent);
      
      if (autoScrollCheckbox.checked) {
        logContentWrapper.scrollTop = logContentWrapper.scrollHeight;
      }
    });
    
    // Filter buttons
    filterButtons.forEach(button => {
      button.addEventListener('click', function() {
        const filter = this.getAttribute('data-filter');
        
        // Highlight active filter button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        this.classList.add('active');
        
        if (filter === 'all') {
          logContent.innerHTML = originalLogContent;
          updateLogStatistics(originalLogContent);
          return;
        }
        
        // Apply filter
        const lines = originalLogContent.split('\n');
        let filteredContent = '';
        
        lines.forEach(line => {
          const lowerLine = line.toLowerCase();
          
          if (filter === 'error' && (lowerLine.includes('error') || lowerLine.includes('exception'))) {
            filteredContent += line + '\n';
          } else if (filter === 'warn' && lowerLine.includes('warn')) {
            filteredContent += line + '\n';
          } else if (filter === 'info' && lowerLine.includes('info')) {
            filteredContent += line + '\n';
          } else if (filter === 'command' && (lowerLine.includes('command') || lowerLine.includes('cmd'))) {
            filteredContent += line + '\n';
          }
        });
        
        logContent.innerHTML = filteredContent || 'No matches found for this filter';
        updateLogStatistics(filteredContent);
        
        if (autoScrollCheckbox.checked) {
          logContentWrapper.scrollTop = logContentWrapper.scrollHeight;
        }
      });
    });
    
    // Apply date filters
    applyFiltersButton.addEventListener('click', function() {
      const startDate = document.getElementById('startDate').value;
      const endDate = document.getElementById('endDate').value;
      
      if (!startDate && !endDate) {
        return;
      }
      
      const lines = originalLogContent.split('\n');
      let filteredContent = '';
      
      lines.forEach(line => {
        // Extract date from log line (assuming format like "2023-04-06T12:34:56")
        const dateMatch = line.match(/\d{4}-\d{2}-\d{2}/);
        
        if (dateMatch) {
          const lineDate = dateMatch[0];
          
          if ((!startDate || lineDate >= startDate) && (!endDate || lineDate <= endDate)) {
            filteredContent += line + '\n';
          }
        }
      });
      
      logContent.innerHTML = filteredContent || 'No logs found in the selected date range';
      updateLogStatistics(filteredContent);
      
      if (autoScrollCheckbox.checked) {
        logContentWrapper.scrollTop = logContentWrapper.scrollHeight;
      }
    });
    
    // Reset filters
    resetFiltersButton.addEventListener('click', function() {
      document.getElementById('startDate').value = '';
      document.getElementById('endDate').value = '';
      searchLogInput.value = '';
      
      filterButtons.forEach(btn => btn.classList.remove('active'));
      
      logContent.innerHTML = originalLogContent;
      updateLogStatistics(originalLogContent);
      
      if (autoScrollCheckbox.checked) {
        logContentWrapper.scrollTop = logContentWrapper.scrollHeight;
      }
    });
    
    // Update log statistics
    function updateLogStatistics(content) {
      const lines = content.split('\n');
      const totalLines = lines.length;
      
      let errorCount = 0;
      let warningCount = 0;
      let commandCount = 0;
      
      lines.forEach(line => {
        const lowerLine = line.toLowerCase();
        
        if (lowerLine.includes('error') || lowerLine.includes('exception')) {
          errorCount++;
        }
        
        if (lowerLine.includes('warn')) {
          warningCount++;
        }
        
        if (lowerLine.includes('command') || lowerLine.includes('cmd')) {
          commandCount++;
        }
      });
      
      document.getElementById('totalLines').textContent = totalLines;
      document.getElementById('errorCount').textContent = errorCount;
      document.getElementById('warningCount').textContent = warningCount;
      document.getElementById('commandCount').textContent = commandCount;
    }
  });
</script>
