<!-- Enhanced SWOOSH Admin Welcome Page -->
<div class="dashboard-container">
  <!-- Welcome Section -->
  <div class="welcome-section">
    <div class="card card-glow">
      <div class="card-header">
        <div class="welcome-user">
          <% if (typeof user !== 'undefined' && user && user.avatar) { %>
            <img src="<%= user.avatar %>" alt="<%= user.username %>'s Avatar" class="welcome-avatar">
          <% } else if (typeof user !== 'undefined' && user && user.username) { %>
            <div class="welcome-avatar-placeholder"><%= user.username.charAt(0).toUpperCase() %></div>
          <% } else { %>
            <div class="welcome-avatar-placeholder">G</div>
          <% } %>
          
          <div class="welcome-text">
            <h1 class="gradient-text-blend"><%= greeting %>, <span><%= typeof user !== 'undefined' && user ? user.username || 'Guest' : 'Guest' %></span></h1>
            <p>Welcome to your SWOOSH Bot administration dashboard</p>
          </div>
        </div>
        
        <div class="connection-status">
          <span class="status-indicator" id="status-badge">Connecting...</span>
          <span class="status-text" id="status-text">Initializing connection</span>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Stats Overview -->
  <div class="stats-overview">
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-server"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">Servers</div>
          <div class="stat-card__value" id="server-count">--</div>
          <div class="stat-card__change" id="server-trend"><i class="fas fa-arrow-up"></i> Connecting...</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">Users</div>
          <div class="stat-card__value" id="user-count">--</div>
          <div class="stat-card__change" id="user-trend"><i class="fas fa-arrow-up"></i> Connecting...</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-microchip"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">CPU Usage</div>
          <div class="stat-card__value" id="cpu-usage">--</div>
          <div class="progress-bar">
            <div class="progress-value" id="cpu-bar" style="width: 0%"></div>
          </div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-memory"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">Memory Usage</div>
          <div class="stat-card__value" id="memory-usage">--</div>
          <div class="progress-bar">
            <div class="progress-value" id="memory-bar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Main Content Columns -->
  <div class="dashboard-columns">
    <!-- Recent Activity -->
    <div class="dashboard-column">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title"><i class="fas fa-history"></i> Recent Activity</h2>
          <div class="card-actions">
            <button class="btn-icon btn-icon-sm" title="Refresh">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="activity-feed" id="activity-feed">
            <div class="activity-item">
              <div class="activity-icon blue">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="activity-content">
                <div class="activity-message">Connecting to server...</div>
                <div class="activity-timestamp">Just now</div>
              </div>
            </div>
          </div>
        </div>
        <div class="card-footer">
          <a href="/admin/logs" class="btn btn-outline btn-sm">View All Logs</a>
        </div>
      </div>
    </div>
    
    <!-- Command Usage -->
    <div class="dashboard-column">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title"><i class="fas fa-terminal"></i> Command Usage</h2>
          <div class="card-actions">
            <button class="btn-icon btn-icon-sm" title="Refresh">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
        <div class="card-body">
          <div id="command-usage" class="command-usage-container">
            <div class="placeholder-loading">
              <i class="fas fa-circle-notch fa-spin"></i>
              <p>Loading command statistics...</p>
            </div>
          </div>
        </div>
        <div class="card-footer">
          <a href="/admin/commands" class="btn btn-outline btn-sm">View All Commands</a>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Quick Actions -->
  <div class="quick-actions-section">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title"><i class="fas fa-bolt"></i> Quick Actions</h2>
      </div>
      <div class="card-body">
        <div class="quick-actions-grid">
          <a href="/admin/settings" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-cogs"></i>
            </div>
            <div class="quick-action-title">Bot Settings</div>
          </a>
          
          <a href="/admin/customization" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-palette"></i>
            </div>
            <div class="quick-action-title">Customization</div>
          </a>
          
          <a href="/admin/settings?tab=admins" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-users-cog"></i>
            </div>
            <div class="quick-action-title">Manage Users</div>
          </a>
          
          <a href="/admin/logs" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-clipboard-list"></i>
            </div>
            <div class="quick-action-title">View Logs</div>
          </a>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Info -->
  <div class="system-info-section">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title"><i class="fas fa-server"></i> System Information</h2>
      </div>
      <div class="card-body">
        <div class="system-info-grid">
          <div class="system-info-item">
            <div class="system-info-label">Node.js Version</div>
            <div class="system-info-value" id="node-version">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Discord.js Version</div>
            <div class="system-info-value" id="discord-version">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Operating System</div>
            <div class="system-info-value" id="os-info">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Uptime</div>
            <div class="system-info-value" id="uptime-value">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Total Channels</div>
            <div class="system-info-value" id="channel-count">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Total Commands</div>
            <div class="system-info-value" id="command-count">--</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Dashboard Welcome Page Styles */
  .dashboard-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  /* Welcome Section */
  .welcome-section .card {
    background: var(--background-light);
    background-image: linear-gradient(to right, rgba(156, 77, 255, 0.05), rgba(0, 229, 255, 0.05));
  }
  
  .welcome-user {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .welcome-avatar {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    border: 2px solid var(--primary-color);
    box-shadow: 0 0 15px rgba(156, 77, 255, 0.5);
  }
  
  .welcome-avatar-placeholder {
    width: 64px;
    height: 64px;
    border-radius: 50%;
    background: var(--gradient-primary);
    color: white;
    font-size: 1.75rem;
    font-weight: 700;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 0 15px rgba(156, 77, 255, 0.5);
  }
  
  .welcome-text h1 {
    font-size: 1.75rem;
    margin-bottom: 0.25rem;
  }
  
  .welcome-text h1 span {
    font-weight: 700;
  }
  
  .welcome-text p {
    color: var(--text-secondary);
    margin: 0;
  }
  
  .connection-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .status-indicator {
    display: inline-block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: var(--warning-color);
  }
  
  .status-text {
    font-size: 0.85rem;
    color: var(--text-secondary);
  }
  
  /* Stats Overview */
  .stats-overview {
    margin-bottom: 1rem;
  }
  
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
  }
  
  .stat-card {
    padding: 1.5rem;
    display: flex;
    gap: 1rem;
    align-items: flex-start;
  }
  
  .stat-card__content {
    flex: 1;
  }
  
  .stat-card__change {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
  }
  
  .change-up {
    color: var(--success-color);
  }
  
  .change-down {
    color: var(--danger-color);
  }
  
  /* Dashboard Columns */
  .dashboard-columns {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }
  
  /* Activity Feed */
  .activity-feed {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  /* Command Usage */
  .command-usage-container {
    min-height: 300px;
  }
  
  .command-usage-item {
    display: flex;
    flex-direction: column;
    margin-bottom: 1rem;
  }
  
  .command-usage-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.25rem;
  }
  
  .command-usage-name {
    font-weight: 500;
  }
  
  .command-usage-count {
    font-weight: 600;
    color: var(--primary-color);
  }
  
  .command-usage-bar {
    height: 6px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
    overflow: hidden;
  }
  
  .command-usage-progress {
    height: 100%;
    background: var(--gradient-primary);
    border-radius: 3px;
  }
  
  /* Quick Actions */
  .quick-actions-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 1.5rem;
  }
  
  .quick-action-card {
    background: var(--background-light);
    padding: 1.5rem;
    border-radius: var(--border-radius);
    text-align: center;
    text-decoration: none;
    transition: all var(--transition);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .quick-action-card:hover {
    transform: translateY(-5px);
    background: var(--background-lighter);
    box-shadow: var(--shadow-primary);
  }
  
  .quick-action-icon {
    width: 50px;
    height: 50px;
    border-radius: var(--border-radius);
    background: rgba(156, 77, 255, 0.15);
    color: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
    transition: all var(--transition);
  }
  
  .quick-action-card:hover .quick-action-icon {
    background: var(--primary-color);
    color: white;
    transform: scale(1.1);
  }
  
  .quick-action-title {
    color: var(--text-primary);
    font-weight: 500;
  }
  
  /* System Info */
  .system-info-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1.5rem;
  }
  
  .system-info-item {
    background: var(--background-light);
    padding: 1rem;
    border-radius: var(--border-radius);
  }
  
  .system-info-label {
    font-size: 0.85rem;
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
  }
  
  .system-info-value {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--text-primary);
  }
  
  /* Loading Placeholder */
  .placeholder-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 0;
    color: var(--text-secondary);
  }
  
  .placeholder-loading i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
  }
  
  /* Better Text Handling for Responsiveness */
  .welcome-text h1, .welcome-text h1 span, 
  .card-title, .stat-card__title, .stat-card__value,
  .quick-action-title, .system-info-value,
  .activity-message {
    word-break: keep-all;
    white-space: normal;
    overflow-wrap: break-word;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 1200px) {
    .stats-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .quick-actions-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .card-header {
      flex-direction: row;
      flex-wrap: wrap;
      gap: 1rem;
      justify-content: space-between;
    }
  }
  
  @media (max-width: 992px) {
    .dashboard-columns {
      grid-template-columns: 1fr;
    }
    
    .system-info-grid {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .welcome-section .card-header {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .connection-status {
      margin-top: 0.75rem;
      align-self: flex-start;
    }
  }
  
  @media (max-width: 768px) {
    .stats-grid {
      grid-template-columns: 1fr;
    }
    
    .quick-actions-grid {
      grid-template-columns: 1fr;
    }
    
    .system-info-grid {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 576px) {
    .welcome-user {
      flex-direction: row;
      align-items: center;
      text-align: left;
    }
    
    .welcome-text h1 {
      font-size: 1.3rem;
    }
    
    .welcome-avatar, .welcome-avatar-placeholder {
      width: 50px;
      height: 50px;
      font-size: 1.25rem;
    }
    
    .card-header, .welcome-user {
      flex-wrap: wrap;
    }
    
    .system-info-grid {
      gap: 1rem;
    }
    
    .system-info-item {
      padding: 0.75rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusBadge = document.getElementById('status-badge');
    const statusText = document.getElementById('status-text');
    const serverCount = document.getElementById('server-count');
    const userCount = document.getElementById('user-count');
    const cpuUsage = document.getElementById('cpu-usage');
    const cpuBar = document.getElementById('cpu-bar');
    const memoryUsage = document.getElementById('memory-usage');
    const memoryBar = document.getElementById('memory-bar');
    const activityFeed = document.getElementById('activity-feed');
    const commandUsage = document.getElementById('command-usage');
    const nodeVersion = document.getElementById('node-version');
    const discordVersion = document.getElementById('discord-version');
    const osInfo = document.getElementById('os-info');
    const uptimeValue = document.getElementById('uptime-value');
    const channelCount = document.getElementById('channel-count');
    const commandCount = document.getElementById('command-count');
    
    let socket;
    let reconnectAttempts = 0;
    let maxReconnectAttempts = 5;
    let reconnectDelay = 3000;
    
    function connectWebSocket() {
      // Update connection status
      statusBadge.className = 'status-indicator';
      statusBadge.style.backgroundColor = '#FEE75C';
      statusText.textContent = 'Connecting...';
      
      // Create WebSocket connection
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const host = window.location.host;
      socket = new WebSocket(`${protocol}//${host}/ws`);
      
      // Connection opened
      socket.addEventListener('open', function(event) {
        console.log('Connected to WebSocket server');
        statusBadge.style.backgroundColor = '#57F287';
        statusText.textContent = 'Connected';
        reconnectAttempts = 0;
        
        // Send a ping to get initial data
        socket.send(JSON.stringify({ type: 'ping' }));
      });
      
      // Listen for messages
      socket.addEventListener('message', function(event) {
        try {
          const data = JSON.parse(event.data);
          console.log('WebSocket data received:', data);
          
          // Update UI based on data type
          if (data.type === 'stats') {
            updateStats(data);
          } else if (data.type === 'pong') {
            // Handle pong response if needed
            console.log('Received pong from server, latency:', new Date().getTime() - new Date(data.timestamp).getTime());
          }
        } catch (error) {
          console.error('Error parsing WebSocket data:', error);
        }
      });
      
      // Handle errors
      socket.addEventListener('error', function(event) {
        console.error('WebSocket error:', event);
        statusBadge.style.backgroundColor = '#ED4245';
        statusText.textContent = 'Connection error';
      });
      
      // Handle socket closing
      socket.addEventListener('close', function(event) {
        console.log('WebSocket connection closed:', event.code, event.reason);
        statusBadge.style.backgroundColor = '#ED4245';
        statusText.textContent = 'Disconnected';
        
        // Attempt to reconnect
        if (reconnectAttempts < maxReconnectAttempts) {
          reconnectAttempts++;
          setTimeout(connectWebSocket, reconnectDelay);
          statusText.textContent = `Reconnecting (${reconnectAttempts}/${maxReconnectAttempts})...`;
        } else {
          statusText.textContent = 'Connection failed';
        }
      });
    }
    
    // Update stats with received data
    function updateStats(data) {
      // Update server and user counts
      serverCount.textContent = data.servers.toLocaleString();
      userCount.textContent = data.users.toLocaleString();
      
      // Update CPU and memory usage
      cpuUsage.textContent = `${data.cpu}%`;
      cpuBar.style.width = `${data.cpu}%`;
      
      memoryUsage.textContent = `${data.memory}%`;
      memoryBar.style.width = `${data.memory}%`;
      
      // Update system info
      nodeVersion.textContent = data.nodeVersion || '--';
      discordVersion.textContent = data.discordVersion || '--';
      osInfo.textContent = data.os || '--';
      
      // Format uptime
      const uptime = data.uptime;
      let formattedUptime = '--';
      if (uptime) {
        const days = Math.floor(uptime / 86400);
        const hours = Math.floor((uptime % 86400) / 3600);
        const minutes = Math.floor((uptime % 3600) / 60);
        
        if (days > 0) {
          formattedUptime = `${days}d ${hours}h ${minutes}m`;
        } else {
          formattedUptime = `${hours}h ${minutes}m`;
        }
      }
      uptimeValue.textContent = formattedUptime;
      
      // Update channel and command counts
      channelCount.textContent = data.channels || '--';
      commandCount.textContent = data.commands || '--';
      
      // Update activity feed
      if (data.recentActivity && data.recentActivity.length > 0) {
        activityFeed.innerHTML = '';
        
        data.recentActivity.forEach(activity => {
          const activityItem = document.createElement('div');
          activityItem.className = 'activity-item';
          
          let iconClass = 'blue';
          if (activity.type === 'green') iconClass = 'green';
          if (activity.type === 'red') iconClass = 'red';
          if (activity.type === 'purple') iconClass = 'purple';
          
          activityItem.innerHTML = `
            <div class="activity-icon ${iconClass}">
              <i class="fas fa-${activity.icon || 'info-circle'}"></i>
            </div>
            <div class="activity-content">
              <div class="activity-message">${activity.message}</div>
              <div class="activity-timestamp">${activity.time}</div>
            </div>
          `;
          
          activityFeed.appendChild(activityItem);
        });
      }
      
      // Update command usage
      if (data.commandUsage) {
        commandUsage.innerHTML = '';
        
        const commandEntries = Object.entries(data.commandUsage);
        if (commandEntries.length === 0) {
          commandUsage.innerHTML = `
            <div class="placeholder-loading">
              <p>No command usage data available</p>
            </div>
          `;
          return;
        }
        
        // Sort by usage count (descending)
        commandEntries.sort((a, b) => b[1] - a[1]);
        
        // Get max value for percentage calculation
        const maxValue = commandEntries[0][1];
        
        // Create command usage bars
        commandEntries.forEach(([command, count]) => {
          const percentage = (count / maxValue) * 100;
          
          const commandItem = document.createElement('div');
          commandItem.className = 'command-usage-item';
          commandItem.innerHTML = `
            <div class="command-usage-header">
              <div class="command-usage-name">!${command}</div>
              <div class="command-usage-count">${count}</div>
            </div>
            <div class="command-usage-bar">
              <div class="command-usage-progress" style="width: ${percentage}%"></div>
            </div>
          `;
          
          commandUsage.appendChild(commandItem);
        });
      }
    }
    
    // Start WebSocket connection
    connectWebSocket();
    
    // Send ping every 30 seconds to keep connection alive
    setInterval(function() {
      if (socket && socket.readyState === WebSocket.OPEN) {
        console.log('Sending ping to keep connection alive');
        socket.send(JSON.stringify({ type: 'ping', timestamp: new Date().toISOString() }));
      }
    }, 30000);
  });
</script>