<!-- SWOOSH Admin Welcome Page with Text Stairs Fix -->
<div class="dashboard-container">
  <!-- Welcome Section -->
  <div class="welcome-section">
    <div class="card card-glow">
      <div class="card-header">
        <div class="welcome-user">
          <% if (typeof user !== 'undefined' && user && user.avatar) { %>
            <img src="<%= user.avatar %>" alt="<%= user.username %>'s Avatar" class="welcome-avatar">
          <% } else if (typeof user !== 'undefined' && user && user.username) { %>
            <div class="welcome-avatar-placeholder"><%= user.username.charAt(0).toUpperCase() %></div>
          <% } else { %>
            <div class="welcome-avatar-placeholder">G</div>
          <% } %>
          
          <div class="welcome-text">
            <h1 class="gradient-text-blend"><%= greeting %>, <span><%= typeof user !== 'undefined' && user ? user.username || 'Guest' : 'Guest' %></span></h1>
            <p>Welcome to your SWOOSH Bot administration dashboard</p>
          </div>
        </div>
        
        <div class="connection-status">
          <span class="status-indicator" id="status-badge">Connecting...</span>
          <span class="status-text" id="status-text">Initializing connection</span>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Stats Overview -->
  <div class="stats-overview">
    <div class="stats-grid">
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-server"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">Servers</div>
          <div class="stat-card__value" id="server-count">--</div>
          <div class="stat-card__change" id="server-trend"><i class="fas fa-arrow-up"></i> Connecting...</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">Users</div>
          <div class="stat-card__value" id="user-count">--</div>
          <div class="stat-card__change" id="user-trend"><i class="fas fa-arrow-up"></i> Connecting...</div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-microchip"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">CPU Usage</div>
          <div class="stat-card__value" id="cpu-usage">--</div>
          <div class="progress-bar">
            <div class="progress-value" id="cpu-bar" style="width: 0%"></div>
          </div>
        </div>
      </div>
      
      <div class="stat-card">
        <div class="stat-card__icon">
          <i class="fas fa-memory"></i>
        </div>
        <div class="stat-card__content">
          <div class="stat-card__title">Memory Usage</div>
          <div class="stat-card__value" id="memory-usage">--</div>
          <div class="progress-bar">
            <div class="progress-value" id="memory-bar" style="width: 0%"></div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Main Content Columns -->
  <div class="dashboard-columns">
    <!-- Recent Activity -->
    <div class="dashboard-column">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title"><i class="fas fa-history"></i> Recent Activity</h2>
          <div class="card-actions">
            <button class="btn-icon btn-icon-sm" title="Refresh">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
        <div class="card-body">
          <div class="activity-feed" id="activity-feed">
            <div class="activity-item">
              <div class="activity-icon blue">
                <i class="fas fa-info-circle"></i>
              </div>
              <div class="activity-content">
                <div class="activity-message">Connecting to server...</div>
                <div class="activity-timestamp">Just now</div>
              </div>
            </div>
          </div>
        </div>
        <div class="card-footer">
          <a href="/admin/logs" class="btn btn-outline btn-sm">View All Logs</a>
        </div>
      </div>
    </div>
    
    <!-- Command Usage -->
    <div class="dashboard-column">
      <div class="card">
        <div class="card-header">
          <h2 class="card-title"><i class="fas fa-terminal"></i> Command Usage</h2>
          <div class="card-actions">
            <button class="btn-icon btn-icon-sm" title="Refresh">
              <i class="fas fa-sync-alt"></i>
            </button>
          </div>
        </div>
        <div class="card-body">
          <div id="command-usage" class="command-usage-container">
            <div class="placeholder-loading">
              <i class="fas fa-circle-notch fa-spin"></i>
              <p>Loading command statistics...</p>
            </div>
          </div>
        </div>
        <div class="card-footer">
          <a href="/admin/commands" class="btn btn-outline btn-sm">View All Commands</a>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Quick Actions -->
  <div class="quick-actions-section">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title"><i class="fas fa-bolt"></i> Quick Actions</h2>
      </div>
      <div class="card-body">
        <div class="quick-actions-grid">
          <a href="/admin/settings" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-cogs"></i>
            </div>
            <div class="quick-action-title">Bot Settings</div>
          </a>
          
          <a href="/admin/customization" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-palette"></i>
            </div>
            <div class="quick-action-title">Customization</div>
          </a>
          
          <a href="/admin/users" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-users-cog"></i>
            </div>
            <div class="quick-action-title">Manage Users</div>
          </a>
          
          <a href="/admin/logs" class="quick-action-card">
            <div class="quick-action-icon">
              <i class="fas fa-clipboard-list"></i>
            </div>
            <div class="quick-action-title">View Logs</div>
          </a>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Info -->
  <div class="system-info-section">
    <div class="card">
      <div class="card-header">
        <h2 class="card-title"><i class="fas fa-server"></i> System Information</h2>
      </div>
      <div class="card-body">
        <div class="system-info-grid">
          <div class="system-info-item">
            <div class="system-info-label">Node.js Version</div>
            <div class="system-info-value" id="node-version">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Discord.js Version</div>
            <div class="system-info-value" id="discord-version">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Operating System</div>
            <div class="system-info-value" id="os-info">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Uptime</div>
            <div class="system-info-value" id="uptime-value">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Total Channels</div>
            <div class="system-info-value" id="channel-count">--</div>
          </div>
          
          <div class="system-info-item">
            <div class="system-info-label">Total Commands</div>
            <div class="system-info-value" id="command-count">--</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Include the anti-stairs CSS fix -->
<link rel="stylesheet" href="/css/no-stairs-fix.css">

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const statusBadge = document.getElementById('status-badge');
    const statusText = document.getElementById('status-text');
    const serverCount = document.getElementById('server-count');
    const userCount = document.getElementById('user-count');
    const cpuUsage = document.getElementById('cpu-usage');
    const cpuBar = document.getElementById('cpu-bar');
    const memoryUsage = document.getElementById('memory-usage');
    const memoryBar = document.getElementById('memory-bar');
    const activityFeed = document.getElementById('activity-feed');
    const commandUsage = document.getElementById('command-usage');
    const nodeVersion = document.getElementById('node-version');
    const discordVersion = document.getElementById('discord-version');
    const osInfo = document.getElementById('os-info');
    const uptimeValue = document.getElementById('uptime-value');
    const channelCount = document.getElementById('channel-count');
    const commandCount = document.getElementById('command-count');
    
    let socket;
    let reconnectAttempts = 0;
    let maxReconnectAttempts = 5;
    let reconnectDelay = 3000;
    
    function connectWebSocket() {
      // Update connection status
      statusBadge.className = 'status-indicator';
      statusBadge.style.backgroundColor = '#FEE75C';
      statusText.textContent = 'Connecting...';
      
      // Create WebSocket connection
      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
      const host = window.location.host;
      socket = new WebSocket(`${protocol}//${host}/ws`);
      
      // Connection opened
      socket.addEventListener('open', function(event) {
        console.log('Connected to WebSocket server');
        statusBadge.style.backgroundColor = '#57F287';
        statusText.textContent = 'Connected';
        reconnectAttempts = 0;
        
        // Send a ping to get initial data
        socket.send(JSON.stringify({ type: 'ping' }));
      });
      
      // Listen for messages
      socket.addEventListener('message', function(event) {
        try {
          const data = JSON.parse(event.data);
          console.log('WebSocket data received:', data);
          
          if (data.type === 'pong') {
            console.log('Received pong from server, latency:', new Date().getTime() - new Date(data.timestamp).getTime());
          } else if (data.type === 'stats') {
            updateStats(data);
          } else if (data.type === 'welcome') {
            console.log(data.message);
          }
        } catch (error) {
          console.error('Error parsing WebSocket message:', error);
        }
      });
      
      // Connection closed
      socket.addEventListener('close', function(event) {
        console.log('WebSocket connection closed:', event.code, event.reason);
        statusBadge.style.backgroundColor = '#ED4245';
        statusText.textContent = 'Disconnected';
        
        // Try to reconnect if not max attempts
        if (reconnectAttempts < maxReconnectAttempts) {
          reconnectAttempts++;
          setTimeout(connectWebSocket, reconnectDelay);
          statusText.textContent = `Reconnecting... (${reconnectAttempts}/${maxReconnectAttempts})`;
        }
      });
      
      // Connection error
      socket.addEventListener('error', function(event) {
        console.error('WebSocket error:', event);
        statusBadge.style.backgroundColor = '#ED4245';
        statusText.textContent = 'Connection Error';
      });
    }
    
    // Keep WebSocket connection alive
    setInterval(function() {
      if (socket && socket.readyState === WebSocket.OPEN) {
        console.log('Sending ping to keep connection alive');
        socket.send(JSON.stringify({ type: 'ping', timestamp: new Date().toISOString() }));
      }
    }, 30000);
    
    function updateStats(data) {
      // Update server and user counts
      serverCount.textContent = data.servers?.toLocaleString() || '--';
      userCount.textContent = data.users?.toLocaleString() || '--';
      
      // Update CPU and memory usage
      if (data.cpu !== undefined) {
        cpuUsage.textContent = `${data.cpu}%`;
        cpuBar.style.width = `${data.cpu}%`;
        if (data.cpu < 50) {
          cpuBar.style.backgroundColor = '#57F287';
        } else if (data.cpu < 80) {
          cpuBar.style.backgroundColor = '#FEE75C';
        } else {
          cpuBar.style.backgroundColor = '#ED4245';
        }
      }
      
      if (data.memory !== undefined) {
        memoryUsage.textContent = `${data.memory}%`;
        memoryBar.style.width = `${data.memory}%`;
        if (data.memory < 50) {
          memoryBar.style.backgroundColor = '#57F287';
        } else if (data.memory < 80) {
          memoryBar.style.backgroundColor = '#FEE75C';
        } else {
          memoryBar.style.backgroundColor = '#ED4245';
        }
      }
      
      // Update recent activity
      if (data.recentActivity && Array.isArray(data.recentActivity) && data.recentActivity.length > 0) {
        activityFeed.innerHTML = '';
        
        data.recentActivity.forEach(activity => {
          const activityItem = document.createElement('div');
          activityItem.className = 'activity-item';
          
          // Determine icon color based on type
          let iconColorClass = 'blue';
          if (activity.type === 'red') {
            iconColorClass = 'red';
          } else if (activity.type === 'green') {
            iconColorClass = 'green';
          } else if (activity.type === 'orange' || activity.type === 'amber') {
            iconColorClass = 'amber';
          }
          
          activityItem.innerHTML = `
            <div class="activity-icon ${iconColorClass}">
              <i class="fas fa-${activity.icon}"></i>
            </div>
            <div class="activity-content">
              <div class="activity-message">${activity.message}</div>
              <div class="activity-timestamp">${activity.time}</div>
            </div>
          `;
          
          activityFeed.appendChild(activityItem);
        });
      }
      
      // Update command usage chart
      if (data.commandUsage && Object.keys(data.commandUsage).length > 0) {
        commandUsage.innerHTML = '';
        
        // Get total command usage
        const totalUsage = Object.values(data.commandUsage).reduce((sum, count) => sum + count, 0);
        
        // Sort commands by usage count (descending)
        const sortedCommands = Object.entries(data.commandUsage)
          .sort((a, b) => b[1] - a[1])
          .slice(0, 5); // Top 5 commands
        
        if (sortedCommands.length === 0) {
          commandUsage.innerHTML = `
            <div class="placeholder-message">
              <p>No command usage data available</p>
            </div>
          `;
        } else {
          sortedCommands.forEach(([command, count]) => {
            const percentage = totalUsage > 0 ? (count / totalUsage) * 100 : 0;
            
            const commandItem = document.createElement('div');
            commandItem.className = 'command-usage-item';
            commandItem.innerHTML = `
              <div class="command-usage-header">
                <span class="command-usage-name">${command}</span>
                <span class="command-usage-count">${count}</span>
              </div>
              <div class="command-usage-bar">
                <div class="command-usage-progress" style="width: ${percentage}%"></div>
              </div>
            `;
            
            commandUsage.appendChild(commandItem);
          });
        }
      } else {
        commandUsage.innerHTML = `
          <div class="placeholder-message">
            <p>No command usage data available</p>
          </div>
        `;
      }
      
      // Update system info
      if (data.nodeVersion) {
        nodeVersion.textContent = data.nodeVersion;
      }
      
      if (data.discordVersion) {
        discordVersion.textContent = data.discordVersion;
      }
      
      if (data.os) {
        osInfo.textContent = data.os;
      }
      
      if (data.uptime) {
        const days = Math.floor(data.uptime / 86400);
        const hours = Math.floor((data.uptime % 86400) / 3600);
        const minutes = Math.floor((data.uptime % 3600) / 60);
        const seconds = Math.floor(data.uptime % 60);
        
        let uptimeStr = '';
        if (days > 0) uptimeStr += `${days}d `;
        if (hours > 0 || days > 0) uptimeStr += `${hours}h `;
        if (minutes > 0 || hours > 0 || days > 0) uptimeStr += `${minutes}m `;
        uptimeStr += `${seconds}s`;
        
        uptimeValue.textContent = uptimeStr;
      }
      
      if (data.channels) {
        channelCount.textContent = data.channels.toLocaleString();
      }
      
      if (data.commands) {
        commandCount.textContent = data.commands.toLocaleString();
      }
    }
    
    // Initialize WebSocket connection
    connectWebSocket();
  });
</script>
