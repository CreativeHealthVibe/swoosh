<!-- SWOOSH Bot - Enhanced Logs Page -->
<div class="logs-container">
  <!-- Logs Header -->
  <div class="logs-header">
    <h1 class="page-title">Bot Activity Logs</h1>
    <p class="subtitle">Monitor and search through all bot activity</p>
    
    <div class="logs-controls">
      <div class="search-filter">
        <div class="filter-group">
          <input type="text" id="log-search" class="search-input" placeholder="Search logs...">
          <button id="search-btn" class="btn btn-primary">
            <i class="fas fa-search"></i> Search
          </button>
        </div>
        
        <div class="filter-group">
          <select id="log-type-filter" class="filter-select">
            <option value="all">All Types</option>
            <option value="moderation">Moderation</option>
            <option value="tickets">Tickets</option>
            <option value="commands">Commands</option>
            <option value="settings">Settings</option>
            <option value="errors">Errors</option>
          </select>
          
          <div class="date-filter">
            <input type="date" id="date-from" class="date-input">
            <span>to</span>
            <input type="date" id="date-to" class="date-input">
          </div>
        </div>
      </div>
      
      <div class="logs-actions">
        <button id="refresh-logs" class="btn btn-outline">
          <i class="fas fa-sync-alt"></i> Refresh
        </button>
        <button id="export-logs" class="btn btn-outline">
          <i class="fas fa-file-export"></i> Export
        </button>
      </div>
    </div>
  </div>
  
  <!-- Logs Stats -->
  <div class="logs-stats">
    <div class="stat-card">
      <div class="stat-icon moderation">
        <i class="fas fa-shield-alt"></i>
      </div>
      <div class="stat-info">
        <h3>Moderation</h3>
        <div class="stat-count" id="moderation-count">12</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon tickets">
        <i class="fas fa-ticket-alt"></i>
      </div>
      <div class="stat-info">
        <h3>Tickets</h3>
        <div class="stat-count" id="tickets-count">3</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon commands">
        <i class="fas fa-terminal"></i>
      </div>
      <div class="stat-info">
        <h3>Commands</h3>
        <div class="stat-count" id="commands-count">24</div>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon errors">
        <i class="fas fa-exclamation-triangle"></i>
      </div>
      <div class="stat-info">
        <h3>Errors</h3>
        <div class="stat-count" id="errors-count">7</div>
      </div>
    </div>
  </div>
  
  <!-- Logs Table -->
  <div class="logs-table-container">
    <table class="logs-table" id="logs-table">
      <thead>
        <tr>
          <th class="timestamp-column">Time</th>
          <th class="event-column">Event</th>
          <th class="user-column">User</th>
          <th class="executor-column">Executor</th>
          <th class="details-column">Details</th>
          <th class="actions-column"></th>
        </tr>
      </thead>
      <tbody id="logs-body">
        <!-- Logs will be populated via JavaScript -->
      </tbody>
    </table>
    
    <!-- Empty state for when no logs are found -->
    <div class="empty-state" id="empty-logs" style="display: none;">
      <div class="empty-icon">
        <i class="fas fa-search"></i>
      </div>
      <h3>No logs found</h3>
      <p>Try adjusting your search criteria or filters</p>
    </div>
    
    <!-- Loading state -->
    <div class="loading-state" id="loading-logs" style="display: none;">
      <div class="spinner"></div>
      <p>Loading logs...</p>
    </div>
  </div>
  
  <!-- Pagination -->
  <div class="pagination" id="logs-pagination">
    <button class="pagination-btn" id="first-page" disabled>
      <i class="fas fa-angle-double-left"></i>
    </button>
    <button class="pagination-btn" id="prev-page" disabled>
      <i class="fas fa-angle-left"></i>
    </button>
    
    <div class="pagination-info">
      <span id="current-page">1</span> of <span id="total-pages">5</span>
    </div>
    
    <button class="pagination-btn" id="next-page">
      <i class="fas fa-angle-right"></i>
    </button>
    <button class="pagination-btn" id="last-page">
      <i class="fas fa-angle-double-right"></i>
    </button>
    
    <div class="pagination-size">
      <label for="page-size">Show:</label>
      <select id="page-size" class="page-size-select">
        <option value="10">10</option>
        <option value="25" selected>25</option>
        <option value="50">50</option>
        <option value="100">100</option>
      </select>
    </div>
  </div>
  
  <!-- Log Detail Modal -->
  <div class="modal" id="log-detail-modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Log Details</h2>
        <button class="modal-close" id="close-modal">
          <i class="fas fa-times"></i>
        </button>
      </div>
      
      <div class="modal-body">
        <div class="log-detail-header">
          <div class="log-detail-type" id="modal-log-type">
            <span class="badge">User Banned</span>
          </div>
          <div class="log-detail-time" id="modal-log-time">
            Apr 7, 2025 21:28:49
          </div>
        </div>
        
        <div class="log-detail-info">
          <div class="detail-group">
            <div class="detail-label">User:</div>
            <div class="detail-value" id="modal-user">troubleuser#1234 (12345678901234567)</div>
          </div>
          
          <div class="detail-group">
            <div class="detail-label">Executor:</div>
            <div class="detail-value" id="modal-executor">admin#5678 (98765432109876543)</div>
          </div>
          
          <div class="detail-group full-width">
            <div class="detail-label">Details:</div>
            <pre class="detail-json" id="modal-details">
{
  "reason": "Repeated violations of server rules"
}
            </pre>
          </div>
          
          <div class="detail-group full-width" id="modal-stack-container">
            <div class="detail-label">Stack Trace:</div>
            <pre class="detail-stack" id="modal-stack-trace">
Stack trace will appear here for error logs.
            </pre>
          </div>
        </div>
      </div>
      
      <div class="modal-footer">
        <button class="btn btn-outline" id="close-detail-btn">
          Close
        </button>
        <button class="btn btn-primary" id="copy-detail-btn">
          <i class="fas fa-copy"></i> Copy to Clipboard
        </button>
      </div>
    </div>
  </div>
</div>

<script>
// Sample log data for demonstration
const sampleLogs = [
  <% logs.forEach(function(log) { %>
    {
      timestamp: new Date('<%= log.timestamp %>'),
      event: '<%= log.level.charAt(0).toUpperCase() + log.level.slice(1) %>',
      type: '<%= log.level %>',
      user: '<%= log.user || "N/A" %>',
      executor: 'System',
      details: { message: '<%= log.message %>' }
    },
  <% }); %>
  // We'll add more sample data to demonstrate the features
  {
    timestamp: new Date('2025-04-07T21:28:49.514Z'),
    event: 'User Banned',
    type: 'moderation',
    user: 'troubleuser#1234 (12345678901234567)',
    executor: 'admin#5678 (98765432109876543)',
    details: { reason: 'Repeated violations of server rules' }
  },
  {
    timestamp: new Date('2025-04-07T21:15:29.658Z'),
    event: 'Ticket Closed',
    type: 'tickets',
    user: 'customer#4321 (45678901234567890)',
    executor: 'support#9012 (10987654321098765)',
    details: { ticketId: 'T-12345', reason: 'Issue resolved' }
  },
  {
    timestamp: new Date('2025-04-07T20:46:05.336Z'),
    event: 'Role Created',
    type: 'settings',
    user: 'N/A',
    executor: 'admin#5678 (98765432109876543)',
    details: { roleName: 'VIP Member', color: '#FF9900' }
  },
  {
    timestamp: new Date('2025-04-07T20:09:06.215Z'),
    event: 'Message Purged',
    type: 'moderation',
    user: 'spammer#7890 (78901234567890123)',
    executor: 'mod#3456 (34567890123456789)',
    details: { amount: 15, channel: 'general', reason: 'Spam' }
  },
  {
    timestamp: new Date('2025-04-07T22:12:33.130Z'),
    event: 'Fatal Error',
    type: 'errors',
    user: 'N/A',
    executor: 'System',
    details: { 
      error: 'Error: listen EADDRINUSE: address already in use 0.0.0.0:5000',
      stack: 'at Server.setupListenHandle [as _listen2] (node:net:1908:16)\nat listenInCluster (node:net:1965:12)\nat doListen (node:net:2139:7)\nat process.processTicksAndRejections (node:internal/process/task_queues:83:21)'
    }
  }
];

// Current page state
let currentPage = 1;
let pageSize = 25;
let totalPages = Math.ceil(sampleLogs.length / pageSize);
let filteredLogs = [...sampleLogs];
let sortField = 'timestamp';
let sortDirection = 'desc';

// DOM elements
const logsTable = document.getElementById('logs-table');
const logsBody = document.getElementById('logs-body');
const emptyLogs = document.getElementById('empty-logs');
const loadingLogs = document.getElementById('loading-logs');
const searchInput = document.getElementById('log-search');
const typeFilter = document.getElementById('log-type-filter');
const dateFrom = document.getElementById('date-from');
const dateTo = document.getElementById('date-to');
const pageSizeSelect = document.getElementById('page-size');
const currentPageEl = document.getElementById('current-page');
const totalPagesEl = document.getElementById('total-pages');

// Modal elements
const logDetailModal = document.getElementById('log-detail-modal');
const modalLogType = document.getElementById('modal-log-type');
const modalLogTime = document.getElementById('modal-log-time');
const modalUser = document.getElementById('modal-user');
const modalExecutor = document.getElementById('modal-executor');
const modalDetails = document.getElementById('modal-details');
const modalStackContainer = document.getElementById('modal-stack-container');
const modalStackTrace = document.getElementById('modal-stack-trace');
const closeModal = document.getElementById('close-modal');
const closeDetailBtn = document.getElementById('close-detail-btn');
const copyDetailBtn = document.getElementById('copy-detail-btn');

// Stats counters
const moderationCount = document.getElementById('moderation-count');
const ticketsCount = document.getElementById('tickets-count');
const commandsCount = document.getElementById('commands-count');
const errorsCount = document.getElementById('errors-count');

// Pagination buttons
const firstPageBtn = document.getElementById('first-page');
const prevPageBtn = document.getElementById('prev-page');
const nextPageBtn = document.getElementById('next-page');
const lastPageBtn = document.getElementById('last-page');

// Initialize the page
document.addEventListener('DOMContentLoaded', function() {
  // Set default date range (last 7 days)
  const today = new Date();
  const lastWeek = new Date(today);
  lastWeek.setDate(today.getDate() - 7);
  
  dateFrom.value = formatDateForInput(lastWeek);
  dateTo.value = formatDateForInput(today);
  
  // Initial load
  updateLogStats();
  renderLogs();
  updatePagination();
  
  // Set up event listeners
  searchInput.addEventListener('keyup', function(e) {
    if (e.key === 'Enter') {
      filterLogs();
    }
  });
  
  document.getElementById('search-btn').addEventListener('click', filterLogs);
  document.getElementById('refresh-logs').addEventListener('click', refreshLogs);
  document.getElementById('export-logs').addEventListener('click', exportLogs);
  
  typeFilter.addEventListener('change', filterLogs);
  dateFrom.addEventListener('change', filterLogs);
  dateTo.addEventListener('change', filterLogs);
  
  pageSizeSelect.addEventListener('change', function() {
    pageSize = parseInt(this.value);
    currentPage = 1;
    renderLogs();
    updatePagination();
  });
  
  // Pagination event listeners
  firstPageBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      currentPage = 1;
      renderLogs();
      updatePagination();
    }
  });
  
  prevPageBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      currentPage--;
      renderLogs();
      updatePagination();
    }
  });
  
  nextPageBtn.addEventListener('click', function() {
    if (currentPage < totalPages) {
      currentPage++;
      renderLogs();
      updatePagination();
    }
  });
  
  lastPageBtn.addEventListener('click', function() {
    if (currentPage < totalPages) {
      currentPage = totalPages;
      renderLogs();
      updatePagination();
    }
  });
  
  // Table header click for sorting
  document.querySelectorAll('.logs-table th').forEach(header => {
    header.addEventListener('click', function() {
      const column = this.className.split('-')[0];
      if (column && column !== 'actions') {
        if (sortField === column) {
          sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
          sortField = column;
          sortDirection = 'desc';
        }
        
        // Update sort indicators
        document.querySelectorAll('.logs-table th').forEach(th => {
          th.classList.remove('sort-asc', 'sort-desc');
        });
        
        this.classList.add(`sort-${sortDirection}`);
        
        renderLogs();
      }
    });
  });
  
  // Modal event listeners
  closeModal.addEventListener('click', hideModal);
  closeDetailBtn.addEventListener('click', hideModal);
  copyDetailBtn.addEventListener('click', copyLogDetails);
  
  // Close modal when clicking outside
  window.addEventListener('click', function(event) {
    if (event.target === logDetailModal) {
      hideModal();
    }
  });
});

// Filter logs based on search, type and date
function filterLogs() {
  const searchTerm = searchInput.value.toLowerCase();
  const type = typeFilter.value;
  const fromDate = dateFrom.value ? new Date(dateFrom.value) : null;
  const toDate = dateTo.value ? new Date(dateTo.value) : null;
  
  // Apply loading state
  logsBody.innerHTML = '';
  loadingLogs.style.display = 'flex';
  emptyLogs.style.display = 'none';
  
  // Simulate API call
  setTimeout(() => {
    filteredLogs = sampleLogs.filter(log => {
      // Filter by search term
      const logStr = JSON.stringify(log).toLowerCase();
      const matchesSearch = !searchTerm || logStr.includes(searchTerm);
      
      // Filter by type
      const matchesType = type === 'all' || log.type === type;
      
      // Filter by date
      const logDate = new Date(log.timestamp);
      const matchesFromDate = !fromDate || logDate >= fromDate;
      const matchesToDate = !toDate || logDate <= toDate;
      
      return matchesSearch && matchesType && matchesFromDate && matchesToDate;
    });
    
    // Reset pagination
    currentPage = 1;
    totalPages = Math.ceil(filteredLogs.length / pageSize);
    
    // Update UI
    updateLogStats();
    renderLogs();
    updatePagination();
    
    // Hide loading state
    loadingLogs.style.display = 'none';
  }, 300);
}

// Render logs to the table
function renderLogs() {
  // Clear table
  logsBody.innerHTML = '';
  
  // Sort logs
  const sortedLogs = [...filteredLogs].sort((a, b) => {
    let comparison = 0;
    
    if (sortField === 'timestamp') {
      comparison = new Date(a.timestamp) - new Date(b.timestamp);
    } else if (sortField === 'event') {
      comparison = a.event.localeCompare(b.event);
    } else if (sortField === 'user') {
      comparison = a.user.localeCompare(b.user);
    } else if (sortField === 'executor') {
      comparison = a.executor.localeCompare(b.executor);
    }
    
    return sortDirection === 'asc' ? comparison : -comparison;
  });
  
  // Calculate page boundaries
  const startIndex = (currentPage - 1) * pageSize;
  const endIndex = Math.min(startIndex + pageSize, sortedLogs.length);
  const pageData = sortedLogs.slice(startIndex, endIndex);
  
  // Show empty state if no logs
  if (pageData.length === 0) {
    emptyLogs.style.display = 'flex';
    return;
  } else {
    emptyLogs.style.display = 'none';
  }
  
  // Render logs
  pageData.forEach(log => {
    const row = document.createElement('tr');
    row.className = getRowClass(log.type);
    
    // Format timestamp
    const formattedTime = formatDateTime(log.timestamp);
    
    // Create cells
    row.innerHTML = `
      <td class="timestamp-column">
        <div class="log-time">
          <span class="time">${formattedTime.time}</span>
          <span class="date">${formattedTime.date}</span>
        </div>
      </td>
      <td class="event-column">
        <div class="event-badge ${getEventClass(log.type)}">
          <i class="${getEventIcon(log.event)}"></i>
          <span>${log.event}</span>
        </div>
      </td>
      <td class="user-column">${formatUser(log.user)}</td>
      <td class="executor-column">${formatUser(log.executor)}</td>
      <td class="details-column">${formatDetails(log.details)}</td>
      <td class="actions-column">
        <button class="action-btn view-log" title="View Details">
          <i class="fas fa-eye"></i>
        </button>
      </td>
    `;
    
    // Add click event for the view button
    row.querySelector('.view-log').addEventListener('click', () => {
      showLogDetails(log);
    });
    
    logsBody.appendChild(row);
  });
}

// Show log details in modal
function showLogDetails(log) {
  // Update modal content
  modalLogType.innerHTML = `<span class="badge ${getEventClass(log.type)}">${log.event}</span>`;
  modalLogTime.textContent = formatDateTime(log.timestamp).full;
  modalUser.textContent = log.user;
  modalExecutor.textContent = log.executor;
  
  // Format details as JSON
  const detailsStr = JSON.stringify(log.details, null, 2);
  modalDetails.textContent = detailsStr;
  
  // Show stack trace for errors
  if (log.type === 'errors' && log.details.stack) {
    modalStackContainer.style.display = 'block';
    modalStackTrace.textContent = log.details.stack;
  } else {
    modalStackContainer.style.display = 'none';
  }
  
  // Show modal
  logDetailModal.style.display = 'block';
  document.body.classList.add('modal-open');
}

// Hide the modal
function hideModal() {
  logDetailModal.style.display = 'none';
  document.body.classList.remove('modal-open');
}

// Copy log details to clipboard
function copyLogDetails() {
  const details = modalDetails.textContent;
  navigator.clipboard.writeText(details)
    .then(() => {
      // Show success message
      const originalText = copyDetailBtn.innerHTML;
      copyDetailBtn.innerHTML = '<i class="fas fa-check"></i> Copied!';
      setTimeout(() => {
        copyDetailBtn.innerHTML = originalText;
      }, 2000);
    })
    .catch(err => {
      console.error('Failed to copy: ', err);
    });
}

// Update pagination controls
function updatePagination() {
  // Update page count
  currentPageEl.textContent = currentPage;
  totalPagesEl.textContent = totalPages;
  
  // Update button states
  firstPageBtn.disabled = currentPage === 1;
  prevPageBtn.disabled = currentPage === 1;
  nextPageBtn.disabled = currentPage === totalPages || totalPages === 0;
  lastPageBtn.disabled = currentPage === totalPages || totalPages === 0;
}

// Update log type counts
function updateLogStats() {
  const modCount = filteredLogs.filter(log => log.type === 'moderation').length;
  const tickCount = filteredLogs.filter(log => log.type === 'tickets').length;
  const cmdCount = filteredLogs.filter(log => log.type === 'commands').length;
  const errCount = filteredLogs.filter(log => log.type === 'errors').length;
  
  moderationCount.textContent = modCount;
  ticketsCount.textContent = tickCount;
  commandsCount.textContent = cmdCount;
  errorsCount.textContent = errCount;
}

// Refresh logs (simulates fetching from API)
function refreshLogs() {
  logsBody.innerHTML = '';
  loadingLogs.style.display = 'flex';
  emptyLogs.style.display = 'none';
  
  // Simulate API call
  setTimeout(() => {
    // Reset filters
    searchInput.value = '';
    typeFilter.value = 'all';
    
    // Reset to original data
    filteredLogs = [...sampleLogs];
    currentPage = 1;
    totalPages = Math.ceil(filteredLogs.length / pageSize);
    
    // Update UI
    updateLogStats();
    renderLogs();
    updatePagination();
    
    // Hide loading state
    loadingLogs.style.display = 'none';
  }, 500);
}

// Export logs to JSON file
function exportLogs() {
  const dataStr = JSON.stringify(filteredLogs, null, 2);
  const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
  
  const exportFileDefaultName = `swoosh_logs_${new Date().toISOString().slice(0, 10)}.json`;
  
  const linkElement = document.createElement('a');
  linkElement.setAttribute('href', dataUri);
  linkElement.setAttribute('download', exportFileDefaultName);
  linkElement.click();
}

// Helper Functions

// Format date for input field (YYYY-MM-DD)
function formatDateForInput(date) {
  return date.toISOString().split('T')[0];
}

// Format date and time for display
function formatDateTime(timestamp) {
  const date = new Date(timestamp);
  
  // Format time (13:45:30)
  const time = date.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    second: '2-digit',
    hour12: false
  });
  
  // Format date (Apr 7, 2025)
  const dateStr = date.toLocaleDateString('en-US', {
    month: 'short',
    day: 'numeric',
    year: 'numeric'
  });
  
  // Full format (Apr 7, 2025 13:45:30)
  const full = `${dateStr} ${time}`;
  
  return { time, date: dateStr, full };
}

// Format user string
function formatUser(user) {
  if (!user || user === 'N/A') {
    return '<span class="na-text">N/A</span>';
  }
  
  // Check if user has ID in parentheses
  if (user.includes('(')) {
    const [username, userId] = user.split('(');
    return `
      <div class="user-info">
        <span class="username">${username.trim()}</span>
        <span class="user-id">(${userId.replace(')', '')}</span>
      </div>
    `;
  }
  
  return user;
}

// Format details for display in table
function formatDetails(details) {
  if (!details) return '';
  
  // For error logs, show the error message
  if (details.error) {
    return `<span class="error-message">${details.error.split('\n')[0]}</span>`;
  }
  
  // For other logs, show the first property
  const firstKey = Object.keys(details)[0];
  if (firstKey) {
    return `<span class="detail-preview">${firstKey}: ${details[firstKey]}</span>`;
  }
  
  return '';
}

// Get row class based on log type
function getRowClass(type) {
  switch (type) {
    case 'errors':
      return 'log-row error-row';
    case 'moderation':
      return 'log-row moderation-row';
    case 'tickets':
      return 'log-row ticket-row';
    case 'commands':
      return 'log-row command-row';
    case 'settings':
      return 'log-row settings-row';
    default:
      return 'log-row';
  }
}

// Get event badge class
function getEventClass(type) {
  switch (type) {
    case 'errors':
      return 'error-badge';
    case 'moderation':
      return 'moderation-badge';
    case 'tickets':
      return 'ticket-badge';
    case 'commands':
    case 'info':
      return 'info-badge';
    case 'warning':
      return 'warning-badge';
    case 'settings':
      return 'settings-badge';
    default:
      return '';
  }
}

// Get icon for event type
function getEventIcon(event) {
  // Map event types to appropriate icons
  const iconMap = {
    'User Banned': 'fas fa-gavel',
    'User Muted': 'fas fa-volume-mute',
    'User Kicked': 'fas fa-user-slash',
    'User Unbanned': 'fas fa-user-check',
    'User Unmuted': 'fas fa-volume-up',
    'Messages Purged': 'fas fa-eraser',
    'Role Created': 'fas fa-plus-circle',
    'Role Deleted': 'fas fa-minus-circle',
    'Channel Created': 'fas fa-plus-square',
    'Channel Deleted': 'fas fa-minus-square',
    'Server Setting Updated': 'fas fa-cog',
    'Ticket Created': 'fas fa-ticket-alt',
    'Ticket Closed': 'fas fa-check-circle',
    'Blacklist Added': 'fas fa-ban',
    'Blacklist Removed': 'fas fa-user-check',
    'Command Used': 'fas fa-terminal',
    'Command Error': 'fas fa-exclamation-circle',
    'Error Occurred': 'fas fa-exclamation-triangle',
    'Fatal Error': 'fas fa-bomb',
    'Bounty Created': 'fas fa-coins',
    'Role Assigned': 'fas fa-user-tag',
    'Info': 'fas fa-info-circle',
    'Warning': 'fas fa-exclamation-circle',
    'Error': 'fas fa-exclamation-triangle'
  };
  
  return iconMap[event] || 'fas fa-info-circle';
}
</script>

<style>
/* Logs Page Specific Styles */
.logs-container {
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

/* Logs Header */
.logs-header {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.page-title {
  font-size: 2.2rem;
  font-weight: 700;
  margin: 0;
  color: var(--text-primary);
  line-height: 1.2;
  background: var(--gradient-primary);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.subtitle {
  font-size: 1.1rem;
  color: var(--text-secondary);
  margin: 0;
}

/* Search and Filters */
.logs-controls {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  margin-top: 1rem;
  justify-content: space-between;
  align-items: flex-start;
}

.search-filter {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
  flex: 1;
  min-width: 300px;
}

.filter-group {
  display: flex;
  gap: 0.75rem;
  flex-wrap: wrap;
}

.search-input {
  flex: 1;
  min-width: 200px;
  padding: 0.75rem 1rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  background-color: var(--background-light);
  color: var(--text-primary);
  font-size: 1rem;
  outline: none;
  transition: all 0.3s ease;
}

.search-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(156, 77, 255, 0.2);
}

.filter-select {
  padding: 0.75rem 1rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  background-color: var(--background-light);
  color: var(--text-primary);
  font-size: 1rem;
  outline: none;
  transition: all 0.3s ease;
  cursor: pointer;
}

.filter-select:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(156, 77, 255, 0.2);
}

.date-filter {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  flex-wrap: wrap;
}

.date-filter span {
  color: var(--text-secondary);
}

.date-input {
  padding: 0.75rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  background-color: var(--background-light);
  color: var(--text-primary);
  font-size: 0.9rem;
  outline: none;
  transition: all 0.3s ease;
}

.date-input:focus {
  border-color: var(--primary-color);
  box-shadow: 0 0 0 2px rgba(156, 77, 255, 0.2);
}

.logs-actions {
  display: flex;
  gap: 0.75rem;
  align-items: center;
}

/* Logs Stats */
.logs-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-bottom: 0.5rem;
}

.stat-card {
  display: flex;
  align-items: center;
  padding: 1.25rem;
  background-color: var(--background-light);
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  transition: all 0.3s ease;
}

.stat-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-medium);
}

.stat-icon {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 1rem;
  font-size: 1.5rem;
}

.stat-icon.moderation {
  background-color: rgba(156, 77, 255, 0.1);
  color: var(--primary-color);
}

.stat-icon.tickets {
  background-color: rgba(65, 225, 255, 0.1);
  color: var(--accent-color);
}

.stat-icon.commands {
  background-color: rgba(46, 213, 115, 0.1);
  color: var(--color-positive);
}

.stat-icon.errors {
  background-color: rgba(255, 77, 77, 0.1);
  color: var(--color-negative);
}

.stat-info {
  flex: 1;
}

.stat-info h3 {
  margin: 0;
  font-size: 1rem;
  color: var(--text-secondary);
}

.stat-count {
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--text-primary);
}

/* Logs Table */
.logs-table-container {
  background-color: var(--background-light);
  border-radius: var(--border-radius);
  overflow: hidden;
  position: relative;
  border: 1px solid var(--border-color);
  min-height: 400px;
}

.logs-table {
  width: 100%;
  border-collapse: collapse;
}

.logs-table th {
  position: sticky;
  top: 0;
  background-color: var(--background-medium);
  color: var(--text-primary);
  font-weight: 600;
  text-align: left;
  padding: 1rem;
  border-bottom: 1px solid var(--border-color);
  user-select: none;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.logs-table th:hover {
  background-color: rgba(156, 77, 255, 0.05);
}

.logs-table th.sort-asc::after {
  content: ' ↑';
  color: var(--primary-color);
}

.logs-table th.sort-desc::after {
  content: ' ↓';
  color: var(--primary-color);
}

.logs-table td {
  padding: 0.75rem 1rem;
  border-bottom: 1px solid var(--border-color);
  color: var(--text-primary);
}

.logs-table tr:last-child td {
  border-bottom: none;
}

.logs-table tr:hover {
  background-color: rgba(156, 77, 255, 0.05);
}

/* Row styles based on log type */
.log-row.error-row {
  background-color: rgba(255, 77, 77, 0.05);
}

.log-row.error-row:hover {
  background-color: rgba(255, 77, 77, 0.1);
}

.log-row.moderation-row {
  background-color: rgba(156, 77, 255, 0.03);
}

.log-row.ticket-row {
  background-color: rgba(65, 225, 255, 0.03);
}

.log-row.command-row {
  background-color: rgba(46, 213, 115, 0.03);
}

/* Table content styles */
.log-time {
  display: flex;
  flex-direction: column;
  line-height: 1.3;
}

.log-time .time {
  font-weight: 600;
  font-family: 'JetBrains Mono', monospace;
}

.log-time .date {
  font-size: 0.8rem;
  color: var(--text-secondary);
}

.event-badge {
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.35rem 0.7rem;
  border-radius: 50px;
  font-size: 0.85rem;
  font-weight: 500;
  white-space: nowrap;
}

.moderation-badge {
  background-color: rgba(156, 77, 255, 0.1);
  color: var(--primary-color);
}

.ticket-badge {
  background-color: rgba(65, 225, 255, 0.1);
  color: var(--accent-color);
}

.info-badge {
  background-color: rgba(46, 213, 115, 0.1);
  color: var(--color-positive);
}

.error-badge {
  background-color: rgba(255, 77, 77, 0.1);
  color: var(--color-negative);
}

.warning-badge {
  background-color: rgba(255, 192, 0, 0.1);
  color: var(--color-warning);
}

.settings-badge {
  background-color: rgba(101, 119, 255, 0.1);
  color: #6577ff;
}

.user-info {
  display: flex;
  flex-direction: column;
  line-height: 1.3;
}

.user-info .username {
  font-weight: 500;
}

.user-info .user-id {
  font-size: 0.8rem;
  color: var(--text-secondary);
  font-family: 'JetBrains Mono', monospace;
}

.na-text {
  font-style: italic;
  color: var(--text-muted);
}

.error-message {
  color: var(--color-negative);
  font-weight: 500;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 250px;
  display: block;
}

.detail-preview {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: 250px;
  display: block;
  font-family: 'JetBrains Mono', monospace;
  font-size: 0.9rem;
}

.action-btn {
  background: transparent;
  border: none;
  color: var(--text-secondary);
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 4px;
  transition: all 0.2s ease;
}

.action-btn:hover {
  background-color: var(--background-light);
  color: var(--primary-color);
}

/* Table column widths */
.timestamp-column {
  width: 150px;
}

.event-column {
  width: 180px;
}

.user-column,
.executor-column {
  width: 180px;
}

.actions-column {
  width: 60px;
  text-align: center;
}

/* Empty and Loading States */
.empty-state,
.loading-state {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  background-color: var(--background-light);
  padding: 2rem;
}

.empty-icon {
  font-size: 3rem;
  color: var(--text-muted);
  margin-bottom: 1rem;
}

.empty-state h3 {
  margin: 0 0 0.5rem;
  color: var(--text-primary);
}

.empty-state p {
  color: var(--text-secondary);
  margin: 0;
}

.spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(156, 77, 255, 0.1);
  border-radius: 50%;
  border-top-color: var(--primary-color);
  animation: spin 1s ease-in-out infinite;
  margin-bottom: 1rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Pagination */
.pagination {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 1.5rem;
}

.pagination-btn {
  background-color: var(--background-light);
  border: 1px solid var(--border-color);
  color: var(--text-primary);
  width: 36px;
  height: 36px;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--border-radius);
  cursor: pointer;
  transition: all 0.2s ease;
}

.pagination-btn:hover:not(:disabled) {
  background-color: var(--primary-color);
  color: white;
}

.pagination-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.pagination-info {
  margin: 0 0.5rem;
  color: var(--text-secondary);
  font-size: 0.9rem;
}

.pagination-size {
  margin-left: 1.5rem;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: var(--text-secondary);
  font-size: 0.9rem;
}

.page-size-select {
  padding: 0.35rem 0.5rem;
  border-radius: var(--border-radius);
  border: 1px solid var(--border-color);
  background-color: var(--background-light);
  color: var(--text-primary);
  outline: none;
  cursor: pointer;
  min-width: 70px;
}

/* Modal Styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: auto;
  background-color: rgba(0, 0, 0, 0.5);
  animation: fadeIn 0.3s;
}

.modal-content {
  background-color: var(--background-medium);
  margin: 2rem auto;
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-large);
  width: 90%;
  max-width: 800px;
  max-height: 80vh;
  display: flex;
  flex-direction: column;
  animation: slideDown 0.3s;
  border: 1px solid var(--border-color);
  overflow: hidden;
}

.modal-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1.25rem 1.5rem;
  border-bottom: 1px solid var(--border-color);
}

.modal-title {
  margin: 0;
  font-size: 1.5rem;
  color: var(--text-primary);
}

.modal-close {
  background: transparent;
  border: none;
  color: var(--text-secondary);
  font-size: 1.25rem;
  cursor: pointer;
  padding: 0.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
}

.modal-close:hover {
  color: var(--text-primary);
}

.modal-body {
  padding: 1.5rem;
  overflow-y: auto;
  flex: 1;
}

.log-detail-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.log-detail-type .badge {
  font-size: 1rem;
  padding: 0.5rem 1rem;
}

.log-detail-time {
  font-size: 1rem;
  color: var(--text-secondary);
  font-family: 'JetBrains Mono', monospace;
}

.log-detail-info {
  display: flex;
  flex-wrap: wrap;
  gap: 1.25rem;
}

.detail-group {
  flex: 1 1 calc(50% - 1.25rem);
  min-width: 250px;
}

.detail-group.full-width {
  flex: 1 1 100%;
}

.detail-label {
  font-weight: 600;
  margin-bottom: 0.5rem;
  color: var(--text-primary);
}

.detail-value {
  font-family: 'JetBrains Mono', monospace;
  background-color: var(--background-dark);
  padding: 0.75rem 1rem;
  border-radius: var(--border-radius);
  color: var(--text-secondary);
  word-break: break-all;
  max-height: 100px;
  overflow-y: auto;
}

.detail-json,
.detail-stack {
  font-family: 'JetBrains Mono', monospace;
  background-color: var(--background-dark);
  padding: 1rem;
  border-radius: var(--border-radius);
  color: var(--text-secondary);
  white-space: pre-wrap;
  overflow-x: auto;
  margin: 0;
  max-height: 200px;
  overflow-y: auto;
}

.detail-stack {
  color: var(--color-negative);
}

.modal-footer {
  display: flex;
  align-items: center;
  justify-content: flex-end;
  gap: 1rem;
  padding: 1.25rem 1.5rem;
  border-top: 1px solid var(--border-color);
}

body.modal-open {
  overflow: hidden;
}

/* Responsive Adjustments */
@media (max-width: 992px) {
  .filter-group {
    flex-direction: column;
    width: 100%;
  }
  
  .logs-actions {
    margin-top: 0.5rem;
  }
}

@media (max-width: 768px) {
  .logs-stats {
    grid-template-columns: repeat(2, 1fr);
  }
  
  .timestamp-column {
    width: 100px;
  }
  
  .event-column {
    width: 150px;
  }
  
  .user-column,
  .executor-column {
    width: 130px;
  }
  
  .pagination {
    flex-wrap: wrap;
    justify-content: center;
  }
  
  .pagination-size {
    margin-top: 0.75rem;
    margin-left: 0;
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 576px) {
  .logs-stats {
    grid-template-columns: 1fr;
  }
  
  .logs-table {
    display: block;
    overflow-x: auto;
  }
  
  .modal-content {
    width: 95%;
    margin: 1rem auto;
  }
}
</style>