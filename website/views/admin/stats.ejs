<div class="stats-container">
  <!-- Command Usage Stats -->
  <div class="card">
    <div class="card-header">
      <h5 class="card-title">Command Usage Statistics</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-8">
          <canvas id="commandUsageChart" height="300"></canvas>
        </div>
        <div class="col-md-4">
          <div class="stat-list" id="commandStatsList">
            <div class="stat-item">
              <span class="stat-label">help</span>
              <span class="stat-value">0</span>
              <div class="stat-bar" style="width: 0%;"></div>
            </div>
            
            <div class="stat-item">
              <span class="stat-label">emoji</span>
              <span class="stat-value">0</span>
              <div class="stat-bar" style="width: 0%;"></div>
            </div>
            
            <div class="stat-item">
              <span class="stat-label">role</span>
              <span class="stat-value">0</span>
              <div class="stat-bar" style="width: 0%;"></div>
            </div>
            
            <div class="stat-item">
              <span class="stat-label">whos</span>
              <span class="stat-value">0</span>
              <div class="stat-bar" style="width: 0%;"></div>
            </div>
            
            <div class="stat-item">
              <span class="stat-label">ban</span>
              <span class="stat-value">0</span>
              <div class="stat-bar" style="width: 0%;"></div>
            </div>
            
            <div class="stat-item">
              <span class="stat-label">kick</span>
              <span class="stat-value">0</span>
              <div class="stat-bar" style="width: 0%;"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Server Stats -->
  <div class="row mt-4">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">CPU Usage Over Time</h5>
        </div>
        <div class="card-body">
          <canvas id="cpuChart" height="250"></canvas>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">Memory Usage Over Time</h5>
        </div>
        <div class="card-body">
          <canvas id="memoryChart" height="250"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <!-- User Activity Stats -->
  <div class="card mt-4">
    <div class="card-header">
      <h5 class="card-title">Usage Statistics</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-3">
          <div class="stats-card">
            <div class="stats-card-header">
              <i class="fas fa-users"></i>
              <h5>Total Users</h5>
            </div>
            <div class="stats-card-value" id="totalUsersStat">0</div>
          </div>
        </div>
        
        <div class="col-md-3">
          <div class="stats-card">
            <div class="stats-card-header">
              <i class="fas fa-server"></i>
              <h5>Total Servers</h5>
            </div>
            <div class="stats-card-value" id="totalServersStat">0</div>
          </div>
        </div>
        
        <div class="col-md-3">
          <div class="stats-card">
            <div class="stats-card-header">
              <i class="fas fa-hashtag"></i>
              <h5>Total Channels</h5>
            </div>
            <div class="stats-card-value" id="totalChannelsStat">0</div>
          </div>
        </div>
        
        <div class="col-md-3">
          <div class="stats-card">
            <div class="stats-card-header">
              <i class="fas fa-terminal"></i>
              <h5>Total Commands</h5>
            </div>
            <div class="stats-card-value" id="totalCommandsStat">0</div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Performance -->
  <div class="card mt-4">
    <div class="card-header">
      <h5 class="card-title">System Performance</h5>
    </div>
    <div class="card-body">
      <div class="row">
        <div class="col-md-6">
          <h6>CPU Usage</h6>
          <div class="progress-stat">
            <div class="progress-info">
              <span class="progress-label">Current Usage</span>
              <span class="progress-percentage" id="cpuPercentage">0%</span>
            </div>
            <div class="progress">
              <div class="progress-bar" id="cpuProgressBar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
          </div>
          
          <div class="system-stats">
            <div class="stat-row">
              <span class="stat-title">CPU Count:</span>
              <span class="stat-data" id="cpuCount">-</span>
            </div>
            <div class="stat-row">
              <span class="stat-title">Load Average:</span>
              <span class="stat-data" id="loadAverage">-</span>
            </div>
          </div>
        </div>
        
        <div class="col-md-6">
          <h6>Memory Usage</h6>
          <div class="progress-stat">
            <div class="progress-info">
              <span class="progress-label">Current Usage</span>
              <span class="progress-percentage" id="memoryPercentage">0%</span>
            </div>
            <div class="progress">
              <div class="progress-bar" id="memoryProgressBar" role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
          </div>
          
          <div class="system-stats">
            <div class="stat-row">
              <span class="stat-title">Total Memory:</span>
              <span class="stat-data" id="totalMemory">-</span>
            </div>
            <div class="stat-row">
              <span class="stat-title">Used Memory:</span>
              <span class="stat-data" id="usedMemory">-</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize command usage chart
  const commandCtx = document.getElementById('commandUsageChart').getContext('2d');
  const commandUsageChart = new Chart(commandCtx, {
    type: 'bar',
    data: {
      labels: ['help', 'emoji', 'role', 'whos', 'ban', 'kick'],
      datasets: [{
        label: 'Times Used',
        data: [0, 0, 0, 0, 0, 0],
        backgroundColor: [
          '#5865F2',
          '#57F287',
          '#FEE75C',
          '#EB459E',
          '#ED4245',
          '#9B59B6'
        ],
        borderColor: [
          '#4752C4',
          '#45C16C',
          '#EED84A',
          '#D33D8C',
          '#D63C3F',
          '#8E44AD'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: false
        },
        title: {
          display: true,
          text: 'Command Usage Distribution'
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      }
    }
  });

  // Initialize the time series charts for CPU and Memory
  // We'll use fixed timestamps for now (last 10 minutes with 1-minute intervals)
  const timeLabels = Array.from({length: 10}, (_, i) => `${10-i} min ago`);
  
  // CPU Chart
  const cpuCtx = document.getElementById('cpuChart').getContext('2d');
  const cpuChart = new Chart(cpuCtx, {
    type: 'line',
    data: {
      labels: timeLabels,
      datasets: [{
        label: 'CPU Usage (%)',
        data: Array(10).fill(0),
        borderColor: '#5865F2',
        backgroundColor: 'rgba(88, 101, 242, 0.1)',
        borderWidth: 2,
        tension: 0.4,
        fill: true
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          ticks: {
            callback: function(value) {
              return value + '%';
            }
          }
        }
      }
    }
  });
  
  // Memory Chart
  const memoryCtx = document.getElementById('memoryChart').getContext('2d');
  const memoryChart = new Chart(memoryCtx, {
    type: 'line',
    data: {
      labels: timeLabels,
      datasets: [{
        label: 'Memory Usage (%)',
        data: Array(10).fill(0),
        borderColor: '#57F287',
        backgroundColor: 'rgba(87, 242, 135, 0.1)',
        borderWidth: 2,
        tension: 0.4,
        fill: true
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          ticks: {
            callback: function(value) {
              return value + '%';
            }
          }
        }
      }
    }
  });

  // Arrays to store time series data
  let cpuData = Array(10).fill(0);
  let memoryData = Array(10).fill(0);

  // Format bytes to human-readable format
  function formatBytes(bytes, decimals = 2) {
    if (bytes === 0) return '0 Bytes';
    
    const k = 1024;
    const dm = decimals < 0 ? 0 : decimals;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    
    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
  }

  // Update stats on WebSocket data
  socket.addEventListener('message', function(event) {
    try {
      const data = JSON.parse(event.data);
      
      // Update command usage stats
      if (data.commandUsage) {
        const commands = Object.keys(data.commandUsage);
        const usages = commands.map(cmd => data.commandUsage[cmd]);
        const totalUsage = usages.reduce((a, b) => a + b, 0);
        
        // Update chart
        commandUsageChart.data.labels = commands;
        commandUsageChart.data.datasets[0].data = usages;
        commandUsageChart.update();
        
        // Update stat list
        const commandStatsList = document.getElementById('commandStatsList');
        commandStatsList.innerHTML = '';
        
        commands.forEach(cmd => {
          const count = data.commandUsage[cmd];
          const percentage = totalUsage > 0 ? (count / totalUsage * 100) : 0;
          
          const statItem = document.createElement('div');
          statItem.className = 'stat-item';
          statItem.innerHTML = `
            <span class="stat-label">${cmd}</span>
            <span class="stat-value">${count}</span>
            <div class="stat-bar" style="width: ${percentage}%;"></div>
          `;
          
          commandStatsList.appendChild(statItem);
        });
      }
      
      // Update CPU and Memory time series
      cpuData.shift();
      cpuData.push(data.cpu);
      cpuChart.data.datasets[0].data = cpuData;
      cpuChart.update();
      
      memoryData.shift();
      memoryData.push(data.memory);
      memoryChart.data.datasets[0].data = memoryData;
      memoryChart.update();
      
      // Update usage statistics
      document.getElementById('totalUsersStat').textContent = data.users.toLocaleString();
      document.getElementById('totalServersStat').textContent = data.servers.toLocaleString();
      document.getElementById('totalChannelsStat').textContent = data.channels.toLocaleString();
      document.getElementById('totalCommandsStat').textContent = data.commands.toLocaleString();
      
      // Update system performance
      document.getElementById('cpuPercentage').textContent = `${data.cpu}%`;
      document.getElementById('cpuProgressBar').style.width = `${data.cpu}%`;
      document.getElementById('cpuCount').textContent = data.cpuCount;
      document.getElementById('loadAverage').textContent = data.loadAverage.map(v => v.toFixed(2)).join(', ');
      
      document.getElementById('memoryPercentage').textContent = `${data.memory}%`;
      document.getElementById('memoryProgressBar').style.width = `${data.memory}%`;
      document.getElementById('totalMemory').textContent = formatBytes(data.totalMemory);
      document.getElementById('usedMemory').textContent = formatBytes(data.usedMemory);
      
    } catch (error) {
      console.error('Error parsing WebSocket message:', error);
    }
  });
</script>
