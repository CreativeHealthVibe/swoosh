<%- include('../partials/admin-header-fixed') %>

<div class="settings-container">
  <div class="page-header">
    <div class="header-content">
      <div class="header-title">
        <h1 class="gradient-text"><i class="fas fa-cog"></i> Bot Settings</h1>
        <p>Configure and customize your bot's behavior and appearance</p>
      </div>
      <div class="header-actions">
        <div class="status-indicator">
          <div class="status-dot online"></div>
          <span>Bot Online</span>
        </div>
      </div>
    </div>
  </div>

  <% if (messages && messages.success) { %>
  <div class="notification success">
    <div class="notification-icon">
      <i class="fas fa-check-circle"></i>
    </div>
    <div class="notification-content">
      <%= messages.success %>
    </div>
    <button class="notification-close" onclick="this.parentElement.remove()">
      <i class="fas fa-times"></i>
    </button>
  </div>
  <% } %>
  
  <% if (messages && messages.error) { %>
  <div class="notification error">
    <div class="notification-icon">
      <i class="fas fa-exclamation-circle"></i>
    </div>
    <div class="notification-content">
      <%= messages.error %>
    </div>
    <button class="notification-close" onclick="this.parentElement.remove()">
      <i class="fas fa-times"></i>
    </button>
  </div>
  <% } %>

  <div class="content-grid">
    <div class="settings-nav">
      <div class="nav-header">
        <h2>Settings</h2>
      </div>
      <ul class="nav-list">
        <li class="active" data-tab="general">
          <i class="fas fa-sliders-h"></i>
          <span>General</span>
        </li>
        <li data-tab="logging">
          <i class="fas fa-file-alt"></i>
          <span>Logging</span>
        </li>
        <li data-tab="tickets">
          <i class="fas fa-ticket-alt"></i>
          <span>Tickets</span>
        </li>
        <li data-tab="admin">
          <i class="fas fa-user-shield"></i>
          <span>Admin Access</span>
        </li>
        <li data-tab="validation">
          <i class="fas fa-check-circle"></i>
          <span>Validation</span>
        </li>
        <li class="premium" data-tab="premium">
          <i class="fas fa-crown"></i>
          <span>Premium</span>
        </li>
      </ul>
    </div>
    
    <div class="settings-content">
      <!-- General Settings -->
      <div class="tab-content active" id="general">
        <div class="glass-card">
          <div class="card-header">
            <h2>General Settings</h2>
            <div class="card-icon">
              <i class="fas fa-sliders-h"></i>
            </div>
          </div>
          <div class="card-body">
            <form id="generalForm" action="/admin/settings/update" method="POST">
              <div class="settings-section">
                <h3>Bot Appearance</h3>
                
                <div class="form-row">
                  <div class="form-group half">
                    <label for="prefix">Command Prefix</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-terminal"></i>
                      </div>
                      <input type="text" class="form-control" id="prefix" name="prefix" value="<%= config.prefix %>" maxlength="3">
                    </div>
                    <div class="input-hint">Character that precedes all commands (e.g., "!")</div>
                  </div>
                  
                  <div class="form-group half">
                    <label for="embedColor">Embed Color</label>
                    <div class="color-picker-wrapper">
                      <input type="color" id="embedColor" name="embedColor" value="<%= config.embedColor %>">
                      <div class="color-preview" style="background-color: <%= config.embedColor %>"></div>
                    </div>
                    <div class="input-hint">Color used in message embeds</div>
                  </div>
                </div>
              </div>
              
              <div class="settings-section">
                <h3>Bot Status</h3>
                
                <div class="form-row">
                  <div class="form-group third">
                    <label for="statusType">Status Type</label>
                    <div class="select-wrapper">
                      <select class="form-control" id="statusType" name="statusType">
                        <option value="PLAYING" <%= config.activityType === 'PLAYING' ? 'selected' : '' %>>Playing</option>
                        <option value="LISTENING" <%= config.activityType === 'LISTENING' ? 'selected' : '' %>>Listening to</option>
                        <option value="WATCHING" <%= config.activityType === 'WATCHING' ? 'selected' : '' %>>Watching</option>
                        <option value="COMPETING" <%= config.activityType === 'COMPETING' ? 'selected' : '' %>>Competing in</option>
                      </select>
                      <div class="select-arrow"><i class="fas fa-chevron-down"></i></div>
                    </div>
                  </div>
                  
                  <div class="form-group two-thirds">
                    <label for="statusText">Status Text</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-comment-alt"></i>
                      </div>
                      <input type="text" class="form-control" id="statusText" name="statusText" value="<%= config.activityName %>" placeholder="e.g., help commands">
                    </div>
                    <div class="input-hint">Will show as "Playing/Watching/etc [your text]"</div>
                  </div>
                </div>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn primary-btn glow-btn">
                  <i class="fas fa-save"></i> Save General Settings
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Logging Settings -->
      <div class="tab-content" id="logging">
        <div class="glass-card">
          <div class="card-header">
            <h2>Logging Settings</h2>
            <div class="card-icon">
              <i class="fas fa-file-alt"></i>
            </div>
          </div>
          <div class="card-body">
            <form id="loggingForm" action="/admin/settings/update-logging" method="POST">
              <div class="settings-section">
                <h3>Main Logging Channel</h3>
                
                <div class="form-row">
                  <div class="form-group full">
                    <label for="logChannelId">Primary Log Channel</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-hashtag"></i>
                      </div>
                      <input type="text" class="form-control" id="logChannelId" name="logChannelId" value="<%= config.logChannelId %>" placeholder="Enter channel ID">
                    </div>
                    <div class="input-hint">Main channel for bot logs and notifications</div>
                  </div>
                </div>
              </div>
              
              <div class="settings-section">
                <h3>Specialized Logging Channels</h3>
                <p class="section-description">Configure separate channels for different types of logs</p>
                
                <div class="channel-grid">
                  <div class="channel-item">
                    <div class="channel-icon">
                      <i class="fas fa-trash-alt"></i>
                    </div>
                    <div class="channel-input">
                      <label for="deletedMessages">Deleted Messages</label>
                      <input type="text" class="form-control" id="deletedMessages" name="deletedMessages" value="<%= config.loggingChannels.deletedMessages %>" placeholder="Channel ID">
                    </div>
                  </div>
                  
                  <div class="channel-item">
                    <div class="channel-icon">
                      <i class="fas fa-edit"></i>
                    </div>
                    <div class="channel-input">
                      <label for="editedMessages">Edited Messages</label>
                      <input type="text" class="form-control" id="editedMessages" name="editedMessages" value="<%= config.loggingChannels.editedMessages %>" placeholder="Channel ID">
                    </div>
                  </div>
                  
                  <div class="channel-item">
                    <div class="channel-icon">
                      <i class="fas fa-user-plus"></i>
                    </div>
                    <div class="channel-input">
                      <label for="memberJoin">Member Joins/Leaves</label>
                      <input type="text" class="form-control" id="memberJoin" name="memberJoin" value="<%= config.loggingChannels.memberJoin %>" placeholder="Channel ID">
                    </div>
                  </div>
                  
                  <div class="channel-item">
                    <div class="channel-icon">
                      <i class="fas fa-gavel"></i>
                    </div>
                    <div class="channel-input">
                      <label for="moderationActions">Moderation Actions</label>
                      <input type="text" class="form-control" id="moderationActions" name="moderationActions" value="<%= config.loggingChannels.moderationActions %>" placeholder="Channel ID">
                    </div>
                  </div>
                  
                  <div class="channel-item">
                    <div class="channel-icon">
                      <i class="fas fa-terminal"></i>
                    </div>
                    <div class="channel-input">
                      <label for="commandUsage">Command Usage</label>
                      <input type="text" class="form-control" id="commandUsage" name="commandUsage" value="<%= config.loggingChannels.commandUsage %>" placeholder="Channel ID">
                    </div>
                  </div>
                  
                  <div class="channel-item">
                    <div class="channel-icon">
                      <i class="fas fa-heartbeat"></i>
                    </div>
                    <div class="channel-input">
                      <label for="botStatus">Bot Status</label>
                      <input type="text" class="form-control" id="botStatus" name="botStatus" value="<%= config.loggingChannels.botStatus %>" placeholder="Channel ID">
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn primary-btn glow-btn">
                  <i class="fas fa-save"></i> Save Logging Settings
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Tickets Settings -->
      <div class="tab-content" id="tickets">
        <div class="glass-card">
          <div class="card-header">
            <h2>Ticket System Settings</h2>
            <div class="card-icon">
              <i class="fas fa-ticket-alt"></i>
            </div>
          </div>
          <div class="card-body">
            <form id="ticketsForm" action="/admin/settings/update-tickets" method="POST">
              <div class="settings-section">
                <h3>Ticket Configuration</h3>
                
                <div class="form-row">
                  <div class="form-group full">
                    <label for="ticketCategory">Ticket Category</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-folder"></i>
                      </div>
                      <input type="text" class="form-control" id="ticketCategory" name="ticketCategory" value="<%= config.ticketCategory %>" placeholder="Category ID">
                    </div>
                    <div class="input-hint">Category where ticket channels will be created</div>
                  </div>
                </div>
                
                <div class="form-row">
                  <div class="form-group half">
                    <label for="ticketTranscripts">Transcript Channel</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-file-alt"></i>
                      </div>
                      <input type="text" class="form-control" id="ticketTranscripts" name="ticketTranscripts" value="<%= config.loggingChannels.ticketTranscripts %>" placeholder="Channel ID">
                    </div>
                    <div class="input-hint">Channel for storing ticket transcripts</div>
                  </div>
                  
                  <div class="form-group half">
                    <label for="maxTicketsPerUser">Max Tickets Per User</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-list-ol"></i>
                      </div>
                      <input type="number" class="form-control" id="maxTicketsPerUser" name="maxTicketsPerUser" value="<%= config.maxTicketsPerUser || 3 %>" min="1" max="10">
                    </div>
                    <div class="input-hint">Maximum concurrent tickets per user</div>
                  </div>
                </div>
              </div>
              
              <div class="settings-section">
                <h3>Ticket Types</h3>
                <p class="section-description">Configure the types of tickets users can create</p>
                
                <div class="ticket-types">
                  <% 
                  // Ensure ticketTypes is an array
                  const defaultTypes = ['Support', 'Report', 'Suggestion', 'Other'];
                  let ticketTypesArray = defaultTypes;
                  
                  // Use config.ticketTypes if it's an array, otherwise use default
                  if (config.ticketTypes && Array.isArray(config.ticketTypes)) {
                    ticketTypesArray = config.ticketTypes;
                  }
                  
                  // Loop through the array
                  for(let i = 0; i < ticketTypesArray.length; i++) { 
                    const type = ticketTypesArray[i];
                  %>
                    <div class="ticket-type-item">
                      <div class="input-group">
                        <div class="input-group-icon">
                          <% if (i === 0) { %>
                            <i class="fas fa-question-circle"></i>
                          <% } else if (i === 1) { %>
                            <i class="fas fa-flag"></i>
                          <% } else if (i === 2) { %>
                            <i class="fas fa-lightbulb"></i>
                          <% } else { %>
                            <i class="fas fa-ticket-alt"></i>
                          <% } %>
                        </div>
                        <input type="text" class="form-control" name="ticketType<%= i %>" value="<%= type %>" placeholder="Ticket type">
                      </div>
                      <% if (i > 0) { %>
                        <button type="button" class="action-btn delete remove-type" disabled>
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      <% } %>
                    </div>
                  <% } %>
                </div>
                <button type="button" class="btn secondary-btn add-type-btn" disabled>
                  <i class="fas fa-plus-circle"></i> Add Ticket Type
                </button>
                <div class="input-hint center-hint">Ticket type management will be available in a future update</div>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn primary-btn glow-btn">
                  <i class="fas fa-save"></i> Save Ticket Settings
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Admin Access Settings -->
      <div class="tab-content" id="admin">
        <div class="glass-card">
          <div class="card-header">
            <h2>Admin Access Settings</h2>
            <div class="card-icon">
              <i class="fas fa-user-shield"></i>
            </div>
          </div>
          <div class="card-body">
            <div class="settings-section">
              <h3>Admin Users</h3>
              <p class="section-description">Users with full access to the admin dashboard</p>
              
              <div class="admin-users">
                <% if (Array.isArray(config.adminUserIds) && config.adminUserIds.length > 0) { %>
                  <% for (const userId of config.adminUserIds) { %>
                    <div class="admin-user-item">
                      <div class="admin-user-info">
                        <div class="user-avatar">
                          <i class="fas fa-user"></i>
                        </div>
                        <div class="user-details">
                          <div class="user-id"><%= userId %></div>
                          <div class="user-role">Full Administrator</div>
                        </div>
                      </div>
                      <form action="/admin/users/remove" method="POST" class="inline-form">
                        <input type="hidden" name="userId" value="<%= userId %>">
                        <button type="submit" class="action-btn delete" onclick="return confirm('Are you sure you want to remove this admin user? They will lose access to the dashboard.')" title="Remove admin">
                          <i class="fas fa-trash-alt"></i>
                        </button>
                      </form>
                    </div>
                  <% } %>
                <% } else { %>
                  <div class="empty-state">
                    <div class="empty-icon">
                      <i class="fas fa-user-shield"></i>
                    </div>
                    <h3>No Admin Users</h3>
                    <p>Add administrators using the form below</p>
                  </div>
                <% } %>
              </div>
              
              <div class="add-admin-section">
                <h3>Add New Admin User</h3>
                <form action="/admin/users/add" method="POST">
                  <div class="form-row">
                    <div class="form-group half">
                      <label for="userId">Discord User ID</label>
                      <div class="input-group">
                        <div class="input-group-icon">
                          <i class="fas fa-id-card"></i>
                        </div>
                        <input type="text" class="form-control" id="userId" name="userId" placeholder="Enter Discord ID" pattern="^\d{17,19}$" required>
                      </div>
                      <div class="input-hint">User's Discord ID (17-19 digits)</div>
                    </div>
                    
                    <div class="form-group half">
                      <label for="comment">User Description</label>
                      <div class="input-group">
                        <div class="input-group-icon">
                          <i class="fas fa-user-tag"></i>
                        </div>
                        <input type="text" class="form-control" id="comment" name="comment" placeholder="e.g. Moderator, Developer" required>
                      </div>
                      <div class="input-hint">Description or role of this administrator</div>
                    </div>
                  </div>
                  
                  <div class="form-actions">
                    <button type="submit" class="btn primary-btn">
                      <i class="fas fa-plus-circle"></i> Add Admin User
                    </button>
                  </div>
                </form>
              </div>
            </div>
            
            <div class="settings-section">
              <h3>Staff Roles</h3>
              <p class="section-description">Discord roles that have access to certain bot commands</p>
              
              <div class="staff-roles">
                <% if (Array.isArray(config.staffRoles) && config.staffRoles.length > 0) { %>
                  <% config.staffRoles.forEach(role => { %>
                    <div class="role-tag">
                      <i class="fas fa-user-tag"></i>
                      <span><%= role %></span>
                      <button class="role-remove" disabled>
                        <i class="fas fa-times"></i>
                      </button>
                    </div>
                  <% }); %>
                <% } else { %>
                  <div class="empty-state small-empty">
                    <div class="empty-icon">
                      <i class="fas fa-tags"></i>
                    </div>
                    <p>No staff roles configured</p>
                  </div>
                <% } %>
              </div>
              
              <div class="add-role-form">
                <div class="form-row">
                  <div class="form-group three-fourths">
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-tag"></i>
                      </div>
                      <input type="text" class="form-control" placeholder="Add role by ID" disabled>
                    </div>
                  </div>
                  <div class="form-group fourth">
                    <button class="btn secondary-btn" disabled>
                      <i class="fas fa-plus"></i> Add
                    </button>
                  </div>
                </div>
                <div class="input-hint center-hint">Staff role management will be implemented in a future update</div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Validation Settings -->
      <div class="tab-content" id="validation">
        <div class="glass-card">
          <div class="card-header">
            <h2>Validation Settings</h2>
            <div class="card-icon">
              <i class="fas fa-check-circle"></i>
            </div>
          </div>
          <div class="card-body">
            <form id="validationForm" action="/admin/settings/update-validation" method="POST">
              <div class="settings-section">
                <h3>Bounty System</h3>
                <p class="section-description">Configure limits for the bounty system</p>
                
                <div class="form-row">
                  <div class="form-group half">
                    <label for="bountyMin">Minimum Bounty</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-coins"></i>
                      </div>
                      <input type="number" class="form-control" id="bountyMin" name="bountyMin" value="<%= config.validation && config.validation.bountyMin ? config.validation.bountyMin : 10 %>" min="1">
                    </div>
                    <div class="input-hint">Minimum amount allowed for bounties</div>
                  </div>
                  
                  <div class="form-group half">
                    <label for="bountyMax">Maximum Bounty</label>
                    <div class="input-group">
                      <div class="input-group-icon">
                        <i class="fas fa-coins"></i>
                      </div>
                      <input type="number" class="form-control" id="bountyMax" name="bountyMax" value="<%= config.validation && config.validation.bountyMax ? config.validation.bountyMax : 1000 %>" min="100">
                    </div>
                    <div class="input-hint">Maximum amount allowed for bounties</div>
                  </div>
                </div>
              </div>
              
              <div class="settings-section">
                <h3>Message Limits</h3>
                <p class="section-description">Configure message length limitations</p>
                
                <div class="limits-grid">
                  <div class="limit-item">
                    <div class="limit-icon">
                      <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div class="limit-input">
                      <label for="maxWarningLength">Warning Reason</label>
                      <input type="number" class="form-control" id="maxWarningLength" name="maxWarningLength" value="<%= config.validation && config.validation.maxWarningLength ? config.validation.maxWarningLength : 100 %>" min="50" max="500">
                      <div class="input-hint">Max characters</div>
                    </div>
                  </div>
                  
                  <div class="limit-item">
                    <div class="limit-icon">
                      <i class="fas fa-ticket-alt"></i>
                    </div>
                    <div class="limit-input">
                      <label for="maxTicketLength">Ticket Subject</label>
                      <input type="number" class="form-control" id="maxTicketLength" name="maxTicketLength" value="<%= config.validation && config.validation.maxTicketLength ? config.validation.maxTicketLength : 100 %>" min="50" max="200">
                      <div class="input-hint">Max characters</div>
                    </div>
                  </div>
                  
                  <div class="limit-item">
                    <div class="limit-icon">
                      <i class="fas fa-tag"></i>
                    </div>
                    <div class="limit-input">
                      <label for="maxRoleNameLength">Role Names</label>
                      <input type="number" class="form-control" id="maxRoleNameLength" name="maxRoleNameLength" value="<%= config.validation && config.validation.maxRoleNameLength ? config.validation.maxRoleNameLength : 30 %>" min="10" max="100">
                      <div class="input-hint">Max characters</div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn primary-btn glow-btn">
                  <i class="fas fa-save"></i> Save Validation Settings
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      
      <!-- Premium Features Tab -->
      <div class="tab-content" id="premium">
        <div class="glass-card premium-card">
          <div class="card-header">
            <h2>Premium Features</h2>
            <div class="card-icon premium-icon-header">
              <i class="fas fa-crown"></i>
            </div>
            <div class="premium-badge">Premium Only</div>
          </div>
          <div class="card-body">
            <div class="premium-content">
              <div class="premium-hero">
                <div class="premium-icon">
                  <i class="fas fa-crown"></i>
                </div>
                <h3>Unlock Premium Features</h3>
                <p>Get access to advanced features by upgrading to SWOOSH Premium</p>
                
                <div class="premium-features">
                  <div class="feature-item">
                    <div class="feature-icon">
                      <i class="fas fa-door-open"></i>
                    </div>
                    <div class="feature-text">Custom welcome messages</div>
                  </div>
                  
                  <div class="feature-item">
                    <div class="feature-icon">
                      <i class="fas fa-shield-alt"></i>
                    </div>
                    <div class="feature-text">Advanced automod settings</div>
                  </div>
                  
                  <div class="feature-item">
                    <div class="feature-icon">
                      <i class="fas fa-thumbs-up"></i>
                    </div>
                    <div class="feature-text">Role reaction system</div>
                  </div>
                  
                  <div class="feature-item">
                    <div class="feature-icon">
                      <i class="fas fa-microphone"></i>
                    </div>
                    <div class="feature-text">Voice channel management</div>
                  </div>
                  
                  <div class="feature-item">
                    <div class="feature-icon">
                      <i class="fas fa-code"></i>
                    </div>
                    <div class="feature-text">Custom commands</div>
                  </div>
                </div>
                
                <a href="#" class="btn premium-btn">
                  <i class="fas fa-crown"></i> Upgrade to Premium
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  :root {
    --primary-color: #9c4dff;
    --primary-light: #bf7fff;
    --primary-hover: #8a43e0;
    --secondary-color: #2a2d3e;
    --background: #1a1c2e;
    --card-bg: rgba(42, 45, 62, 0.7);
    --card-bg-hover: rgba(52, 55, 72, 0.8);
    --text-primary: #ffffff;
    --text-secondary: #b3b9d1;
    --border-radius: 12px;
    --card-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    --success-color: #28c76f;
    --warning-color: #ff9f43;
    --danger-color: #ea5455;
    --info-color: #00cfe8;
  }
  
  .settings-container {
    padding: 2rem;
    background: var(--background);
    min-height: calc(100vh - 64px);
  }
  
  /* Page Header */
  .page-header {
    background: var(--card-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: var(--border-radius);
    border: 1px solid rgba(156, 77, 255, 0.2);
    padding: 2rem;
    margin-bottom: 2rem;
    box-shadow: var(--card-shadow);
  }
  
  .header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .header-title h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    font-weight: 700;
    display: flex;
    align-items: center;
  }
  
  .header-title h1 i {
    margin-right: 0.8rem;
    color: var(--primary-color);
  }
  
  .header-title p {
    font-size: 1.1rem;
    color: var(--text-secondary);
    margin: 0;
  }
  
  .gradient-text {
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    display: inline-block;
  }
  
  .status-indicator {
    display: flex;
    align-items: center;
    padding: 0.6rem 1.2rem;
    background: rgba(40, 199, 111, 0.1);
    border-radius: 50px;
    border: 1px solid rgba(40, 199, 111, 0.3);
  }
  
  .status-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    margin-right: 0.5rem;
  }
  
  .status-dot.online {
    background: var(--success-color);
    box-shadow: 0 0 0 3px rgba(40, 199, 111, 0.2);
    animation: pulse 2s infinite;
  }
  
  @keyframes pulse {
    0% {
      box-shadow: 0 0 0 0 rgba(40, 199, 111, 0.4);
    }
    70% {
      box-shadow: 0 0 0 6px rgba(40, 199, 111, 0);
    }
    100% {
      box-shadow: 0 0 0 0 rgba(40, 199, 111, 0);
    }
  }
  
  /* Notifications */
  .notification {
    display: flex;
    align-items: center;
    border-radius: var(--border-radius);
    padding: 1rem;
    margin-bottom: 1.5rem;
    background: var(--card-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(156, 77, 255, 0.2);
  }
  
  .notification.success {
    border-left: 4px solid var(--success-color);
  }
  
  .notification.error {
    border-left: 4px solid var(--danger-color);
  }
  
  .notification-icon {
    font-size: 1.5rem;
    margin-right: 1rem;
  }
  
  .notification.success .notification-icon {
    color: var(--success-color);
  }
  
  .notification.error .notification-icon {
    color: var(--danger-color);
  }
  
  .notification-content {
    flex: 1;
  }
  
  .notification-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1rem;
    padding: 0.5rem;
  }
  
  /* Content Grid Layout */
  .content-grid {
    display: grid;
    grid-template-columns: 250px 1fr;
    gap: 1.5rem;
  }
  
  /* Settings Navigation */
  .settings-nav {
    background: var(--card-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: var(--border-radius);
    overflow: hidden;
    border: 1px solid rgba(156, 77, 255, 0.2);
    box-shadow: var(--card-shadow);
    position: sticky;
    top: 1rem;
  }
  
  .nav-header {
    padding: 1.2rem 1.5rem;
    background: rgba(42, 45, 62, 0.9);
    border-bottom: 1px solid rgba(156, 77, 255, 0.2);
  }
  
  .nav-header h2 {
    margin: 0;
    font-size: 1.2rem;
    font-weight: 600;
    color: var(--text-primary);
  }
  
  .nav-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .nav-list li {
    display: flex;
    align-items: center;
    padding: 1rem 1.5rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    border-left: 3px solid transparent;
  }
  
  .nav-list li:hover {
    background: rgba(42, 45, 62, 0.9);
    color: var(--text-primary);
  }
  
  .nav-list li.active {
    background: rgba(156, 77, 255, 0.1);
    color: var(--primary-color);
    border-left-color: var(--primary-color);
  }
  
  .nav-list li i {
    margin-right: 0.8rem;
    width: 20px;
    text-align: center;
    font-size: 1.1rem;
  }
  
  .nav-list li.premium {
    color: var(--warning-color);
  }
  
  .nav-list li.premium.active {
    background: rgba(255, 159, 67, 0.1);
    border-left-color: var(--warning-color);
  }
  
  /* Tab Content */
  .tab-content {
    display: none;
  }
  
  .tab-content.active {
    display: block;
  }
  
  /* Cards */
  .glass-card {
    background: var(--card-bg);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-radius: var(--border-radius);
    overflow: hidden;
    border: 1px solid rgba(156, 77, 255, 0.2);
    box-shadow: var(--card-shadow);
    margin-bottom: 1.5rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .glass-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
  }
  
  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.2rem 1.5rem;
    background: rgba(42, 45, 62,.9);
    border-bottom: 1px solid rgba(156, 77, 255, 0.2);
    position: relative;
  }
  
  .card-header h2 {
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
    color: var(--text-primary);
  }
  
  .card-icon {
    width: 40px;
    height: 40px;
    border-radius: 10px;
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 5px 10px rgba(156, 77, 255, 0.3);
  }
  
  .card-icon i {
    font-size: 1.1rem;
    color: white;
  }
  
  .card-body {
    padding: 1.5rem;
  }
  
  /* Settings Sections */
  .settings-section {
    margin-bottom: 2rem;
    padding-bottom: 2rem;
    border-bottom: 1px solid rgba(156, 77, 255, 0.1);
  }
  
  .settings-section:last-child {
    margin-bottom: 0;
    padding-bottom: 0;
    border-bottom: none;
  }
  
  .settings-section h3 {
    font-size: 1.1rem;
    font-weight: 600;
    margin: 0 0 0.8rem 0;
    color: var(--text-primary);
  }
  
  .section-description {
    font-size: 0.9rem;
    color: var(--text-secondary);
    margin: -0.5rem 0 1.2rem 0;
  }
  
  /* Form Elements */
  .form-row {
    display: flex;
    flex-wrap: wrap;
    margin: 0 -0.75rem;
  }
  
  .form-group {
    padding: 0 0.75rem;
    margin-bottom: 1.5rem;
  }
  
  .form-group.full {
    width: 100%;
  }
  
  .form-group.half {
    width: 50%;
  }
  
  .form-group.third {
    width: 33.333%;
  }
  
  .form-group.two-thirds {
    width: 66.666%;
  }
  
  .form-group.fourth {
    width: 25%;
  }
  
  .form-group.three-fourths {
    width: 75%;
  }
  
  .form-group label {
    display: block;
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }
  
  .input-group {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .input-group-icon {
    position: absolute;
    left: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
  }
  
  .form-control {
    width: 100%;
    padding: 0.8rem 1rem 0.8rem 2.5rem;
    background: rgba(30, 32, 47, 0.6);
    border: 1px solid rgba(156, 77, 255, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.95rem;
    transition: all 0.3s ease;
  }
  
  .form-control:focus {
    outline: none;
    border-color: var(--primary-color);
    box-shadow: 0 0 0 2px rgba(156, 77, 255, 0.2);
  }
  
  .input-hint {
    font-size: 0.8rem;
    color: var(--text-secondary);
    margin-top: 0.4rem;
  }
  
  .center-hint {
    text-align: center;
    margin-top: 1rem;
  }
  
  .select-wrapper {
    position: relative;
  }
  
  .select-wrapper .form-control {
    appearance: none;
    padding-right: 2.5rem;
  }
  
  .select-arrow {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: var(--text-secondary);
    pointer-events: none;
  }
  
  /* Color Picker */
  .color-picker-wrapper {
    display: flex;
    align-items: center;
    margin-top: 0.5rem;
  }
  
  .color-picker-wrapper input[type="color"] {
    width: 50px;
    height: 50px;
    padding: 0;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    background: none;
  }
  
  .color-preview {
    width: 30px;
    height: 30px;
    border-radius: 6px;
    margin-left: 1rem;
    box-shadow: 0 0 0 1px rgba(255, 255, 255, 0.2);
  }
  
  /* Channel Grid */
  .channel-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  .channel-item {
    display: flex;
    align-items: center;
    background: rgba(30, 32, 47, 0.6);
    border: 1px solid rgba(156, 77, 255, 0.2);
    border-radius: 10px;
    padding: 1rem;
    transition: all 0.3s ease;
  }
  
  .channel-item:hover {
    border-color: var(--primary-color);
    background: rgba(42, 45, 62, 0.8);
  }
  
  .channel-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    background: rgba(156, 77, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
  }
  
  .channel-icon i {
    color: var(--primary-color);
  }
  
  .channel-input {
    flex: 1;
  }
  
  .channel-input label {
    display: block;
    font-size: 0.8rem;
    margin-bottom: 0.3rem;
    color: var(--text-secondary);
  }
  
  .channel-input input {
    width: 100%;
    background: rgba(30, 32, 47, 0.4);
    border: 1px solid rgba(156, 77, 255, 0.1);
    padding: 0.5rem;
    border-radius: 5px;
    color: var(--text-primary);
  }
  
  .channel-input input:focus {
    outline: none;
    border-color: var(--primary-color);
  }
  
  /* Ticket Types */
  .ticket-types {
    display: flex;
    flex-direction: column;
    gap: 0.8rem;
    margin-bottom: 1rem;
  }
  
  .ticket-type-item {
    display: flex;
    align-items: center;
    gap: 0.8rem;
  }
  
  .ticket-type-item .input-group {
    flex: 1;
  }
  
  .add-type-btn {
    align-self: flex-start;
    margin-bottom: 0.5rem;
  }
  
  /* Admin Users */
  .admin-users {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .admin-user-item {
    background: rgba(30, 32, 47, 0.6);
    border: 1px solid rgba(156, 77, 255, 0.2);
    border-radius: 10px;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.3s ease;
  }
  
  .admin-user-item:hover {
    transform: translateY(-3px);
    background: rgba(42, 45, 62, 0.8);
    border-color: var(--primary-color);
  }
  
  .admin-user-info {
    display: flex;
    align-items: center;
  }
  
  .user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: rgba(156, 77, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
  }
  
  .user-avatar i {
    color: var(--primary-color);
  }
  
  .user-details {
    display: flex;
    flex-direction: column;
  }
  
  .user-id {
    font-family: 'SFMono-Regular', Consolas, 'Liberation Mono', Menlo, monospace;
    font-weight: 600;
    font-size: 0.9rem;
    color: var(--text-primary);
  }
  
  .user-role {
    font-size: 0.8rem;
    color: var(--text-secondary);
  }
  
  /* Staff Roles */
  .staff-roles {
    display: flex;
    flex-wrap: wrap;
    gap: 0.8rem;
    margin-bottom: 1.5rem;
  }
  
  .role-tag {
    background: rgba(30, 32, 47, 0.6);
    border: 1px solid rgba(156, 77, 255, 0.2);
    border-radius: 50px;
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
    font-size: 0.9rem;
    color: var(--text-primary);
  }
  
  .role-tag i {
    color: var(--primary-color);
    margin-right: 0.5rem;
  }
  
  .role-remove {
    background: none;
    border: none;
    color: var(--text-secondary);
    margin-left: 0.8rem;
    cursor: pointer;
    padding: 0.2rem;
    opacity: 0.6;
  }
  
  /* Limits Grid */
  .limits-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }
  
  .limit-item {
    display: flex;
    align-items: center;
    background: rgba(30, 32, 47, 0.6);
    border: 1px solid rgba(156, 77, 255, 0.2);
    border-radius: 10px;
    padding: 1rem;
    transition: all 0.3s ease;
  }
  
  .limit-item:hover {
    border-color: var(--primary-color);
    background: rgba(42, 45, 62, 0.8);
  }
  
  .limit-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    background: rgba(156, 77, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
  }
  
  .limit-icon i {
    color: var(--primary-color);
  }
  
  .limit-input {
    flex: 1;
  }
  
  .limit-input label {
    display: block;
    font-size: 0.9rem;
    margin-bottom: 0.3rem;
    color: var(--text-primary);
  }
  
  .limit-input input {
    width: 100%;
    background: rgba(30, 32, 47, 0.4);
    border: 1px solid rgba(156, 77, 255, 0.1);
    padding: 0.5rem;
    border-radius: 5px;
    color: var(--text-primary);
  }
  
  .limit-input input:focus {
    outline: none;
    border-color: var(--primary-color);
  }
  
  .limit-input .input-hint {
    margin-top: 0.2rem;
  }
  
  /* Empty State */
  .empty-state {
    background: rgba(30, 32, 47, 0.4);
    border-radius: 10px;
    padding: 2rem;
    text-align: center;
    color: var(--text-secondary);
  }
  
  .small-empty {
    padding: 1.5rem;
  }
  
  .empty-icon {
    font-size: 2.5rem;
    color: rgba(156, 77, 255, 0.2);
    margin-bottom: 1rem;
  }
  
  .small-empty .empty-icon {
    font-size: 2rem;
    margin-bottom: 0.5rem;
  }
  
  .empty-state h3 {
    margin-bottom: 0.5rem;
    font-weight: 600;
    color: var(--text-primary);
  }
  
  /* Form Actions */
  .form-actions {
    display: flex;
    justify-content: flex-end;
    margin-top: 1.5rem;
  }
  
  /* Buttons */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    font-weight: 600;
    font-size: 0.95rem;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    gap: 0.5rem;
  }
  
  .primary-btn {
    background: linear-gradient(135deg, var(--primary-color), var(--primary-light));
    color: white;
    box-shadow: 0 5px 15px rgba(156, 77, 255, 0.3);
  }
  
  .primary-btn:hover {
    background: linear-gradient(135deg, var(--primary-light), var(--primary-color));
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(156, 77, 255, 0.4);
  }
  
  .secondary-btn {
    background: rgba(30, 32, 47, 0.7);
    color: var(--text-secondary);
    border: 1px solid rgba(156, 77, 255, 0.2);
  }
  
  .secondary-btn:hover {
    background: rgba(42, 45, 62, 0.9);
    color: var(--text-primary);
  }
  
  .danger-btn {
    background: linear-gradient(135deg, var(--danger-color), #ff7676);
    color: white;
    box-shadow: 0 5px 15px rgba(234, 84, 85, 0.3);
  }
  
  .danger-btn:hover {
    background: linear-gradient(135deg, #ff5555, var(--danger-color));
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(234, 84, 85, 0.4);
  }
  
  .action-btn {
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    border: none;
    font-size: 0.9rem;
  }
  
  .action-btn.delete {
    background: rgba(234, 84, 85, 0.15);
    color: var(--danger-color);
  }
  
  .action-btn.delete:hover {
    background: rgba(234, 84, 85, 0.3);
  }
  
  .glow-btn {
    position: relative;
    overflow: hidden;
  }
  
  .glow-btn::after {
    content: '';
    position: absolute;
    top: -50%;
    left: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.3) 0%, rgba(255, 255, 255, 0) 70%);
    transform: scale(0);
    opacity: 0;
    transition: transform 0.6s, opacity 0.6s;
  }
  
  .glow-btn:hover::after {
    transform: scale(1);
    opacity: 1;
  }
  
  /* Premium Section */
  .premium-card {
    border: 1px solid rgba(255, 159, 67, 0.3);
    box-shadow: 0 10px 30px rgba(255, 159, 67, 0.1);
  }
  
  .premium-icon-header {
    background: linear-gradient(135deg, var(--warning-color), #ffcc80);
    box-shadow: 0 5px 15px rgba(255, 159, 67, 0.3);
  }
  
  .premium-badge {
    position: absolute;
    top: 10px;
    right: 10px;
    background: var(--warning-color);
    color: rgba(0, 0, 0, 0.7);
    font-size: 0.7rem;
    font-weight: 600;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
  }
  
  .premium-content {
    display: flex;
    justify-content: center;
  }
  
  .premium-hero {
    max-width: 600px;
    text-align: center;
    padding: 2rem 0;
  }
  
  .premium-icon {
    width: 80px;
    height: 80px;
    border-radius: 50%;
    background: linear-gradient(135deg, var(--warning-color), #ffcc80);
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem auto;
    box-shadow: 0 10px 20px rgba(255, 159, 67, 0.2);
  }
  
  .premium-icon i {
    font-size: 2.5rem;
    color: white;
  }
  
  .premium-hero h3 {
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    color: var(--text-primary);
  }
  
  .premium-hero p {
    color: var(--text-secondary);
    margin-bottom: 2rem;
  }
  
  .premium-features {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    margin-bottom: 2rem;
  }
  
  .feature-item {
    display: flex;
    align-items: center;
    background: rgba(30, 32, 47, 0.4);
    border: 1px solid rgba(255, 159, 67, 0.2);
    border-radius: 10px;
    padding: 1rem;
    text-align: left;
  }
  
  .feature-icon {
    width: 36px;
    height: 36px;
    border-radius: 8px;
    background: rgba(255, 159, 67, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
  }
  
  .feature-icon i {
    color: var(--warning-color);
  }
  
  .premium-btn {
    background: linear-gradient(135deg, var(--warning-color), #ffcc80);
    color: rgba(0, 0, 0, 0.8);
    font-weight: 600;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    box-shadow: 0 5px 15px rgba(255, 159, 67, 0.3);
    text-decoration: none;
    transition: all 0.3s ease;
  }
  
  .premium-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 8px 25px rgba(255, 159, 67, 0.4);
    color: rgba(0, 0, 0, 0.8);
  }
  
  /* Responsive Adjustments */
  @media (max-width: 1200px) {
    .content-grid {
      grid-template-columns: 1fr;
    }
    
    .settings-nav {
      position: static;
      margin-bottom: 1.5rem;
    }
    
    .nav-list {
      display: flex;
      overflow-x: auto;
      padding-bottom: 0.5rem;
    }
    
    .nav-list li {
      flex: 1;
      white-space: nowrap;
      padding: 0.8rem 1.2rem;
      justify-content: center;
      border-left: none;
      border-bottom: 3px solid transparent;
    }
    
    .nav-list li.active {
      border-left-color: transparent;
      border-bottom-color: var(--primary-color);
    }
    
    .nav-list li i {
      margin-right: 0.5rem;
    }
  }
  
  @media (max-width: 768px) {
    .header-content {
      flex-direction: column;
      align-items: center;
      text-align: center;
    }
    
    .header-title {
      margin-bottom: 1.5rem;
    }
    
    .header-title h1 {
      justify-content: center;
    }
    
    .channel-grid,
    .limits-grid {
      grid-template-columns: 1fr;
    }
    
    .premium-features {
      grid-template-columns: 1fr;
    }
    
    .form-group.half,
    .form-group.third,
    .form-group.two-thirds,
    .form-group.fourth,
    .form-group.three-fourths {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Tab switching
    const navItems = document.querySelectorAll('.nav-list li');
    navItems.forEach(item => {
      item.addEventListener('click', function() {
        // Remove active class from all items
        navItems.forEach(el => el.classList.remove('active'));
        
        // Add active class to clicked item
        this.classList.add('active');
        
        // Show corresponding tab content
        const tabId = this.getAttribute('data-tab');
        const tabContents = document.querySelectorAll('.tab-content');
        
        tabContents.forEach(tab => {
          tab.classList.remove('active');
          if (tab.id === tabId) {
            tab.classList.add('active');
          }
        });
      });
    });
    
    // Form validation
    const bountyMinInput = document.getElementById('bountyMin');
    const bountyMaxInput = document.getElementById('bountyMax');
    
    if (bountyMinInput && bountyMaxInput) {
      bountyMinInput.addEventListener('change', validateBountyLimits);
      bountyMaxInput.addEventListener('change', validateBountyLimits);
    }
    
    function validateBountyLimits() {
      const min = parseInt(bountyMinInput.value);
      const max = parseInt(bountyMaxInput.value);
      
      if (min >= max) {
        alert('Minimum bounty must be less than maximum bounty');
        bountyMinInput.value = '<%= config.validation && config.validation.bountyMin ? config.validation.bountyMin : 10 %>';
        bountyMaxInput.value = '<%= config.validation && config.validation.bountyMax ? config.validation.bountyMax : 1000 %>';
      }
    }
    
    // Form submission confirmation
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      form.addEventListener('submit', function(e) {
        if (!confirm('Are you sure you want to save these changes? This may restart the bot.')) {
          e.preventDefault();
        }
      });
    });
    
    // Animated entrance for cards
    const cards = document.querySelectorAll('.glass-card');
    cards.forEach((card, index) => {
      card.style.opacity = '0';
      card.style.transform = 'translateY(20px)';
      
      setTimeout(() => {
        card.style.opacity = '1';
        card.style.transform = 'translateY(0)';
        card.style.transition = 'all 0.3s ease ' + (index * 0.1) + 's';
      }, 100);
    });
  });
</script>
