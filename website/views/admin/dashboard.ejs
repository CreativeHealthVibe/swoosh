<div class="dashboard-container">
  <!-- Stats Overview -->
  <div class="stats-overview">
    <div class="stat-card">
      <div class="stat-icon bg-purple">
        <i class="fas fa-server"></i>
      </div>
      <div class="stat-info">
        <h3>Servers</h3>
        <p id="serversStat">0</p>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon bg-blue">
        <i class="fas fa-users"></i>
      </div>
      <div class="stat-info">
        <h3>Users</h3>
        <p id="usersStat">0</p>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon bg-green">
        <i class="fas fa-clock"></i>
      </div>
      <div class="stat-info">
        <h3>Uptime</h3>
        <p id="uptimeStat">0d 0h 0m</p>
      </div>
    </div>
    
    <div class="stat-card">
      <div class="stat-icon bg-red">
        <i class="fas fa-heartbeat"></i>
      </div>
      <div class="stat-info">
        <h3>Ping</h3>
        <p id="pingStat">0ms</p>
      </div>
    </div>
  </div>
  
  <!-- System Resources -->
  <div class="row">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">CPU Usage</h5>
        </div>
        <div class="card-body">
          <div class="resource-gauge">
            <div class="gauge-value">
              <span id="cpuStat">0%</span>
            </div>
            <div class="progress">
              <div id="cpuProgress" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">Memory Usage</h5>
        </div>
        <div class="card-body">
          <div class="resource-gauge">
            <div class="gauge-value">
              <span id="memoryStat">0%</span>
            </div>
            <div class="progress">
              <div id="memoryProgress" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Recent Activity & Top Commands -->
  <div class="row">
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">Recent Activity</h5>
        </div>
        <div class="card-body">
          <div class="activity-list">
            <div class="activity-item">
              <div class="activity-icon bg-blue">
                <i class="fas fa-user-plus"></i>
              </div>
              <div class="activity-details">
                <p>New user joined the server</p>
                <small>5 minutes ago</small>
              </div>
            </div>
            
            <div class="activity-item">
              <div class="activity-icon bg-green">
                <i class="fas fa-ticket-alt"></i>
              </div>
              <div class="activity-details">
                <p>Ticket #1234 was created</p>
                <small>15 minutes ago</small>
              </div>
            </div>
            
            <div class="activity-item">
              <div class="activity-icon bg-purple">
                <i class="fas fa-ban"></i>
              </div>
              <div class="activity-details">
                <p>User was added to blacklist</p>
                <small>30 minutes ago</small>
              </div>
            </div>
            
            <div class="activity-item">
              <div class="activity-icon bg-orange">
                <i class="fas fa-coins"></i>
              </div>
              <div class="activity-details">
                <p>New bounty was set</p>
                <small>1 hour ago</small>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="col-md-6">
      <div class="card">
        <div class="card-header">
          <h5 class="card-title">Top Commands</h5>
        </div>
        <div class="card-body">
          <canvas id="commandChart" height="240"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Info -->
  <div class="card mt-4">
    <div class="card-header">
      <h5 class="card-title">System Information</h5>
    </div>
    <div class="card-body">
      <div class="row system-info">
        <div class="col-md-6">
          <ul class="info-list">
            <li><strong>Node.js Version:</strong> <span id="nodeVersion">-</span></li>
            <li><strong>Discord.js Version:</strong> <span id="discordVersion">-</span></li>
            <li><strong>Operating System:</strong> <span id="osInfo">-</span></li>
          </ul>
        </div>
        <div class="col-md-6">
          <ul class="info-list">
            <li><strong>Bot Started:</strong> <span id="startTime">-</span></li>
            <li><strong>Total Commands:</strong> <span id="commandCount">-</span></li>
            <li><strong>Total Channels:</strong> <span id="channelCount">-</span></li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize command usage chart
  const commandCtx = document.getElementById('commandChart').getContext('2d');
  const commandChart = new Chart(commandCtx, {
    type: 'bar',
    data: {
      labels: ['help', 'emoji', 'role', 'whos', 'ban', 'kick'],
      datasets: [{
        label: 'Usage Count',
        data: [0, 0, 0, 0, 0, 0],
        backgroundColor: [
          '#5865F2',
          '#57F287',
          '#FEE75C',
          '#EB459E',
          '#ED4245',
          '#9B59B6'
        ],
        borderColor: [
          '#4752C4',
          '#45C16C',
          '#EED84A',
          '#D33D8C',
          '#D63C3F',
          '#8E44AD'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: {
          display: false
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0
          }
        }
      }
    }
  });

  // WebSocket data handler for dashboard
  socket.onmessage = function(event) {
    try {
      const data = JSON.parse(event.data);
      botStatusText.textContent = 'Online';
      statusIndicator.classList.remove('disconnected');
      statusIndicator.classList.add('connected');
      
      // Update dashboard stats
      document.getElementById('cpuStat').textContent = `${data.cpu}%`;
      document.getElementById('memoryStat').textContent = `${data.memory}%`;
      document.getElementById('pingStat').textContent = `${data.ping}ms`;
      document.getElementById('serversStat').textContent = data.servers;
      document.getElementById('usersStat').textContent = data.users;
      
      // Update progress bars
      document.getElementById('cpuProgress').style.width = `${data.cpu}%`;
      document.getElementById('memoryProgress').style.width = `${data.memory}%`;
      
      // Format uptime
      const seconds = data.uptime;
      const days = Math.floor(seconds / 86400);
      const hours = Math.floor((seconds % 86400) / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      document.getElementById('uptimeStat').textContent = `${days}d ${hours}h ${minutes}m`;
      
      // Update system info
      document.getElementById('nodeVersion').textContent = data.nodeVersion;
      document.getElementById('discordVersion').textContent = data.discordVersion;
      document.getElementById('osInfo').textContent = data.os;
      document.getElementById('commandCount').textContent = data.commands;
      document.getElementById('channelCount').textContent = data.channels;
      
      // Convert timestamp to relative time
      const startTime = new Date(data.timestamp);
      startTime.setSeconds(startTime.getSeconds() - data.uptime);
      document.getElementById('startTime').textContent = startTime.toLocaleString();
      
      // Update command chart
      if (data.commandUsage) {
        const labels = Object.keys(data.commandUsage);
        const usageCounts = labels.map(cmd => data.commandUsage[cmd]);
        
        commandChart.data.labels = labels;
        commandChart.data.datasets[0].data = usageCounts;
        commandChart.update();
      }
    } catch (error) {
      console.error('Error parsing WebSocket message:', error);
    }
  };
</script>
