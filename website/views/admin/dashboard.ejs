<!-- Link to dashboard CSS -->
<!-- Chart.js for data visualization -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
<link rel="stylesheet" href="/css/dashboard.css">

<!-- Chart.js for data visualization -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>

<div class="dashboard-header">
  <h1>Dashboard <span class="gradient-text">Overview</span></h1>
  <p class="dashboard-subtitle">Monitor and manage your SWOOSH bot functionality</p>
</div>

<!-- Top Stats Cards -->
<div class="stats-overview">
  <div class="stat-card">
    <div class="stat-icon bg-purple">
      <i class="fas fa-server"></i>
    </div>
    <div class="stat-info">
      <h3>Servers</h3>
      <p id="serversStat">0</p>
    </div>
  </div>
  
  <div class="stat-card">
    <div class="stat-icon bg-blue">
      <i class="fas fa-users"></i>
    </div>
    <div class="stat-info">
      <h3>Members</h3>
      <p id="usersStat">0</p>
    </div>
  </div>
  
  <div class="stat-card">
    <div class="stat-icon bg-green">
      <i class="fas fa-clock"></i>
    </div>
    <div class="stat-info">
      <h3>Uptime</h3>
      <p id="uptimeStat">0d 0h 0m</p>
    </div>
  </div>
  
  <div class="stat-card">
    <div class="stat-icon bg-red">
      <i class="fas fa-heartbeat"></i>
    </div>
    <div class="stat-info">
      <h3>Ping</h3>
      <p id="pingStat">0ms</p>
    </div>
  </div>
  
  <div class="stat-card">
    <div class="stat-icon bg-orange">
      <i class="fas fa-ticket-alt"></i>
    </div>
    <div class="stat-info">
      <h3>Active Tickets</h3>
      <p id="ticketsStat">0</p>
    </div>
  </div>
</div>

<!-- Main Dashboard Grid -->
<div class="dashboard-grid">
  <!-- Status & Quick Actions -->
  <div class="grid-col-4">
    <div class="dashboard-card">
      <div class="card-header">
        <h2><i class="fas fa-robot card-header-icon"></i> Bot Status</h2>
        <div class="card-actions">
          <button class="card-action-btn" title="Refresh"><i class="fas fa-sync-alt"></i></button>
        </div>
      </div>
      <div class="card-body">
        <div class="status-wrapper">
          <div id="botStatusIndicator" class="status-indicator status-online"></div>
          <span id="botStatusText" class="status-text">Online</span>
        </div>
        
        <div class="quick-actions">
          <div class="action-button" onclick="restartBot()">
            <div class="action-icon"><i class="fas fa-redo"></i></div>
            <div class="action-name">Restart Bot</div>
          </div>
          <div class="action-button" onclick="toggleBotStatus()">
            <div class="action-icon"><i class="fas fa-power-off"></i></div>
            <div class="action-name">Toggle Status</div>
          </div>
          <div class="action-button" onclick="location.href='/admin/logs'">
            <div class="action-icon"><i class="fas fa-list-alt"></i></div>
            <div class="action-name">View Logs</div>
          </div>
          <div class="action-button" onclick="location.href='/admin/blacklist'">
            <div class="action-icon"><i class="fas fa-ban"></i></div>
            <div class="action-name">Blacklist</div>
          </div>
        </div>
        
        <!-- System Information -->
        <div class="system-info">
          <ul class="info-list">
            <li>
              <span class="info-label">Node.js</span>
              <span id="nodeVersion" class="info-value">-</span>
            </li>
            <li>
              <span class="info-label">Discord.js</span>
              <span id="discordVersion" class="info-value">-</span>
            </li>
            <li>
              <span class="info-label">Started</span>
              <span id="startTime" class="info-value">-</span>
            </li>
            <li>
              <span class="info-label">Operating System</span>
              <span id="osInfo" class="info-value">-</span>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </div>
  
  <!-- System Resources -->
  <div class="grid-col-8">
    <div class="dashboard-card">
      <div class="card-header">
        <h2><i class="fas fa-microchip card-header-icon"></i> System Resources</h2>
        <div class="card-actions">
          <button class="card-action-btn" title="Refresh"><i class="fas fa-sync-alt"></i></button>
          <button class="card-action-btn" title="View Details"><i class="fas fa-expand"></i></button>
        </div>
      </div>
      <div class="card-body">
        <div class="resource-charts">
          <!-- CPU Usage -->
          <div>
            <div class="resource-gauge">
              <div class="gauge-value">
                <span id="cpuStat">0%</span>
                <i class="fas fa-arrow-up trend-icon trend-up"></i>
              </div>
              <div class="progress">
                <div id="cpuProgress" class="progress-bar progress-bar-cpu" style="width: 0%;"></div>
              </div>
              <div class="gauge-label">CPU Usage</div>
            </div>
          </div>
          
          <!-- Memory Usage -->
          <div>
            <div class="resource-gauge">
              <div class="gauge-value">
                <span id="memoryStat">0%</span>
                <i class="fas fa-arrow-down trend-icon trend-down"></i>
              </div>
              <div class="progress">
                <div id="memoryProgress" class="progress-bar progress-bar-memory" style="width: 0%;"></div>
              </div>
              <div class="gauge-label">Memory Usage</div>
            </div>
          </div>
        </div>
        
        <div class="chart-container">
          <canvas id="resourceChart"></canvas>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Recent Activity -->
  <div class="grid-col-6">
    <div class="dashboard-card">
      <div class="card-header">
        <h2><i class="fas fa-history card-header-icon"></i> Recent Activity</h2>
        <div class="card-actions">
          <button class="card-action-btn" title="Refresh"><i class="fas fa-sync-alt"></i></button>
          <button class="card-action-btn" title="View All"><i class="fas fa-external-link-alt"></i></button>
        </div>
      </div>
      <div class="card-body">
        <div class="activity-list" id="activityList">
          <div class="activity-item">
            <div class="activity-icon bg-blue">
              <i class="fas fa-user-plus"></i>
            </div>
            <div class="activity-details">
              <p>New server added: Gaming Community</p>
              <small>Just now</small>
            </div>
          </div>
          
          <div class="activity-item">
            <div class="activity-icon bg-green">
              <i class="fas fa-ticket-alt"></i>
            </div>
            <div class="activity-details">
              <p>Ticket #1234 was created by User123</p>
              <small>15 minutes ago</small>
            </div>
          </div>
          
          <div class="activity-item">
            <div class="activity-icon bg-purple">
              <i class="fas fa-ban"></i>
            </div>
            <div class="activity-details">
              <p>User ToxicUser#1234 was added to blacklist</p>
              <small>30 minutes ago</small>
            </div>
          </div>
          
          <div class="activity-item">
            <div class="activity-icon bg-orange">
              <i class="fas fa-coins"></i>
            </div>
            <div class="activity-details">
              <p>New bounty was set for finding bugs in /role command</p>
              <small>1 hour ago</small>
            </div>
          </div>
          
          <div class="activity-item">
            <div class="activity-icon bg-red">
              <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div class="activity-details">
              <p>Error detected in /emoji command execution</p>
              <small>2 hours ago</small>
            </div>
          </div>
          
          <div class="activity-item">
            <div class="activity-icon bg-blue">
              <i class="fas fa-cog"></i>
            </div>
            <div class="activity-details">
              <p>Bot configuration updated by Admin</p>
              <small>3 hours ago</small>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Command Usage -->
  <div class="grid-col-6">
    <div class="dashboard-card">
      <div class="card-header">
        <h2><i class="fas fa-terminal card-header-icon"></i> Command Usage</h2>
        <div class="card-actions">
          <button class="card-action-btn" title="Refresh"><i class="fas fa-sync-alt"></i></button>
          <button class="card-action-btn" title="View as Chart" id="toggleChartView"><i class="fas fa-chart-bar"></i></button>
        </div>
      </div>
      <div class="card-body">
        <div id="chartView" style="display: none;">
          <canvas id="commandChart" height="300"></canvas>
        </div>
        
        <div id="tableView">
          <table class="usage-table">
            <thead>
              <tr>
                <th>Command</th>
                <th>Usage</th>
                <th>%</th>
              </tr>
            </thead>
            <tbody id="commandTableBody">
              <tr>
                <td>
                  <div class="usage-label">
                    <div class="command-color" style="background: #5865F2;"></div>
                    <span>/help</span>
                  </div>
                </td>
                <td class="usage-count">0</td>
                <td class="usage-percent">0%</td>
              </tr>
              <tr>
                <td>
                  <div class="usage-label">
                    <div class="command-color" style="background: #57F287;"></div>
                    <span>/emoji</span>
                  </div>
                </td>
                <td class="usage-count">0</td>
                <td class="usage-percent">0%</td>
              </tr>
              <tr>
                <td>
                  <div class="usage-label">
                    <div class="command-color" style="background: #FEE75C;"></div>
                    <span>/role</span>
                  </div>
                </td>
                <td class="usage-count">0</td>
                <td class="usage-percent">0%</td>
              </tr>
              <tr>
                <td>
                  <div class="usage-label">
                    <div class="command-color" style="background: #EB459E;"></div>
                    <span>/whos</span>
                  </div>
                </td>
                <td class="usage-count">0</td>
                <td class="usage-percent">0%</td>
              </tr>
              <tr>
                <td>
                  <div class="usage-label">
                    <div class="command-color" style="background: #ED4245;"></div>
                    <span>/ban</span>
                  </div>
                </td>
                <td class="usage-count">0</td>
                <td class="usage-percent">0%</td>
              </tr>
              <tr>
                <td>
                  <div class="usage-label">
                    <div class="command-color" style="background: #9B59B6;"></div>
                    <span>/kick</span>
                  </div>
                </td>
                <td class="usage-count">0</td>
                <td class="usage-percent">0%</td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Initialize charts
  // Command usage chart
  const commandCtx = document.getElementById('commandChart').getContext('2d');
  const commandChart = new Chart(commandCtx, {
    type: 'bar',
    data: {
      labels: ['help', 'emoji', 'role', 'whos', 'ban', 'kick'],
      datasets: [{
        label: 'Usage Count',
        data: [0, 0, 0, 0, 0, 0],
        backgroundColor: [
          '#5865F2',
          '#57F287',
          '#FEE75C',
          '#EB459E',
          '#ED4245',
          '#9B59B6'
        ],
        borderColor: [
          '#4752C4',
          '#45C16C',
          '#EED84A',
          '#D33D8C',
          '#D63C3F',
          '#8E44AD'
        ],
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      plugins: {
        legend: {
          display: false
        },
        tooltip: {
          backgroundColor: 'rgba(20, 16, 31, 0.9)',
          titleColor: '#fff',
          bodyColor: 'rgba(255, 255, 255, 0.8)',
          borderColor: 'rgba(156, 77, 255, 0.3)',
          borderWidth: 1,
          padding: 10,
          cornerRadius: 8,
          titleFont: {
            weight: 'bold'
          }
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          ticks: {
            precision: 0,
            color: 'rgba(255, 255, 255, 0.7)'
          },
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          }
        },
        x: {
          ticks: {
            color: 'rgba(255, 255, 255, 0.7)'
          },
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          }
        }
      }
    }
  });
  
  // Resource usage chart
  const resourceCtx = document.getElementById('resourceChart').getContext('2d');
  const resourceChart = new Chart(resourceCtx, {
    type: 'line',
    data: {
      labels: Array(15).fill('').map((_, i) => `${i}m ago`),
      datasets: [
        {
          label: 'CPU',
          data: Array(15).fill(0),
          borderColor: '#EB459E',
          backgroundColor: 'rgba(235, 69, 158, 0.1)',
          borderWidth: 2,
          tension: 0.4,
          fill: true
        },
        {
          label: 'Memory',
          data: Array(15).fill(0),
          borderColor: '#57F287',
          backgroundColor: 'rgba(87, 242, 135, 0.1)',
          borderWidth: 2,
          tension: 0.4,
          fill: true
        }
      ]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      interaction: {
        mode: 'index',
        intersect: false,
      },
      plugins: {
        legend: {
          position: 'top',
          labels: {
            color: 'rgba(255, 255, 255, 0.7)',
            boxWidth: 12,
            usePointStyle: true,
            padding: 20
          }
        },
        tooltip: {
          backgroundColor: 'rgba(20, 16, 31, 0.9)',
          titleColor: '#fff',
          bodyColor: 'rgba(255, 255, 255, 0.8)',
          borderColor: 'rgba(156, 77, 255, 0.3)',
          borderWidth: 1,
          padding: 10,
          cornerRadius: 8
        }
      },
      scales: {
        y: {
          beginAtZero: true,
          max: 100,
          ticks: {
            color: 'rgba(255, 255, 255, 0.7)',
            callback: function(value) {
              return value + '%';
            }
          },
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          }
        },
        x: {
          ticks: {
            color: 'rgba(255, 255, 255, 0.7)',
            maxRotation: 0
          },
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          }
        }
      }
    }
  });
  
  // Toggle between chart and table view
  document.getElementById('toggleChartView').addEventListener('click', function() {
    const chartView = document.getElementById('chartView');
    const tableView = document.getElementById('tableView');
    const icon = this.querySelector('i');
    
    if (chartView.style.display === 'none') {
      chartView.style.display = 'block';
      tableView.style.display = 'none';
      icon.className = 'fas fa-table';
      this.title = 'View as Table';
      commandChart.update();
    } else {
      chartView.style.display = 'none';
      tableView.style.display = 'block';
      icon.className = 'fas fa-chart-bar';
      this.title = 'View as Chart';
    }
  });
  
  // Resource data history for the chart
  const cpuHistory = Array(15).fill(0);
  const memoryHistory = Array(15).fill(0);
  
  // WebSocket data handler for dashboard
  socket.onmessage = function(event) {
    try {
      const data = JSON.parse(event.data);
      
      // Update bot status
      const botStatusText = document.getElementById('botStatusText');
      const botStatusIndicator = document.getElementById('botStatusIndicator');
      
      botStatusText.textContent = 'Online';
      botStatusIndicator.classList.remove('status-offline');
      botStatusIndicator.classList.add('status-online');
      
      // Update dashboard stats
      document.getElementById('cpuStat').textContent = `${data.cpu}%`;
      document.getElementById('memoryStat').textContent = `${data.memory}%`;
      document.getElementById('pingStat').textContent = `${data.ping}ms`;
      document.getElementById('serversStat').textContent = data.servers || 0;
      document.getElementById('usersStat').textContent = data.users || 0;
      document.getElementById('ticketsStat').textContent = data.tickets || 0;
      
      // Update progress bars
      document.getElementById('cpuProgress').style.width = `${data.cpu}%`;
      document.getElementById('memoryProgress').style.width = `${data.memory}%`;
      
      // Format uptime
      const seconds = data.uptime;
      const days = Math.floor(seconds / 86400);
      const hours = Math.floor((seconds % 86400) / 3600);
      const minutes = Math.floor((seconds % 3600) / 60);
      document.getElementById('uptimeStat').textContent = `${days}d ${hours}h ${minutes}m`;
      
      // Update system info
      document.getElementById('nodeVersion').textContent = data.nodeVersion || '-';
      document.getElementById('discordVersion').textContent = data.discordVersion || '-';
      document.getElementById('osInfo').textContent = data.os || '-';
      
      // Convert timestamp to relative time
      const startTime = new Date(data.timestamp);
      startTime.setSeconds(startTime.getSeconds() - data.uptime);
      document.getElementById('startTime').textContent = startTime.toLocaleString();
      
      // Update CPU and Memory history
      cpuHistory.push(data.cpu);
      cpuHistory.shift();
      memoryHistory.push(data.memory);
      memoryHistory.shift();
      
      // Update resource chart
      resourceChart.data.datasets[0].data = cpuHistory;
      resourceChart.data.datasets[1].data = memoryHistory;
      resourceChart.update();
      
      // Update command chart and table
      if (data.commandUsage) {
        const labels = Object.keys(data.commandUsage);
        const usageCounts = labels.map(cmd => data.commandUsage[cmd]);
        
        // Calculate percentages
        const total = usageCounts.reduce((sum, count) => sum + count, 0);
        const percentages = usageCounts.map(count => total === 0 ? 0 : Math.round((count / total) * 100));
        
        // Update chart
        commandChart.data.labels = labels;
        commandChart.data.datasets[0].data = usageCounts;
        commandChart.update();
        
        // Update table
        const tableBody = document.getElementById('commandTableBody');
        let tableHTML = '';
        
        for (let i = 0; i < labels.length; i++) {
          const colorIndex = i % commandChart.data.datasets[0].backgroundColor.length;
          const color = commandChart.data.datasets[0].backgroundColor[colorIndex];
          
          tableHTML += `
            <tr>
              <td>
                <div class="usage-label">
                  <div class="command-color" style="background: ${color};"></div>
                  <span>/${labels[i]}</span>
                </div>
              </td>
              <td class="usage-count">${usageCounts[i]}</td>
              <td class="usage-percent">${percentages[i]}%</td>
            </tr>
          `;
        }
        
        if (tableHTML) {
          tableBody.innerHTML = tableHTML;
        }
      }
      
      // Add any new activity items from data if available
      if (data.recentActivity && data.recentActivity.length > 0) {
        const activityList = document.getElementById('activityList');
        let activityHTML = '';
        
        data.recentActivity.forEach(activity => {
          activityHTML += `
            <div class="activity-item">
              <div class="activity-icon bg-${activity.type || 'blue'}">
                <i class="fas fa-${activity.icon || 'info-circle'}"></i>
              </div>
              <div class="activity-details">
                <p>${activity.message}</p>
                <small>${activity.time}</small>
              </div>
            </div>
          `;
        });
        
        if (activityHTML) {
          activityList.innerHTML = activityHTML + activityList.innerHTML;
        }
      }
      
    } catch (error) {
      console.error('Error parsing WebSocket message:', error);
    }
  };
  
  // Functions for bot actions
  function restartBot() {
    fetch('/admin/api/bot/restart', { method: 'POST' })
      .then(response => response.json())
      .then(data => {
        alert(data.message || 'Bot restart initiated');
      })
      .catch(error => {
        console.error('Error restarting bot:', error);
        alert('Failed to restart bot. Check console for details.');
      });
  }
  
  function toggleBotStatus() {
    const botStatus = document.getElementById('botStatusText').textContent.toLowerCase();
    const action = botStatus === 'online' ? 'stop' : 'start';
    
    fetch(`/admin/api/bot/${action}`, { method: 'POST' })
      .then(response => response.json())
      .then(data => {
        alert(data.message || `Bot ${action} initiated`);
      })
      .catch(error => {
        console.error(`Error ${action}ing bot:`, error);
        alert(`Failed to ${action} bot. Check console for details.`);
      });
  }
  
  // Initialize card refresh buttons
  document.querySelectorAll('.card-action-btn').forEach(btn => {
    if (btn.title === 'Refresh') {
      btn.addEventListener('click', function() {
        const icon = this.querySelector('i');
        this.disabled = true;
        icon.classList.add('fa-spin');
        
        // Simulate refresh delay
        setTimeout(() => {
          this.disabled = false;
          icon.classList.remove('fa-spin');
        }, 1000);
      });
    }
  });
</script>

<style>
  .dashboard-header {
    margin-bottom: 2rem;
  }
  
  .dashboard-header h1 {
    font-size: 2.2rem;
    font-weight: 800;
    font-family: var(--font-secondary);
    margin-bottom: 0.5rem;
  }
  
  .dashboard-subtitle {
    font-size: 1.1rem;
    color: var(--text-secondary);
    margin-bottom: 1.5rem;
  }
</style>
