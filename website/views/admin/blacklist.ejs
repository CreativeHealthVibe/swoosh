<%- include('../partials/header') %>

<div class="container-fluid admin-dashboard">
  <div class="row">
    <!-- Sidebar -->
    <%- include('./partials/sidebar', { activeNav: 'admin-blacklist' }) %>

    <!-- Main Content -->
    <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
      <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h1 class="h2"><i class="fas fa-ban"></i> Blacklist Management</h1>
        <div class="btn-toolbar mb-2 mb-md-0">
          <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addBlacklistModal">
            <i class="fas fa-plus"></i> Add User
          </button>
        </div>
      </div>

      <!-- Alert box for feedback -->
      <div id="alertBox" class="alert d-none">
        <span id="alertMessage"></span>
      </div>

      <!-- Blacklist Table -->
      <div class="card">
        <div class="card-header">
          <div class="row align-items-center">
            <div class="col">
              <h5 class="mb-0">Blacklisted Users</h5>
            </div>
            <div class="col-auto">
              <input type="text" id="searchBlacklist" class="form-control form-control-sm" placeholder="Search users...">
            </div>
          </div>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table table-hover table-striped mb-0">
              <thead class="table-dark">
                <tr>
                  <th>User ID</th>
                  <th>Username</th>
                  <th>Reason</th>
                  <th>Added By</th>
                  <th>Date</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="blacklistTableBody">
                <% if (blacklistedUsers && blacklistedUsers.length > 0) { %>
                  <% blacklistedUsers.forEach(user => { %>
                    <tr>
                      <td><%= user.userId %></td>
                      <td><%= user.username %></td>
                      <td><%= user.reason %></td>
                      <td><%= user.moderatorTag %></td>
                      <td><%= new Date(user.timestamp).toLocaleString() %></td>
                      <td>
                        <button class="btn btn-sm btn-danger remove-blacklist" data-userid="<%= user.userId %>">
                          <i class="fas fa-trash"></i>
                        </button>
                      </td>
                    </tr>
                  <% }); %>
                <% } else { %>
                  <tr>
                    <td colspan="6" class="text-center">No users are currently blacklisted.</td>
                  </tr>
                <% } %>
              </tbody>
            </table>
          </div>
        </div>
        <div class="card-footer">
          <small class="text-muted">Total blacklisted users: <%= blacklistedUsers ? blacklistedUsers.length : 0 %></small>
        </div>
      </div>

      <!-- Information Panel -->
      <div class="card mt-4">
        <div class="card-header">
          <h5 class="mb-0"><i class="fas fa-info-circle"></i> About Blacklisting</h5>
        </div>
        <div class="card-body">
          <p>Blacklisted users will be prevented from using any bot commands or interacting with the bot. This is useful for preventing abuse or spam.</p>
          <p>Users can be blacklisted for the following reasons:</p>
          <ul>
            <li>Spamming bot commands</li>
            <li>Abusing bot features</li>
            <li>Harassment or toxic behavior</li>
            <li>Attempting to exploit vulnerabilities</li>
          </ul>
          <p><strong>Note:</strong> Blacklisting should be used responsibly and as a last resort after warnings have been given.</p>
        </div>
      </div>
    </main>
  </div>
</div>

<!-- Add Blacklist Modal -->
<div class="modal fade" id="addBlacklistModal" tabindex="-1" aria-labelledby="addBlacklistModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addBlacklistModalLabel"><i class="fas fa-ban"></i> Add User to Blacklist</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="addBlacklistForm">
          <div class="mb-3">
            <label for="userId" class="form-label">User ID</label>
            <input type="text" class="form-control" id="userId" required placeholder="Enter Discord user ID">
            <small class="form-text text-muted">The Discord user ID of the user to blacklist.</small>
          </div>
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" class="form-control" id="username" placeholder="Enter username (optional)">
            <small class="form-text text-muted">Optional: The username of the user for easier identification.</small>
          </div>
          <div class="mb-3">
            <label for="reason" class="form-label">Reason</label>
            <textarea class="form-control" id="reason" rows="3" required placeholder="Enter reason for blacklisting"></textarea>
            <small class="form-text text-muted">Provide a clear reason why this user is being blacklisted.</small>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="submitBlacklist">Add to Blacklist</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Add user to blacklist
    document.getElementById('submitBlacklist').addEventListener('click', function() {
      const userId = document.getElementById('userId').value.trim();
      const username = document.getElementById('username').value.trim();
      const reason = document.getElementById('reason').value.trim();
      
      if (!userId || !reason) {
        showAlert('User ID and reason are required.', 'danger');
        return;
      }
      
      fetch('/api/blacklist/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userId, username, reason }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          showAlert(data.message, 'success');
          
          // Close modal and reset form
          document.getElementById('addBlacklistForm').reset();
          const modal = bootstrap.Modal.getInstance(document.getElementById('addBlacklistModal'));
          modal.hide();
          
          // Reload the page to show updated blacklist
          setTimeout(() => {
            location.reload();
          }, 1500);
        } else {
          showAlert(data.message, 'danger');
        }
      })
      .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while adding the user to the blacklist.', 'danger');
      });
    });
    
    // Remove user from blacklist
    document.querySelectorAll('.remove-blacklist').forEach(button => {
      button.addEventListener('click', function() {
        const userId = this.getAttribute('data-userid');
        
        if (confirm('Are you sure you want to remove this user from the blacklist?')) {
          fetch('/api/blacklist/remove', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ userId }),
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              showAlert(data.message, 'success');
              
              // Remove the row from the table
              this.closest('tr').remove();
              
              // If no rows left, add a "no users" message
              if (document.querySelectorAll('#blacklistTableBody tr').length === 0) {
                const noUsersRow = document.createElement('tr');
                noUsersRow.innerHTML = '<td colspan="6" class="text-center">No users are currently blacklisted.</td>';
                document.getElementById('blacklistTableBody').appendChild(noUsersRow);
              }
              
              // Update the count
              const countElement = document.querySelector('.card-footer small');
              const currentCount = parseInt(countElement.textContent.match(/\d+/)[0]) - 1;
              countElement.textContent = `Total blacklisted users: ${currentCount}`;
            } else {
              showAlert(data.message, 'danger');
            }
          })
          .catch(error => {
            console.error('Error:', error);
            showAlert('An error occurred while removing the user from the blacklist.', 'danger');
          });
        }
      });
    });
    
    // Search functionality
    document.getElementById('searchBlacklist').addEventListener('input', function() {
      const searchValue = this.value.toLowerCase();
      
      document.querySelectorAll('#blacklistTableBody tr').forEach(row => {
        let matchFound = false;
        
        // Skip the "no users" row
        if (row.cells.length === 1 && row.cells[0].colSpan === 6) {
          return;
        }
        
        // Search in userId, username, and reason
        for (let i = 0; i < 3; i++) {
          if (row.cells[i].textContent.toLowerCase().includes(searchValue)) {
            matchFound = true;
            break;
          }
        }
        
        row.style.display = matchFound ? '' : 'none';
      });
    });
    
    // Show alert function
    function showAlert(message, type) {
      const alertBox = document.getElementById('alertBox');
      const alertMessage = document.getElementById('alertMessage');
      
      alertBox.className = `alert alert-${type}`;
      alertMessage.textContent = message;
      alertBox.classList.remove('d-none');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        alertBox.classList.add('d-none');
      }, 5000);
    }
  });
</script>

<%- include('../partials/footer') %>
