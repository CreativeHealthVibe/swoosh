<%- include('../partials/admin-header-fixed') %>

<div class="admin-page-header">
  <div class="header-content">
    <h1><i class="fas fa-users"></i> Member Tracker</h1>
    <p>Track server members across all servers your bot is in.</p>
  </div>
</div>

<% if (error) { %>
  <div class="alert alert-danger">
    <i class="fas fa-exclamation-triangle"></i> Error: <%= error %>
  </div>
<% } %>

<div class="stats-overview">
  <div class="stat-card">
    <div class="stat-icon"><i class="fas fa-users"></i></div>
    <div class="stat-content">
      <h3>Total Members</h3>
      <div class="stat-value"><%= totalMembers.toLocaleString() %></div>
    </div>
  </div>
  
  <div class="stat-card">
    <div class="stat-icon"><i class="fas fa-signal"></i></div>
    <div class="stat-content">
      <h3>Online Members</h3>
      <div class="stat-value"><%= totalOnline.toLocaleString() %></div>
      <div class="stat-subtitle"><%= Math.round((totalOnline / totalMembers) * 100) || 0 %>% online</div>
    </div>
  </div>
  
  <div class="stat-card">
    <div class="stat-icon"><i class="fas fa-calendar-plus"></i></div>
    <div class="stat-content">
      <h3>New This Week</h3>
      <div class="stat-value"><%= newMembers.length.toLocaleString() %></div>
    </div>
  </div>
</div>

<div class="card">
  <div class="card-header">
    <h2>New Members (Last 7 Days)</h2>
    <p>The most recent members to join your servers.</p>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="data-table">
        <thead>
          <tr>
            <th>User</th>
            <th>Display Name</th>
            <th>Server</th>
            <th>Joined</th>
            <th>Type</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (newMembers.length === 0) { %>
            <tr>
              <td colspan="6" class="text-center">No new members in the last 7 days.</td>
            </tr>
          <% } else { %>
            <% newMembers.forEach((member, index) => { %>
              <tr>
                <td class="user-cell">
                  <div class="user-avatar">
                    <img src="<%= member.avatarURL %>" alt="<%= member.username %>'s avatar" onerror="this.onerror=null; this.src='/images/default-avatar.png';">
                  </div>
                  <div class="user-info">
                    <%= member.username %>
                    <span class="user-id"><%= member.id %></span>
                  </div>
                </td>
                <td><%= member.displayName %></td>
                <td><%= member.guildName %></td>
                <td>
                  <span title="<%= member.joinedAt.toLocaleString() %>">
                    <%= new Date(member.joinedAt).toLocaleDateString() %>
                  </span>
                </td>
                <td>
                  <% if (member.bot) { %>
                    <span class="badge bot">Bot</span>
                  <% } else { %>
                    <span class="badge user">User</span>
                  <% } %>
                </td>
                <td>
                  <div class="member-actions" data-member-id="<%= member.id %>" data-username="<%= member.username %>" data-guild-name="<%= member.guildName %>">
                    <button class="actions-btn"><i class="fas fa-ellipsis-v"></i></button>
                    <div class="actions-dropdown">
                      <div class="actions-dropdown-item" onclick="openDmModal('<%= member.id %>', '<%= member.username %>')">
                        <i class="fas fa-envelope"></i> Send DM
                      </div>
                      <div class="actions-dropdown-item warning" onclick="openTimeoutModal('<%= member.id %>', '<%= member.username %>', '<%= member.guildName %>')">
                        <i class="fas fa-clock"></i> Timeout
                      </div>
                      <div class="actions-dropdown-item warning" onclick="openWarnModal('<%= member.id %>', '<%= member.username %>')">
                        <i class="fas fa-exclamation-triangle"></i> Warn
                      </div>
                      <div class="actions-dropdown-item" onclick="viewWarnings('<%= member.id %>', '<%= member.username %>')">
                        <i class="fas fa-history"></i> View Warnings
                      </div>
                      <div class="actions-dropdown-item danger" onclick="openKickModal('<%= member.id %>', '<%= member.username %>', '<%= member.guildName %>')">
                        <i class="fas fa-user-minus"></i> Kick
                      </div>
                      <div class="actions-dropdown-item danger" onclick="openBanModal('<%= member.id %>', '<%= member.username %>', '<%= member.guildName %>')">
                        <i class="fas fa-gavel"></i> Ban
                      </div>
                    </div>
                  </div>
                </td>
              </tr>
            <% }) %>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<div class="card">
  <div class="card-header">
    <h2>Server Overview</h2>
    <p>Member counts for each server the bot is in.</p>
  </div>
  <div class="card-body">
    <div class="table-responsive">
      <table class="data-table">
        <thead>
          <tr>
            <th>Server</th>
            <th>Owner</th>
            <th>Region</th>
            <th>Members</th>
            <th>Online</th>
          </tr>
        </thead>
        <tbody>
          <% if (memberData.length === 0) { %>
            <tr>
              <td colspan="5" class="text-center">No servers available.</td>
            </tr>
          <% } else { %>
            <% memberData.forEach(guild => { %>
              <tr>
                <td class="server-cell">
                  <% if (guild.iconURL) { %>
                    <img src="<%= guild.iconURL %>" alt="<%= guild.name %> icon" class="server-icon" 
                         onerror="this.onerror=null; this.src='/images/default-server.png';">
                  <% } else { %>
                    <div class="server-icon-placeholder">
                      <%= guild.name.charAt(0).toUpperCase() %>
                    </div>
                  <% } %>
                  <%= guild.name %>
                </td>
                <td><%= guild.owner %></td>
                <td><%= guild.region %></td>
                <td><%= guild.totalMembers.toLocaleString() %></td>
                <td>
                  <%= guild.onlineMembers.toLocaleString() %> 
                  (<%= Math.round((guild.onlineMembers / guild.totalMembers) * 100) %>%)
                </td>
              </tr>
            <% }) %>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<!-- DM Modal -->
<div id="dmModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title">Send DM to <span id="dmUsername"></span></h3>
      <button class="modal-close" onclick="closeModal('dmModal')">&times;</button>
    </div>
    <div class="modal-body">
      <textarea id="dmContent" class="modal-textarea" placeholder="Enter your message..."></textarea>
      <input type="hidden" id="dmUserId">
    </div>
    <div class="modal-footer">
      <button class="modal-btn modal-btn-cancel" onclick="closeModal('dmModal')">Cancel</button>
      <button class="modal-btn modal-btn-primary" onclick="sendDm()">Send Message</button>
    </div>
  </div>
</div>

<!-- Kick Modal -->
<div id="kickModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title">Kick <span id="kickUsername"></span></h3>
      <button class="modal-close" onclick="closeModal('kickModal')">&times;</button>
    </div>
    <div class="modal-body">
      <p>Are you sure you want to kick this user from <span id="kickGuildName"></span>?</p>
      <input type="text" id="kickReason" class="modal-input" placeholder="Reason (optional)">
      <input type="hidden" id="kickUserId">
      <input type="hidden" id="kickGuild">
    </div>
    <div class="modal-footer">
      <button class="modal-btn modal-btn-cancel" onclick="closeModal('kickModal')">Cancel</button>
      <button class="modal-btn modal-btn-danger" onclick="kickUser()">Kick User</button>
    </div>
  </div>
</div>

<!-- Ban Modal -->
<div id="banModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title">Ban <span id="banUsername"></span></h3>
      <button class="modal-close" onclick="closeModal('banModal')">&times;</button>
    </div>
    <div class="modal-body">
      <p>Are you sure you want to ban this user from <span id="banGuildName"></span>?</p>
      <input type="text" id="banReason" class="modal-input" placeholder="Reason (optional)">
      <div style="margin-bottom: 15px;">
        <label>
          <input type="checkbox" id="banDeleteMessages"> Delete recent messages
        </label>
      </div>
      <input type="hidden" id="banUserId">
      <input type="hidden" id="banGuild">
    </div>
    <div class="modal-footer">
      <button class="modal-btn modal-btn-cancel" onclick="closeModal('banModal')">Cancel</button>
      <button class="modal-btn modal-btn-danger" onclick="banUser()">Ban User</button>
    </div>
  </div>
</div>

<!-- Timeout Modal -->
<div id="timeoutModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title">Timeout <span id="timeoutUsername"></span></h3>
      <button class="modal-close" onclick="closeModal('timeoutModal')">&times;</button>
    </div>
    <div class="modal-body">
      <p>Set a timeout duration for this user in <span id="timeoutGuildName"></span>:</p>
      <select id="timeoutDuration" class="modal-input">
        <option value="60000">1 minute</option>
        <option value="300000">5 minutes</option>
        <option value="900000">15 minutes</option>
        <option value="1800000">30 minutes</option>
        <option value="3600000">1 hour</option>
        <option value="21600000">6 hours</option>
        <option value="86400000">1 day</option>
        <option value="604800000">1 week</option>
      </select>
      <input type="text" id="timeoutReason" class="modal-input" placeholder="Reason (optional)">
      <input type="hidden" id="timeoutUserId">
      <input type="hidden" id="timeoutGuild">
    </div>
    <div class="modal-footer">
      <button class="modal-btn modal-btn-cancel" onclick="closeModal('timeoutModal')">Cancel</button>
      <button class="modal-btn modal-btn-warning" onclick="timeoutUser()">Timeout User</button>
    </div>
  </div>
</div>

<!-- Warn Modal -->
<div id="warnModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title">Warn <span id="warnUsername"></span></h3>
      <button class="modal-close" onclick="closeModal('warnModal')">&times;</button>
    </div>
    <div class="modal-body">
      <p>Send a warning to this user:</p>
      <input type="text" id="warnReason" class="modal-input" placeholder="Warning reason (required)" required>
      <input type="hidden" id="warnUserId">
    </div>
    <div class="modal-footer">
      <button class="modal-btn modal-btn-cancel" onclick="closeModal('warnModal')">Cancel</button>
      <button class="modal-btn modal-btn-warning" onclick="warnUser()">Warn User</button>
    </div>
  </div>
</div>

<!-- Warnings Modal -->
<div id="warningsModal" class="modal">
  <div class="modal-content">
    <div class="modal-header">
      <h3 class="modal-title">Warnings for <span id="warningsUsername"></span></h3>
      <button class="modal-close" onclick="closeModal('warningsModal')">&times;</button>
    </div>
    <div class="modal-body">
      <div id="warningsContent">
        <p class="text-center">Loading warnings...</p>
      </div>
    </div>
    <div class="modal-footer">
      <button class="modal-btn modal-btn-cancel" onclick="closeModal('warningsModal')">Close</button>
    </div>
  </div>
</div>

<style>
  /* Member tracker specific styles */
  .stats-overview {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .stat-card {
    background: var(--card-bg);
    border-radius: var(--border-radius);
    padding: 1.5rem;
    display: flex;
    align-items: center;
    box-shadow: var(--card-shadow);
    border: 1px solid rgba(156, 77, 255, 0.2);
  }
  
  .stat-icon {
    font-size: 2rem;
    margin-right: 1rem;
    color: var(--primary-color);
    width: 50px;
    height: 50px;
    background: rgba(156, 77, 255, 0.15);
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .stat-content h3 {
    margin: 0;
    font-size: 0.85rem;
    color: var(--text-secondary);
  }
  
  .stat-value {
    font-size: 1.75rem;
    font-weight: 700;
    margin-top: 0.25rem;
    color: var(--text-primary);
  }
  
  .stat-subtitle {
    font-size: 0.75rem;
    color: var(--text-secondary);
    margin-top: 0.25rem;
  }
  
  .card {
    background: var(--card-bg);
    border-radius: var(--border-radius);
    margin-bottom: 2rem;
    overflow: hidden;
    box-shadow: var(--card-shadow);
    border: 1px solid rgba(156, 77, 255, 0.2);
  }
  
  .card-header {
    padding: 1.5rem;
    border-bottom: 1px solid rgba(156, 77, 255, 0.2);
  }
  
  .card-header h2 {
    margin: 0;
    font-size: 1.25rem;
    color: var(--text-primary);
  }
  
  .card-header p {
    margin: 0.5rem 0 0;
    color: var(--text-secondary);
    font-size: 0.9rem;
  }
  
  .card-body {
    padding: 1.5rem;
  }
  
  .table-responsive {
    overflow-x: auto;
  }
  
  .data-table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .data-table th, 
  .data-table td {
    padding: 0.75rem 1rem;
    text-align: left;
  }
  
  .data-table th {
    color: var(--text-secondary);
    font-weight: 500;
    font-size: 0.85rem;
    text-transform: uppercase;
  }
  
  .data-table tbody tr {
    border-bottom: 1px solid rgba(156, 77, 255, 0.1);
    transition: background-color 0.3s ease;
  }
  
  .data-table tbody tr:last-child {
    border-bottom: none;
  }
  
  .data-table tbody tr:hover {
    background-color: rgba(156, 77, 255, 0.05);
  }
  
  .user-cell, .server-cell {
    display: flex;
    align-items: center;
  }
  
  .user-avatar img, .server-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 0.75rem;
    object-fit: cover;
  }
  
  .server-icon-placeholder {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    margin-right: 0.75rem;
    background: var(--primary-color);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: 600;
  }
  
  .user-info {
    display: flex;
    flex-direction: column;
  }
  
  .user-id {
    font-size: 0.75rem;
    color: var(--text-muted);
  }
  
  .badge {
    padding: 0.25rem 0.5rem;
    border-radius: 999px;
    font-size: 0.75rem;
    font-weight: 600;
    display: inline-block;
  }
  
  .badge.bot {
    background-color: rgba(81, 154, 186, 0.2);
    color: #51AABE;
  }
  
  .badge.user {
    background-color: rgba(87, 242, 135, 0.2);
    color: #57F287;
  }
  
  .alert {
    padding: 1rem;
    border-radius: var(--border-radius);
    margin-bottom: 1.5rem;
    color: white;
    display: flex;
    align-items: center;
  }
  
  .alert i {
    margin-right: 0.75rem;
  }
  
  .alert-danger {
    background-color: rgba(237, 66, 69, 0.2);
    border: 1px solid rgba(237, 66, 69, 0.5);
    color: #ED4245;
  }
  
  .admin-page-header {
    margin-bottom: 2rem;
  }
  
  .admin-page-header h1 {
    margin: 0;
    font-size: 1.75rem;
    display: flex;
    align-items: center;
  }
  
  .admin-page-header h1 i {
    margin-right: 0.75rem;
    color: var(--primary-color);
  }
  
  .admin-page-header p {
    margin: 0.5rem 0 0;
    color: var(--text-secondary);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .stats-overview {
      grid-template-columns: 1fr;
    }
    
    .data-table {
      min-width: 600px;
    }
  }
</style>

<link rel="stylesheet" href="/css/member-actions.css">

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Set up action buttons
    const actionButtons = document.querySelectorAll('.actions-btn');
    
    actionButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.stopPropagation();
        const parentAction = this.closest('.member-actions');
        
        // Close all other dropdowns
        document.querySelectorAll('.member-actions.active').forEach(el => {
          if (el !== parentAction) {
            el.classList.remove('active');
          }
        });
        
        // Toggle this dropdown
        parentAction.classList.toggle('active');
      });
    });
    
    // Close dropdowns when clicking elsewhere
    document.addEventListener('click', function(e) {
      if (!e.target.closest('.member-actions')) {
        document.querySelectorAll('.member-actions.active').forEach(el => {
          el.classList.remove('active');
        });
      }
    });
  });
  
  // Modal functions
  function openModal(modalId) {
    document.getElementById(modalId).classList.add('active');
  }
  
  function closeModal(modalId) {
    document.getElementById(modalId).classList.remove('active');
  }
  
  function openDmModal(userId, username) {
    document.getElementById('dmUserId').value = userId;
    document.getElementById('dmUsername').textContent = username;
    openModal('dmModal');
  }
  
  function sendDm() {
    const userId = document.getElementById('dmUserId').value;
    const content = document.getElementById('dmContent').value.trim();
    
    if (!content) {
      alert('Please enter a message');
      return;
    }
    
    fetch('/api/admin/members/send-dm', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId,
        content
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Message sent successfully');
        closeModal('dmModal');
        document.getElementById('dmContent').value = '';
      } else {
        alert('Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error sending DM:', error);
      alert('An error occurred while sending the message');
    });
  }
  
  function openKickModal(userId, username, guildName) {
    document.getElementById('kickUserId').value = userId;
    document.getElementById('kickUsername').textContent = username;
    document.getElementById('kickGuild').value = guildName;
    document.getElementById('kickGuildName').textContent = guildName;
    openModal('kickModal');
  }
  
  function kickUser() {
    const userId = document.getElementById('kickUserId').value;
    const guildName = document.getElementById('kickGuild').value;
    const reason = document.getElementById('kickReason').value;
    
    fetch('/api/admin/members/kick', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId,
        guildName,
        reason
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('User kicked successfully');
        closeModal('kickModal');
        document.getElementById('kickReason').value = '';
      } else {
        alert('Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error kicking user:', error);
      alert('An error occurred while kicking the user');
    });
  }
  
  function openBanModal(userId, username, guildName) {
    document.getElementById('banUserId').value = userId;
    document.getElementById('banUsername').textContent = username;
    document.getElementById('banGuild').value = guildName;
    document.getElementById('banGuildName').textContent = guildName;
    openModal('banModal');
  }
  
  function banUser() {
    const userId = document.getElementById('banUserId').value;
    const guildName = document.getElementById('banGuild').value;
    const reason = document.getElementById('banReason').value;
    const deleteMessages = document.getElementById('banDeleteMessages').checked;
    
    fetch('/api/admin/members/ban', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId,
        guildName,
        reason,
        deleteMessages
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('User banned successfully');
        closeModal('banModal');
        document.getElementById('banReason').value = '';
        document.getElementById('banDeleteMessages').checked = false;
      } else {
        alert('Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error banning user:', error);
      alert('An error occurred while banning the user');
    });
  }
  
  function openTimeoutModal(userId, username, guildName) {
    document.getElementById('timeoutUserId').value = userId;
    document.getElementById('timeoutUsername').textContent = username;
    document.getElementById('timeoutGuild').value = guildName;
    document.getElementById('timeoutGuildName').textContent = guildName;
    openModal('timeoutModal');
  }
  
  function timeoutUser() {
    const userId = document.getElementById('timeoutUserId').value;
    const guildName = document.getElementById('timeoutGuild').value;
    const reason = document.getElementById('timeoutReason').value;
    const duration = document.getElementById('timeoutDuration').value;
    
    fetch('/api/admin/members/timeout', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId,
        guildName,
        reason,
        duration
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('User timed out successfully');
        closeModal('timeoutModal');
        document.getElementById('timeoutReason').value = '';
      } else {
        alert('Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error timing out user:', error);
      alert('An error occurred while timing out the user');
    });
  }
  
  function openWarnModal(userId, username) {
    document.getElementById('warnUserId').value = userId;
    document.getElementById('warnUsername').textContent = username;
    openModal('warnModal');
  }
  
  function warnUser() {
    const userId = document.getElementById('warnUserId').value;
    const reason = document.getElementById('warnReason').value.trim();
    
    if (!reason) {
      alert('Please provide a reason for the warning');
      return;
    }
    
    fetch('/api/admin/members/warn', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        userId,
        reason
      })
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        alert('Warning sent successfully');
        closeModal('warnModal');
        document.getElementById('warnReason').value = '';
      } else {
        alert('Error: ' + data.message);
      }
    })
    .catch(error => {
      console.error('Error warning user:', error);
      alert('An error occurred while warning the user');
    });
  }
  
  function viewWarnings(userId, username) {
    document.getElementById('warningsUsername').textContent = username;
    
    // Clear previous content and show loading
    const warningsContent = document.getElementById('warningsContent');
    warningsContent.innerHTML = '<p class="text-center">Loading warnings...</p>';
    
    openModal('warningsModal');
    
    fetch(`/api/admin/members/warnings/${userId}`)
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          const warnings = data.warnings;
          
          if (warnings.length === 0) {
            warningsContent.innerHTML = '<p class="text-center">No warnings found for this user.</p>';
            return;
          }
          
          let html = '<div class="warnings-list">';
          warnings.forEach((warning, index) => {
            const date = new Date(warning.timestamp).toLocaleString();
            html += `
              <div class="warning-item">
                <div class="warning-header">
                  <span class="warning-number">#${index + 1}</span>
                  <span class="warning-date">${date}</span>
                </div>
                <div class="warning-reason">${warning.reason}</div>
                <div class="warning-issuer">Issued by: ${warning.issuer}</div>
              </div>
            `;
          });
          html += '</div>';
          
          warningsContent.innerHTML = html;
        } else {
          warningsContent.innerHTML = `<p class="text-center text-error">Error: ${data.message}</p>`;
        }
      })
      .catch(error => {
        console.error('Error fetching warnings:', error);
        warningsContent.innerHTML = '<p class="text-center text-error">An error occurred while fetching warnings</p>';
      });
  }
</script>

<style>
  .warnings-list {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .warning-item {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 8px;
    padding: 15px;
    border-left: 3px solid var(--warning-color);
  }
  
  .warning-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
  }
  
  .warning-number {
    font-weight: 600;
    color: var(--warning-color);
  }
  
  .warning-date {
    font-size: 0.85rem;
    color: var(--text-muted);
  }
  
  .warning-reason {
    font-size: 1rem;
    margin-bottom: 8px;
  }
  
  .warning-issuer {
    font-size: 0.85rem;
    color: var(--text-secondary);
  }
  
  .text-center {
    text-align: center;
  }
  
  .text-error {
    color: var(--danger-color);
  }
  
  .modal-btn-warning {
    background: var(--warning-color);
    color: #000000;
  }
  
  .modal-btn-warning:hover {
    background: #d8c64f;
  }
</style>

<%- include('../partials/admin-footer') %>
