<% 
  // Set variables for the template
  title = 'SWOOSH Bot - Dashboard';
  path = '/dashboard';
%>

<div class="dashboard-container">
  <div class="page-header">
    <h1>Server Health Dashboard</h1>
    <p>Real-time monitoring of SWOOSH Bot system resources</p>
  </div>

  <div class="update-info">
    <i class="fas fa-sync-alt fa-spin"></i> Live updates every 2 seconds
  </div>

  <div class="dashboard-grid">
    <!-- CPU Usage Card -->
    <div class="dashboard-card">
      <div class="card-header">
        <i class="fas fa-microchip"></i> CPU Usage
      </div>
      <div class="card-content">
        <div class="gauge-container">
          <div class="gauge-wrapper">
            <div class="gauge" id="cpu-gauge">
              <div class="gauge-half"></div>
              <div class="gauge-inner"></div>
              <div class="gauge-value" id="cpu-value">0%</div>
            </div>
          </div>
        </div>
        <div class="gauge-details">
          <div class="detail-item">
            <span class="detail-label">Cores:</span>
            <span class="detail-value" id="cpu-cores">0</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Load Avg:</span>
            <span class="detail-value" id="load-avg">0.00, 0.00, 0.00</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Memory Usage Card -->
    <div class="dashboard-card">
      <div class="card-header">
        <i class="fas fa-memory"></i> Memory Usage
      </div>
      <div class="card-content">
        <div class="gauge-container">
          <div class="gauge-wrapper">
            <div class="gauge" id="memory-gauge">
              <div class="gauge-half"></div>
              <div class="gauge-inner"></div>
              <div class="gauge-value" id="memory-value">0%</div>
            </div>
          </div>
        </div>
        <div class="gauge-details">
          <div class="detail-item">
            <span class="detail-label">Total:</span>
            <span class="detail-value" id="memory-total">0 GB</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Used:</span>
            <span class="detail-value" id="memory-used">0 GB</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Uptime Card -->
    <div class="dashboard-card">
      <div class="card-header">
        <i class="fas fa-clock"></i> Uptime
      </div>
      <div class="card-content uptime-content">
        <div class="uptime-display">
          <div class="uptime-days">
            <span class="uptime-number" id="uptime-days">0</span>
            <span class="uptime-label">Days</span>
          </div>
          <div class="uptime-time" id="uptime-time">
            00:00:00
          </div>
        </div>
        <div class="uptime-started">
          <span class="detail-label">Started:</span>
          <span class="detail-value" id="start-time"><%= new Date().toLocaleString() %></span>
        </div>
      </div>
    </div>
  </div>

  <div class="dashboard-row">
    <!-- Discord Status Card -->
    <div class="dashboard-card status-stats-card">
      <div class="card-header">
        <i class="fab fa-discord"></i> Discord Status
      </div>
      <div class="card-content">
        <div class="status-stats">
          <div class="status-stat-item">
            <div class="stat-value" id="server-count"><%= guilds %></div>
            <div class="stat-label">Servers</div>
          </div>
          <div class="status-stat-item">
            <div class="stat-value" id="user-count"><%= users %></div>
            <div class="stat-label">Users</div>
          </div>
          <div class="status-stat-item">
            <div class="stat-value" id="channel-count"><%= channels %></div>
            <div class="stat-label">Channels</div>
          </div>
          <div class="status-stat-item">
            <div class="stat-value" id="ping-value"><%= client.ws.ping %> ms</div>
            <div class="stat-label">Ping</div>
          </div>
        </div>
      </div>
    </div>

    <!-- System Information Card -->
    <div class="dashboard-card system-info-card">
      <div class="card-header">
        <i class="fas fa-server"></i> System Information
      </div>
      <div class="card-content">
        <div class="system-info">
          <div class="system-info-item">
            <span class="info-label">Platform:</span>
            <span class="info-value" id="platform"><%= process.platform %> (<%= process.arch %>)</span>
          </div>
          <div class="system-info-item">
            <span class="info-label">Hostname:</span>
            <span class="info-value" id="hostname"><%= require('os').hostname() %></span>
          </div>
          <div class="system-info-item">
            <span class="info-label">Node.js:</span>
            <span class="info-value" id="node-version"><%= process.version %></span>
          </div>
          <div class="system-info-item">
            <span class="info-label">Discord.js:</span>
            <span class="info-value" id="discord-version">14.18.0</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Command Usage Card -->
  <div class="dashboard-card command-usage-card">
    <div class="card-header">
      <i class="fas fa-terminal"></i> Command Usage
    </div>
    <div class="card-content">
      <div class="command-chart-container">
        <canvas id="commandUsageChart"></canvas>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize gauges with default values
    updateCPUGauge(54);
    updateMemoryGauge(78);
    
    // Set system info
    document.getElementById('cpu-cores').textContent = '8';
    document.getElementById('load-avg').textContent = '7.82, 7.05, 7.10';
    document.getElementById('memory-total').textContent = '30.65 GB';
    document.getElementById('memory-used').textContent = '0.09 GB';
    
    // Set uptime info
    document.getElementById('uptime-days').textContent = '0';
    document.getElementById('uptime-time').textContent = '02:13:00';
    document.getElementById('start-time').textContent = '4/6/2025, 5:06:35 PM';
    
    // Set Discord stats
    document.getElementById('server-count').textContent = '<%= guilds %>';
    document.getElementById('user-count').textContent = '<%= users %>';
    document.getElementById('channel-count').textContent = '<%= channels %>';
    document.getElementById('ping-value').textContent = '<%= client.ws.ping %> ms';
    
    // Command usage chart
    const commandCtx = document.getElementById('commandUsageChart').getContext('2d');
    const commandChart = new Chart(commandCtx, {
      type: 'bar',
      data: {
        labels: ['help', 'ban', 'kick', 'mute', 'unmute', 'blacklist', 'send', 'purge', 'role'],
        datasets: [{
          label: 'Command Executions',
          data: [42, 18, 15, 12, 10, 8, 25, 20, 15],
          backgroundColor: '#9c4dff',
          borderColor: '#7c3acd',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            display: false
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: {
              color: 'rgba(255, 255, 255, 0.1)'
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          },
          x: {
            grid: {
              display: false
            },
            ticks: {
              color: 'rgba(255, 255, 255, 0.7)'
            }
          }
        }
      }
    });
    
    // Live updates
    let uptimeSec = 0;
    let uptimeMin = 13;
    let uptimeHour = 2;
    let uptimeDay = 0;
    
    function updateUptime() {
      uptimeSec++;
      if (uptimeSec >= 60) {
        uptimeSec = 0;
        uptimeMin++;
        if (uptimeMin >= 60) {
          uptimeMin = 0;
          uptimeHour++;
          if (uptimeHour >= 24) {
            uptimeHour = 0;
            uptimeDay++;
          }
        }
      }
      
      const formattedTime = 
        `${uptimeHour.toString().padStart(2, '0')}:${uptimeMin.toString().padStart(2, '0')}:${uptimeSec.toString().padStart(2, '0')}`;
      document.getElementById('uptime-days').textContent = uptimeDay;
      document.getElementById('uptime-time').textContent = formattedTime;
    }
    
    function updateStats() {
      // Simulate CPU and memory fluctuations
      const cpuValue = Math.floor(50 + Math.sin(Date.now() / 10000) * 7);
      const memValue = Math.floor(75 + Math.sin(Date.now() / 15000) * 5);
      
      updateCPUGauge(cpuValue);
      updateMemoryGauge(memValue);
      
      const pingValue = Math.floor(80 + Math.sin(Date.now() / 5000) * 20);
      document.getElementById('ping-value').textContent = `${pingValue} ms`;
    }
    
    // Update CPU gauge
    function updateCPUGauge(value) {
      const gauge = document.getElementById('cpu-gauge');
      const valueDisplay = document.getElementById('cpu-value');
      
      // Calculate rotation based on value (0-100)
      const rotation = (value / 100) * 180;
      gauge.style.setProperty('--gauge-value', `${value}%`);
      gauge.style.setProperty('--gauge-rotation', `${rotation}deg`);
      valueDisplay.textContent = `${value}%`;
      
      // Update color based on value
      let color;
      if (value < 50) {
        color = '#43b581'; // green
      } else if (value < 80) {
        color = '#faa61a'; // yellow
      } else {
        color = '#f04747'; // red
      }
      gauge.style.setProperty('--gauge-color', color);
    }
    
    // Update Memory gauge
    function updateMemoryGauge(value) {
      const gauge = document.getElementById('memory-gauge');
      const valueDisplay = document.getElementById('memory-value');
      
      // Calculate rotation based on value (0-100)
      const rotation = (value / 100) * 180;
      gauge.style.setProperty('--gauge-value', `${value}%`);
      gauge.style.setProperty('--gauge-rotation', `${rotation}deg`);
      valueDisplay.textContent = `${value}%`;
      
      // Update color based on value
      let color;
      if (value < 50) {
        color = '#43b581'; // green
      } else if (value < 80) {
        color = '#faa61a'; // yellow
      } else {
        color = '#f04747'; // red
      }
      gauge.style.setProperty('--gauge-color', color);
    }
    
    // Start live updates
    setInterval(updateStats, 2000);
    setInterval(updateUptime, 1000);
  });
</script>