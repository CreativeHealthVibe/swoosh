const { app, BrowserWindow, Menu, Tray, ipcMain, dialog } = require('electron');
const path = require('path');
const { fork } = require('child_process');
const fs = require('fs');
const os = require('os');
const WebSocket = require('ws');

let mainWindow;
let tray;
let botProcess = null;
let wss = null;
let isQuitting = false;

// Status variables
let botStatus = 'stopped';
let cpuUsage = 0;
let memoryUsage = 0;
let uptime = '0:00:00';
let connections = 0;

// Store websocket clients
const clients = new Set();

// Environment variable configuration
require('dotenv').config();

// Check if required environment variables are set
function checkRequiredEnvVars() {
  const requiredEnvVars = ['DISCORD_TOKEN', 'CLIENT_ID', 'GUILD_ID'];
  const missingVars = requiredEnvVars.filter(envVar => !process.env[envVar]);
  
  if (missingVars.length > 0) {
    dialog.showErrorBox(
      'Missing Configuration',
      `Please configure the following environment variables in .env file:\n\n${missingVars.join('\n')}`
    );
    return false;
  }
  return true;
}

// Create the main browser window
function createWindow() {
  mainWindow = new BrowserWindow({
    width: 900,
    height: 600,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'electron-preload.js')
    },
    icon: path.join(__dirname, 'images/icon.ico')
  });

  // Load the app's UI
  mainWindow.loadFile(path.join(__dirname, 'app/index.html'));

  // Create WebSocket server for stats communication
  setupWebSocketServer();

  // Open DevTools in development mode
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }

  // Handle window close event
  mainWindow.on('close', (event) => {
    if (!isQuitting) {
      event.preventDefault();
      mainWindow.hide();
      return false;
    }
    return true;
  });
}

function setupWebSocketServer() {
  // Close existing WebSocket server if it exists
  if (wss) {
    wss.close();
  }

  // Create a new WebSocket server
  wss = new WebSocket.Server({ port: 0 });
  const port = wss.address().port;
  console.log(`WebSocket server started on port ${port}`);

  // When a client connects
  wss.on('connection', (ws) => {
    // Add client to the set
    clients.add(ws);
    
    // Send initial status
    sendStatusToClient(ws);
    
    // Handle client messages
    ws.on('message', (message) => {
      const data = JSON.parse(message);
      
      if (data.action === 'startBot') {
        startBot();
      } else if (data.action === 'stopBot') {
        stopBot();
      } else if (data.action === 'restartBot') {
        restartBot();
      }
    });
    
    // Handle client disconnect
    ws.on('close', () => {
      clients.delete(ws);
    });
  });

  // Store WebSocket port in global to communicate to renderer
  global.wsPort = port;
}

// Send status update to all connected clients
function broadcastStatus() {
  for (const client of clients) {
    sendStatusToClient(client);
  }
}

// Send status to a specific client
function sendStatusToClient(ws) {
  if (ws.readyState === WebSocket.OPEN) {
    ws.send(JSON.stringify({
      botStatus,
      cpuUsage,
      memoryUsage,
      uptime,
      connections,
      pid: botProcess ? botProcess.pid : null
    }));
  }
}

// Start the Discord bot
function startBot() {
  if (botProcess) {
    console.log('Bot is already running');
    return;
  }

  if (!checkRequiredEnvVars()) {
    return;
  }

  console.log('Starting Discord bot...');
  botProcess = fork(path.join(__dirname, 'index.js'), [], {
    env: process.env,
    stdio: ['pipe', 'pipe', 'pipe', 'ipc']
  });

  // Update status
  botStatus = 'starting';
  broadcastStatus();

  // Handle bot process events
  botProcess.stdout.on('data', (data) => {
    const output = data.toString();
    console.log(`[BOT]: ${output}`);
    
    // If we detect the bot is ready in the logs
    if (output.includes('Bot is now online!') || output.includes('Ready!')) {
      botStatus = 'running';
      broadcastStatus();
    }
    
    // Send log to renderer if window exists
    if (mainWindow) {
      mainWindow.webContents.send('bot-log', output);
    }
  });

  botProcess.stderr.on('data', (data) => {
    const error = data.toString();
    console.error(`[BOT ERROR]: ${error}`);
    
    // Send error to renderer if window exists
    if (mainWindow) {
      mainWindow.webContents.send('bot-error', error);
    }
  });

  botProcess.on('exit', (code) => {
    console.log(`Bot process exited with code ${code}`);
    botProcess = null;
    botStatus = 'stopped';
    broadcastStatus();
    
    // Send exit notification to renderer if window exists
    if (mainWindow) {
      mainWindow.webContents.send('bot-stopped', code);
    }
  });

  // Start collecting stats
  startStatsCollection();
}

// Stop the Discord bot
function stopBot() {
  if (!botProcess) {
    console.log('Bot is not running');
    return;
  }

  console.log('Stopping Discord bot...');
  botProcess.kill();
  botStatus = 'stopping';
  broadcastStatus();
}

// Restart the Discord bot
function restartBot() {
  if (botProcess) {
    console.log('Restarting Discord bot...');
    stopBot();
    
    // Wait for the process to fully terminate before starting a new one
    const checkInterval = setInterval(() => {
      if (!botProcess) {
        clearInterval(checkInterval);
        setTimeout(startBot, 1000); // Delay to ensure clean restart
      }
    }, 100);
  } else {
    startBot();
  }
}

// Collect system and bot stats
function startStatsCollection() {
  // Clear any existing interval
  clearInterval(global.statsInterval);
  
  // Create new interval
  global.statsInterval = setInterval(() => {
    if (botProcess) {
      try {
        // Calculate uptime
        const botUptimeSeconds = process.uptime();
        const hours = Math.floor(botUptimeSeconds / 3600);
        const minutes = Math.floor((botUptimeSeconds % 3600) / 60);
        const seconds = Math.floor(botUptimeSeconds % 60);
        uptime = `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        
        // Get process memory usage
        const memUsage = process.memoryUsage();
        memoryUsage = Math.round(memUsage.heapUsed / 1024 / 1024 * 100) / 100; // in MB
        
        // Use os-utils for CPU usage if available
        try {
          const osUtils = require('os-utils');
          osUtils.cpuUsage((value) => {
            cpuUsage = Math.round(value * 100);
            broadcastStatus();
          });
        } catch (err) {
          // Fallback if os-utils is not available
          const cpus = os.cpus();
          let totalIdle = 0;
          let totalTick = 0;
          
          cpus.forEach(cpu => {
            for (const type in cpu.times) {
              totalTick += cpu.times[type];
            }
            totalIdle += cpu.times.idle;
          });
          
          // Calculate average CPU usage
          const idle = totalIdle / cpus.length;
          const total = totalTick / cpus.length;
          cpuUsage = Math.round(100 - (idle / total * 100));
          broadcastStatus();
        }
      } catch (error) {
        console.error('Error collecting stats:', error);
      }
    }
  }, 2000);
}

// Create system tray icon
function createTray() {
  tray = new Tray(path.join(__dirname, 'images/icon.ico'));
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Show App', click: () => mainWindow.show() },
    { label: 'Start Bot', click: startBot },
    { label: 'Stop Bot', click: stopBot },
    { label: 'Restart Bot', click: restartBot },
    { type: 'separator' },
    { label: 'Quit', click: () => {
      isQuitting = true;
      app.quit();
    }}
  ]);
  
  tray.setToolTip('Discord Bot');
  tray.setContextMenu(contextMenu);
  
  tray.on('click', () => {
    mainWindow.show();
  });
}

// App event handlers
app.on('ready', () => {
  createWindow();
  createTray();
  
  // Auto-start bot if specified in environment
  if (process.env.AUTO_START_BOT === 'true') {
    startBot();
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  } else {
    mainWindow.show();
  }
});

app.on('before-quit', () => {
  isQuitting = true;
  
  // Stop the bot when quitting
  if (botProcess) {
    botProcess.kill();
  }
  
  // Clean up WebSocket server
  if (wss) {
    wss.close();
  }
  
  // Clear any intervals
  clearInterval(global.statsInterval);
});

// Handle IPC messages from renderer
ipcMain.on('get-ws-port', (event) => {
  event.returnValue = global.wsPort;
});

ipcMain.on('start-bot', () => {
  startBot();
});

ipcMain.on('stop-bot', () => {
  stopBot();
});

ipcMain.on('restart-bot', () => {
  restartBot();
});

ipcMain.on('open-about', () => {
  const aboutWindow = new BrowserWindow({
    width: 400,
    height: 300,
    parent: mainWindow,
    modal: true,
    show: false,
    webPreferences: {
      nodeIntegration: false,
      contextIsolation: true,
      preload: path.join(__dirname, 'electron-preload.js')
    }
  });
  
  aboutWindow.loadFile(path.join(__dirname, 'app/about.html'));
  aboutWindow.once('ready-to-show', () => {
    aboutWindow.show();
  });
});

// Export functions for potential use in other modules
module.exports = {
  startBot,
  stopBot,
  restartBot
};