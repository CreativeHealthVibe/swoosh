<!-- Electron Desktop App View -->
<div class="electron-container">
  <div class="electron-header">
    <div class="electron-header-left">
      <div id="bot-status-indicator" class="status-indicator online" data-status="online"></div>
      <h1>SWOOSH Bot Dashboard</h1>
      <span class="version-badge">v1.0.0</span>
    </div>
    <div class="electron-header-right">
      <button id="restart-bot-btn" class="btn btn-primary">
        <i class="fas fa-sync-alt"></i> Restart Bot
      </button>
    </div>
  </div>

  <div class="electron-content">
    <div class="electron-sidebar">
      <div class="sidebar-section">
        <h3>Navigation</h3>
        <ul class="sidebar-nav">
          <li><a href="#dashboard" class="active" data-section="dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
          <li><a href="#commands" data-section="commands"><i class="fas fa-terminal"></i> Commands</a></li>
          <li><a href="#server-health" data-section="server-health"><i class="fas fa-server"></i> Server Health</a></li>
          <li><a href="#logs" data-section="logs"><i class="fas fa-list"></i> Logs</a></li>
        </ul>
      </div>

      <div class="sidebar-section">
        <h3>Bot Status</h3>
        <div class="status-info">
          <div class="status-row">
            <span class="status-label">Uptime:</span>
            <span class="status-value" id="uptime-value">
              <%= uptime.days %> days, <%= uptime.hours %> hrs, <%= uptime.minutes %> mins
            </span>
          </div>
          <div class="status-row">
            <span class="status-label">Servers:</span>
            <span class="status-value"><%= client.guilds.cache.size %></span>
          </div>
          <div class="status-row">
            <span class="status-label">Users:</span>
            <span class="status-value"><%= client.users.cache.size %></span>
          </div>
          <div class="status-row">
            <span class="status-label">Last Updated:</span>
            <span class="status-value" id="last-update"><%= new Date().toLocaleString() %></span>
          </div>
        </div>
      </div>
    </div>

    <div class="electron-main">
      <!-- Dashboard Section -->
      <div class="content-section active" id="dashboard-section">
        <div class="dashboard-cards">
          <div class="dashboard-card">
            <div class="card-icon">
              <i class="fas fa-server"></i>
            </div>
            <div class="card-content">
              <h3>Servers</h3>
              <p class="card-value"><%= client.guilds.cache.size %></p>
            </div>
          </div>
          <div class="dashboard-card">
            <div class="card-icon">
              <i class="fas fa-users"></i>
            </div>
            <div class="card-content">
              <h3>Users</h3>
              <p class="card-value"><%= client.users.cache.size %></p>
            </div>
          </div>
          <div class="dashboard-card">
            <div class="card-icon">
              <i class="fas fa-comment-alt"></i>
            </div>
            <div class="card-content">
              <h3>Channels</h3>
              <p class="card-value"><%= client.channels.cache.size %></p>
            </div>
          </div>
          <div class="dashboard-card">
            <div class="card-icon">
              <i class="fas fa-terminal"></i>
            </div>
            <div class="card-content">
              <h3>Commands</h3>
              <p class="card-value"><%= client.commands.size + client.slashCommands.size %></p>
            </div>
          </div>
        </div>

        <div class="quick-actions">
          <h2>Quick Actions</h2>
          <div class="quick-actions-buttons">
            <button class="btn btn-primary" id="view-logs-btn">
              <i class="fas fa-list"></i> View Logs
            </button>
            <button class="btn btn-primary" id="view-commands-btn">
              <i class="fas fa-terminal"></i> View Commands
            </button>
            <button class="btn btn-primary" id="view-health-btn">
              <i class="fas fa-heartbeat"></i> Server Health
            </button>
          </div>
        </div>
      </div>

      <!-- Commands Section -->
      <div class="content-section" id="commands-section">
        <h2>Available Commands</h2>
        <div class="commands-container">
          <div class="commands-list">
            <% 
            // Get commands from client
            const regularCommands = Array.from(client.commands.values())
              .filter(cmd => cmd.name && cmd.description)
              .map(cmd => ({ 
                name: cmd.name, 
                description: cmd.description,
                usage: cmd.usage || null,
                category: cmd.category || 'General'
              }));
              
            const slashCommands = Array.from(client.slashCommands.values())
              .map(cmd => ({
                name: cmd.data ? cmd.data.name : cmd.name,
                description: cmd.data ? cmd.data.description : cmd.description,
                category: cmd.category || 'General'
              }));
              
            // Group commands by category
            const categories = {};
            
            regularCommands.forEach(cmd => {
              if (!categories[cmd.category]) {
                categories[cmd.category] = { regular: [], slash: [] };
              }
              categories[cmd.category].regular.push(cmd);
            });
            
            slashCommands.forEach(cmd => {
              if (!categories[cmd.category]) {
                categories[cmd.category] = { regular: [], slash: [] };
              }
              categories[cmd.category].slash.push(cmd);
            });
            %>
            
            <% Object.entries(categories).forEach(([category, commands]) => { %>
              <div class="command-category">
                <h3><%= category %></h3>
                
                <% if (commands.regular.length > 0) { %>
                  <div class="command-type">
                    <h4>Text Commands</h4>
                    <% commands.regular.forEach(cmd => { %>
                      <div class="command-item">
                        <h5 class="command-name">.<%= cmd.name %></h5>
                        <p class="command-description"><%= cmd.description %></p>
                        <% if (cmd.usage) { %>
                          <p class="command-usage">Usage: <%= cmd.usage %></p>
                        <% } %>
                      </div>
                    <% }); %>
                  </div>
                <% } %>
                
                <% if (commands.slash.length > 0) { %>
                  <div class="command-type">
                    <h4>Slash Commands</h4>
                    <% commands.slash.forEach(cmd => { %>
                      <div class="command-item">
                        <h5 class="command-name">/<%= cmd.name %></h5>
                        <p class="command-description"><%= cmd.description %></p>
                      </div>
                    <% }); %>
                  </div>
                <% } %>
              </div>
            <% }); %>
          </div>
        </div>
      </div>

      <!-- Server Health Section -->
      <div class="content-section" id="server-health-section">
        <h2>Server Health</h2>
        <div class="server-health-container">
          <div class="health-cards">
            <div class="health-card">
              <h3>CPU Usage</h3>
              <div class="meter-container">
                <div class="meter">
                  <div class="meter-value" id="cpu-meter" style="width: 0%;"></div>
                </div>
                <div class="meter-label">
                  <span id="cpu-value">0</span>%
                </div>
              </div>
            </div>
            <div class="health-card">
              <h3>Memory Usage</h3>
              <div class="meter-container">
                <div class="meter">
                  <div class="meter-value" id="memory-meter" style="width: 0%;"></div>
                </div>
                <div class="meter-label">
                  <span id="memory-value">0</span>% of <span id="memory-total">0</span> MB
                </div>
              </div>
            </div>
          </div>
          
          <div class="system-info">
            <h3>System Information</h3>
            <div class="info-grid">
              <div class="info-item">
                <span class="info-label">Platform:</span>
                <span class="info-value" id="platform-value">-</span>
              </div>
              <div class="info-item">
                <span class="info-label">Architecture:</span>
                <span class="info-value" id="arch-value">-</span>
              </div>
              <div class="info-item">
                <span class="info-label">CPU Cores:</span>
                <span class="info-value" id="cpu-cores">-</span>
              </div>
              <div class="info-item">
                <span class="info-label">Load Average:</span>
                <span class="info-value" id="load-avg">-</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Logs Section -->
      <div class="content-section" id="logs-section">
        <h2>Bot Logs</h2>
        <div class="logs-container">
          <div class="log-controls">
            <button id="clear-logs" class="btn btn-small">Clear Logs</button>
            <button id="scroll-to-bottom" class="btn btn-small">Scroll to Bottom</button>
          </div>
          <div id="bot-logs" class="log-content"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Navigation
    const navLinks = document.querySelectorAll('.sidebar-nav a');
    const sections = document.querySelectorAll('.content-section');
    
    function showSection(sectionId) {
      sections.forEach(section => {
        section.classList.remove('active');
      });
      
      const targetSection = document.getElementById(`${sectionId}-section`);
      if (targetSection) {
        targetSection.classList.add('active');
      }
      
      navLinks.forEach(link => {
        link.classList.remove('active');
      });
      
      const activeLink = document.querySelector(`.sidebar-nav a[data-section="${sectionId}"]`);
      if (activeLink) {
        activeLink.classList.add('active');
      }
    }
    
    navLinks.forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const section = link.getAttribute('data-section');
        showSection(section);
      });
    });
    
    // Quick action buttons
    document.getElementById('view-logs-btn').addEventListener('click', () => {
      showSection('logs');
    });
    
    document.getElementById('view-commands-btn').addEventListener('click', () => {
      showSection('commands');
    });
    
    document.getElementById('view-health-btn').addEventListener('click', () => {
      showSection('server-health');
    });
    
    // Restart bot button
    document.getElementById('restart-bot-btn').addEventListener('click', () => {
      if (window.ipcRenderer) {
        window.ipcRenderer.send('restart-bot');
      }
    });
    
    // Clear logs button
    document.getElementById('clear-logs').addEventListener('click', () => {
      const logsContainer = document.getElementById('bot-logs');
      if (logsContainer) {
        logsContainer.innerHTML = '';
      }
    });
    
    // Scroll to bottom button
    document.getElementById('scroll-to-bottom').addEventListener('click', () => {
      const logsContainer = document.getElementById('bot-logs');
      if (logsContainer) {
        logsContainer.scrollTop = logsContainer.scrollHeight;
      }
    });
    
    // Fetch server health data periodically
    function updateServerHealth() {
      fetch('/api/server-health')
        .then(response => response.json())
        .then(data => {
          // Update CPU meter
          const cpuMeter = document.getElementById('cpu-meter');
          const cpuValue = document.getElementById('cpu-value');
          if (cpuMeter && cpuValue) {
            const cpuPercentage = data.cpu.usage;
            cpuMeter.style.width = `${cpuPercentage}%`;
            cpuValue.textContent = cpuPercentage;
          }
          
          // Update memory meter
          const memoryMeter = document.getElementById('memory-meter');
          const memoryValue = document.getElementById('memory-value');
          const memoryTotal = document.getElementById('memory-total');
          if (memoryMeter && memoryValue && memoryTotal) {
            const memPercentage = data.memory.usedPercentage;
            memoryMeter.style.width = `${memPercentage}%`;
            memoryValue.textContent = memPercentage;
            memoryTotal.textContent = Math.round(data.memory.total / (1024 * 1024));
          }
          
          // Update system info
          document.getElementById('platform-value').textContent = data.system.platform;
          document.getElementById('arch-value').textContent = data.system.arch;
          document.getElementById('cpu-cores').textContent = data.cpu.count;
          document.getElementById('load-avg').textContent = data.cpu.loadAverage.map(v => v.toFixed(2)).join(', ');
          
          // Update last updated timestamp
          document.getElementById('last-update').textContent = new Date().toLocaleString();
          
          // Update uptime
          const uptimeValue = document.getElementById('uptime-value');
          if (uptimeValue) {
            uptimeValue.textContent = `${data.uptime.days} days, ${data.uptime.hours} hrs, ${data.uptime.minutes} mins`;
          }
        })
        .catch(error => {
          console.error('Error fetching server health:', error);
        });
    }
    
    // Initial update
    updateServerHealth();
    
    // Update every 5 seconds
    setInterval(updateServerHealth, 5000);
  });
</script>

<style>
  .electron-container {
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
    font-family: 'Inter', sans-serif;
  }
  
  .electron-header {
    background-color: #1a1a2e;
    color: white;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    border-bottom: 1px solid #2d2d42;
  }
  
  .electron-header-left {
    display: flex;
    align-items: center;
  }
  
  .electron-header-left h1 {
    margin: 0;
    font-size: 1.5rem;
    margin-left: 1rem;
  }
  
  .version-badge {
    font-size: 0.8rem;
    background-color: rgba(156, 77, 255, 0.2);
    color: #9c4dff;
    padding: 0.2rem 0.5rem;
    border-radius: 12px;
    margin-left: 1rem;
    font-weight: 500;
  }
  
  .status-indicator {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    position: relative;
  }
  
  .status-indicator.online {
    background-color: #4ade80;
    box-shadow: 0 0 8px #4ade80;
  }
  
  .status-indicator.offline {
    background-color: #f87171;
    box-shadow: 0 0 8px #f87171;
  }
  
  .status-indicator.restarting {
    background-color: #facc15;
    box-shadow: 0 0 8px #facc15;
    animation: pulse 1s infinite;
  }
  
  @keyframes pulse {
    0% { opacity: 1; }
    50% { opacity: 0.5; }
    100% { opacity: 1; }
  }
  
  .electron-content {
    display: flex;
    flex: 1;
    overflow: hidden;
  }
  
  .electron-sidebar {
    width: 280px;
    background-color: #16213e;
    color: white;
    overflow-y: auto;
    padding: 1rem;
    border-right: 1px solid #2d2d42;
  }
  
  .sidebar-section {
    margin-bottom: 2rem;
  }
  
  .sidebar-section h3 {
    color: #9c4dff;
    font-size: 1.1rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #2d2d42;
  }
  
  .sidebar-nav {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .sidebar-nav li {
    margin-bottom: 0.5rem;
  }
  
  .sidebar-nav a {
    display: flex;
    align-items: center;
    padding: 0.75rem 1rem;
    color: #b4c6ef;
    text-decoration: none;
    border-radius: 4px;
    transition: all 0.2s;
  }
  
  .sidebar-nav a.active {
    background-color: #9c4dff;
    color: white;
  }
  
  .sidebar-nav a:hover:not(.active) {
    background-color: rgba(156, 77, 255, 0.2);
  }
  
  .sidebar-nav a i {
    margin-right: 0.75rem;
    width: 20px;
    text-align: center;
  }
  
  .status-info {
    background-color: #1a1a2e;
    border-radius: 8px;
    padding: 1rem;
  }
  
  .status-row {
    display: flex;
    justify-content: space-between;
    margin-bottom: 0.75rem;
  }
  
  .status-label {
    color: #b4c6ef;
  }
  
  .status-value {
    font-weight: 500;
  }
  
  .electron-main {
    flex: 1;
    overflow-y: auto;
    padding: 1.5rem;
    background-color: #0f172a;
    color: #e2e8f0;
  }
  
  .content-section {
    display: none;
  }
  
  .content-section.active {
    display: block;
  }
  
  .dashboard-cards {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .dashboard-card {
    background-color: #1e293b;
    border-radius: 8px;
    padding: 1.5rem;
    display: flex;
    align-items: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  
  .card-icon {
    margin-right: 1rem;
    background-color: #9c4dff;
    width: 48px;
    height: 48px;
    border-radius: 10px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.5rem;
  }
  
  .card-content h3 {
    margin: 0;
    font-size: 1rem;
    color: #94a3b8;
  }
  
  .card-value {
    font-size: 1.75rem;
    font-weight: 600;
    margin: 0.25rem 0 0 0;
  }
  
  .quick-actions {
    background-color: #1e293b;
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .quick-actions h2 {
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
  }
  
  .quick-actions-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .btn {
    background-color: #9c4dff;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 0.875rem;
    display: inline-flex;
    align-items: center;
    transition: background-color 0.2s;
  }
  
  .btn i {
    margin-right: 0.5rem;
  }
  
  .btn:hover {
    background-color: #7c3acd;
  }
  
  .btn-small {
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
  }
  
  .commands-container {
    background-color: #1e293b;
    border-radius: 8px;
    padding: 1.5rem;
  }
  
  .command-category {
    margin-bottom: 2rem;
  }
  
  .command-category h3 {
    color: #9c4dff;
    font-size: 1.25rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #2d2d42;
  }
  
  .command-type h4 {
    color: #94a3b8;
    font-size: 1rem;
    margin: 1rem 0;
  }
  
  .command-item {
    margin-bottom: 1.25rem;
    padding-left: 1rem;
    border-left: 2px solid #3b4a6380;
    padding-bottom: 0.5rem;
  }
  
  .command-name {
    margin: 0;
    font-size: 1rem;
    color: #d8b4fe;
  }
  
  .command-description {
    margin: 0.25rem 0 0 0;
    font-size: 0.875rem;
    color: #cbd5e1;
  }
  
  .command-usage {
    margin: 0.25rem 0 0 0;
    font-size: 0.75rem;
    color: #94a3b8;
    font-family: monospace;
    background-color: #1a1a2e;
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    display: inline-block;
  }
  
  .server-health-container {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  @media (min-width: 768px) {
    .server-health-container {
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  .health-cards {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  
  .health-card {
    background-color: #1e293b;
    border-radius: 8px;
    padding: 1.5rem;
  }
  
  .health-card h3 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    color: #94a3b8;
  }
  
  .meter-container {
    display: flex;
    align-items: center;
  }
  
  .meter {
    flex: 1;
    height: 12px;
    background-color: rgba(156, 77, 255, 0.2);
    border-radius: 6px;
    overflow: hidden;
    margin-right: 1rem;
  }
  
  .meter-value {
    height: 100%;
    background-color: #9c4dff;
    width: 0;
    transition: width 0.5s;
  }
  
  .meter-label {
    min-width: 100px;
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .system-info {
    background-color: #1e293b;
    border-radius: 8px;
    padding: 1.5rem;
  }
  
  .system-info h3 {
    margin: 0 0 1rem 0;
    font-size: 1.1rem;
    color: #94a3b8;
  }
  
  .info-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  .info-item {
    display: flex;
    flex-direction: column;
  }
  
  .info-label {
    font-size: 0.875rem;
    color: #94a3b8;
    margin-bottom: 0.25rem;
  }
  
  .info-value {
    font-size: 1rem;
    font-weight: 500;
  }
  
  .logs-container {
    background-color: #1e293b;
    border-radius: 8px;
    overflow: hidden;
    display: flex;
    flex-direction: column;
    height: 500px;
  }
  
  .log-controls {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    padding: 0.5rem;
    background-color: #182234;
  }
  
  .log-content {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
    font-family: monospace;
    font-size: 0.875rem;
    background-color: #0f172a;
    white-space: pre-wrap;
  }
  
  .log-message {
    margin-bottom: 0.25rem;
    line-height: 1.5;
  }
  
  .log-message.error {
    color: #f87171;
  }
</style>